return allResultsMatch(n, MAY_BE_STRING_PREDICATE);
return recursiveResultsMatch(n, MAY_BE_STRING_PREDICATE);
return anyResultsMatch(n, MAY_BE_STRING_PREDICATE);
return eachResultsMatch(n, MAY_BE_STRING_PREDICATE);
return multipleResultsMatch(n, MAY_BE_STRING_PREDICATE);
return recurseHelper(n, MAY_BE_STRING_PREDICATE);
return recurseMatch(n, MAY_BE_STRING_PREDICATE);
return allResultMatch(n, MAY_BE_STRING_PREDICATE);
return childResultsMatch(n, MAY_BE_STRING_PREDICATE);
return ALLResultsMatch(n, MAY_BE_STRING_PREDICATE);
return oneResultsMatch(n, MAY_BE_STRING_PREDICATE);
return everyResultsMatch(n, MAY_BE_STRING_PREDICATE);
return completeResultsMatch(n, MAY_BE_STRING_PREDICATE);
return AllResultsMatch(n, MAY_BE_STRING_PREDICATE);
return directResultsMatch(n, MAY_BE_STRING_PREDICATE);
return recurseNode(n, MAY_BE_STRING_PREDICATE);
return this.match(n, MAY_BE_STRING_PREDICATE);
return onlyResultsMatch(n, MAY_BE_STRING_PREDICATE);
return theResultsMatch(n, MAY_BE_STRING_PREDICATE);
return nestedResultsMatch(n, MAY_BE_STRING_PREDICATE);
return fullResultsMatch(n, MAY_BE_STRING_PREDICATE);
return wholeResultsMatch(n, MAY_BE_STRING_PREDICATE);
return recursiveResultMatch(n, MAY_BE_STRING_PREDICATE);
return childNodes(n, MAY_BE_STRING_PREDICATE);
return subResultsMatch(n, MAY_BE_STRING_PREDICATE);
return firstResultsMatch(n, MAY_BE_STRING_PREDICATE);
return singleResultsMatch(n, MAY_BE_STRING_PREDICATE);
return recursiveNodeMatch(n, MAY_BE_STRING_PREDICATE);
return entireResultsMatch(n, MAY_BE_STRING_PREDICATE);
return severalResultsMatch(n, MAY_BE_STRING_PREDICATE);
return manyResultsMatch(n, MAY_BE_STRING_PREDICATE);
return childNodeMatch(n, MAY_BE_STRING_PREDICATE);
return childIsString(n, MAY_BE_STRING_PREDICATE);
returnAllResultsMatch(n, MAY_BE_STRING_PREDICATE);
return partialResultsMatch(n, MAY_BE_STRING_PREDICATE);
return nextResultsMatch(n, MAY_BE_STRING_PREDICATE);
return getResultsMatch(n, MAY_BE_STRING_PREDICATE);
return childsMatch(n, MAY_BE_STRING_PREDICATE);
return willBeString(n, MAY_BE_STRING_PREDICATE);
return someResultsMatch(n, MAY_BE_STRING_PREDICATE);
return descendantResultsMatch(n, MAY_BE_STRING_PREDICATE);
return recursiveMatches(n, MAY_BE_STRING_PREDICATE);
return mayBeString(n, MAY_BE_STRING_PREDICATE);
return recursiveCompile(n, MAY_BE_STRING_PREDICATE);
return moreResultsMatch(n, MAY_BE_STRING_PREDICATE);
return childMatches(n, MAY_BE_STRING_PREDICATE);
return rootResultsMatch(n, MAY_BE_STRING_PREDICATE);
return leafResultsMatch(n, MAY_BE_STRING_PREDICATE);
return rootNodeMatch(n, MAY_BE_STRING_PREDICATE);
return doRecurse(n, MAY_BE_STRING_PREDICATE);
return asStringHelper(n, MAY_BE_STRING_PREDICATE);
return recursiveStringHelper(n, MAY_BE_STRING_PREDICATE);
return trueResultsMatch(n, MAY_BE_STRING_PREDICATE);
return noResultsMatch(n, MAY_BE_STRING_PREDICATE);
return childSibling(n, MAY_BE_STRING_PREDICATE);
return everythingResultsMatch(n, MAY_BE_STRING_PREDICATE);
return recursiveResolve(n, MAY_BE_STRING_PREDICATE);
return additionalResultsMatch(n, MAY_BE_STRING_PREDICATE);
return lastResultsMatch(n, MAY_BE_STRING_PREDICATE);
return recursiveMatchHelper(n, MAY_BE_STRING_PREDICATE);
return remainingResultsMatch(n, MAY_BE_STRING_PREDICATE);
return andResultsMatch(n, MAY_BE_STRING_PREDICATE);
return mostResultsMatch(n, MAY_BE_STRING_PREDICATE);
return childNamesMatch(n, MAY_BE_STRING_PREDICATE);
return subsequentResultsMatch(n, MAY_BE_STRING_PREDICATE);
return twoResultsMatch(n, MAY_BE_STRING_PREDICATE);
return recursiveNodes(n, MAY_BE_STRING_PREDICATE);
return justResultsMatch(n, MAY_BE_STRING_PREDICATE);
return recursiveParse(n, MAY_BE_STRING_PREDICATE);
return super.match(n, MAY_BE_STRING_PREDICATE);
return toStringHelper(n, MAY_BE_STRING_PREDICATE);
return distinctResultsMatch(n, MAY_BE_STRING_PREDICATE);
return recursiveNamesMatch(n, MAY_BE_STRING_PREDICATE);
return childrenResultsMatch(n, MAY_BE_STRING_PREDICATE);
return childSorts(n, MAY_BE_STRING_PREDICATE);
return mustBeString(n, MAY_BE_STRING_PREDICATE);
return recursiveStringMatch(n, MAY_BE_STRING_PREDICATE);
return specificResultsMatch(n, MAY_BE_STRING_PREDICATE);
return doResolve(n, MAY_BE_STRING_PREDICATE);
return recurseTree(n, MAY_BE_STRING_PREDICATE);
return isStringHelper(n, MAY_BE_STRING_PREDICATE);
return recursiveChildrenMatch(n, MAY_BE_STRING_PREDICATE);
return recurseChild(n, MAY_BE_STRING_PREDICATE);
return childResultMatch(n, MAY_BE_STRING_PREDICATE);
return recursivePredicate(n, MAY_BE_STRING_PREDICATE);
return furtherResultsMatch(n, MAY_BE_STRING_PREDICATE);
return this.match(n, MAY_BE_STRING_PREDICATE);
return siblingResultsMatch(n, MAY_BE_STRING_PREDICATE);
return finalResultsMatch(n, MAY_BE_STRING_PREDICATE);
return shouldBeString(n, MAY_BE_STRING_PREDICATE);
return doResultsMatch(n, MAY_BE_STRING_PREDICATE);
return currentResultsMatch(n, MAY_BE_STRING_PREDICATE);
return withResultsMatch(n, MAY_BE_STRING_PREDICATE);
return childSiblings(n, MAY_BE_STRING_PREDICATE);
return threeResultsMatch(n, MAY_BE_STRING_PREDICATE);
returnallResultsMatch(n, MAY_BE_STRING_PREDICATE);
return recursively(n, MAY_BE_STRING_PREDICATE);
return correctResultsMatch(n, MAY_BE_STRING_PREDICATE);
return rawResultsMatch(n, MAY_BE_STRING_PREDICATE);
return root.match(n, MAY_BE_STRING_PREDICATE);
return otherResultsMatch(n, MAY_BE_STRING_PREDICATE);
return recursiveNamespace(n, MAY_BE_STRING_PREDICATE);
return recursiveSearchHelper(n, MAY_BE_STRING_PREDICATE);
return whichResultsMatch(n, MAY_BE_STRING_PREDICATE);
return copyResultsMatch(n, MAY_BE_STRING_PREDICATE);
return arrayResultsMatch(n, MAY_BE_STRING_PREDICATE);
return onResultsMatch(n, MAY_BE_STRING_PREDICATE);
return ofResultsMatch(n, MAY_BE_STRING_PREDICATE);
return recurseSearch(n, MAY_BE_STRING_PREDICATE);
return multiResultsMatch(n, MAY_BE_STRING_PREDICATE);
return allRulesMatch(n, MAY_BE_STRING_PREDICATE);
return subNodeMatch(n, MAY_BE_STRING_PREDICATE);
return callRecursive(n, MAY_BE_STRING_PREDICATE);
return canBeString(n, MAY_BE_STRING_PREDICATE);
return alwaysResultsMatch(n, MAY_BE_STRING_PREDICATE);
return sameResultsMatch(n, MAY_BE_STRING_PREDICATE);
return subNodes(n, MAY_BE_STRING_PREDICATE);
return allResultsMat(n, MAY_BE_STRING_PREDICATE);
return descendantMatches(n, MAY_BE_STRING_PREDICATE);
return allResultsComplete(n, MAY_BE_STRING_PREDICATE);
return individualResultsMatch(n, MAY_BE_STRING_PREDICATE);
return childRecurse(n, MAY_BE_STRING_PREDICATE);
return rootIsString(n, MAY_BE_STRING_PREDICATE);
return recurseCheck(n, MAY_BE_STRING_PREDICATE);
return collectResultsMatch(n, MAY_BE_STRING_PREDICATE);
return searchResultsMatch(n, MAY_BE_STRING_PREDICATE);
return recursiveCallHelper(n, MAY_BE_STRING_PREDICATE);
return matchRecurse(n, MAY_BE_STRING_PREDICATE);
return endResultsMatch(n, MAY_BE_STRING_PREDICATE);
return recurseResult(n, MAY_BE_STRING_PREDICATE);
return recurseInternal(n, MAY_BE_STRING_PREDICATE);
return buildResultsMatch(n, MAY_BE_STRING_PREDICATE);
return areResultsMatch(n, MAY_BE_STRING_PREDICATE);
return recurseChildren(n, MAY_BE_STRING_PREDICATE);
return allReturnsMatch(n, MAY_BE_STRING_PREDICATE);
return childResolve(n, MAY_BE_STRING_PREDICATE);
return innerResultsMatch(n, MAY_BE_STRING_PREDICATE);
return listResultsMatch(n, MAY_BE_STRING_PREDICATE);
return recurseImpl(n, MAY_BE_STRING_PREDICATE);
return recursiveLookup(n, MAY_BE_STRING_PREDICATE);
return possibleResultsMatch(n, MAY_BE_STRING_PREDICATE);
return parseResultsMatch(n, MAY_BE_STRING_PREDICATE);
return eachResultMatch(n, MAY_BE_STRING_PREDICATE);
return recursiveReturnsMatch(n, MAY_BE_STRING_PREDICATE);
return new StringHelper(n, MAY_BE_STRING_PREDICATE);
return childPredicate(n, MAY_BE_STRING_PREDICATE);
return perResultsMatch(n, MAY_BE_STRING_PREDICATE);
return matchRecursive(n, MAY_BE_STRING_PREDICATE);
return emptyResultsMatch(n, MAY_BE_STRING_PREDICATE);
return overallResultsMatch(n, MAY_BE_STRING_PREDICATE);
return childOfMatch(n, MAY_BE_STRING_PREDICATE);
return foundResultsMatch(n, MAY_BE_STRING_PREDICATE);
return traverseRecursive(n, MAY_BE_STRING_PREDICATE);
return allResultsCompare(n, MAY_BE_STRING_PREDICATE);
return alsoResultsMatch(n, MAY_BE_STRING_PREDICATE);
return recursiveMatcher(n, MAY_BE_STRING_PREDICATE);
return closestResultsMatch(n, MAY_BE_STRING_PREDICATE);
return recursiveTreeMatch(n, MAY_BE_STRING_PREDICATE);
return 1ResultsMatch(n, MAY_BE_STRING_PREDICATE);
return rootResultMatch(n, MAY_BE_STRING_PREDICATE);
return childrenIsString(n, MAY_BE_STRING_PREDICATE);
return rootMatches(n, MAY_BE_STRING_PREDICATE);
return childSorted(n, MAY_BE_STRING_PREDICATE);
return childSMatch(n, MAY_BE_STRING_PREDICATE);
return recursiveEval(n, MAY_BE_STRING_PREDICATE);
return allResultsAll(n, MAY_BE_STRING_PREDICATE);
return recursiveReturnValue(n, MAY_BE_STRING_PREDICATE);
return fourResultsMatch(n, MAY_BE_STRING_PREDICATE);
return findResultsMatch(n, MAY_BE_STRING_PREDICATE);
return allValuesMatch(n, MAY_BE_STRING_PREDICATE);
return deepestResultsMatch(n, MAY_BE_STRING_PREDICATE);
return childContains(n, MAY_BE_STRING_PREDICATE);
return specialResultsMatch(n, MAY_BE_STRING_PREDICATE);
return topResultsMatch(n, MAY_BE_STRING_PREDICATE);
return recurseFunction(n, MAY_BE_STRING_PREDICATE);
return recursiveSequence(n, MAY_BE_STRING_PREDICATE);
return actualResultsMatch(n, MAY_BE_STRING_PREDICATE);
return allChildrenMatch(n, MAY_BE_STRING_PREDICATE);
return filterResultsMatch(n, MAY_BE_STRING_PREDICATE);
return findFirstChild(n, MAY_BE_STRING_PREDICATE);
return compositeResultsMatch(n, MAY_BE_STRING_PREDICATE);
return recursiveIsString(n, MAY_BE_STRING_PREDICATE);
return childrenMatches(n, MAY_BE_STRING_PREDICATE);
return exactResultsMatch(n, MAY_BE_STRING_PREDICATE);
return recursiveExpression(n, MAY_BE_STRING_PREDICATE);
return updateResultsMatch(n, MAY_BE_STRING_PREDICATE);
return mapResultsMatch(n, MAY_BE_STRING_PREDICATE);
return aResultsMatch(n, MAY_BE_STRING_PREDICATE);
return childAsString(n, MAY_BE_STRING_PREDICATE);
return restResultsMatch(n, MAY_BE_STRING_PREDICATE);
return childParse(n, MAY_BE_STRING_PREDICATE);
return recursiveFindString(n, MAY_BE_STRING_PREDICATE);
return fullyResultsMatch(n, MAY_BE_STRING_PREDICATE);
return recursiveScanHelper(n, MAY_BE_STRING_PREDICATE);
return recursiveSolve(n, MAY_BE_STRING_PREDICATE);
return reverseResultsMatch(n, MAY_BE_STRING_PREDICATE);
return recurseTest(n, MAY_BE_STRING_PREDICATE);
return searchForString(n, MAY_BE_STRING_PREDICATE);
return recursiveNodeCheck(n, MAY_BE_STRING_PREDICATE);
return recursiveGetChildren(n, MAY_BE_STRING_PREDICATE);
return iterateNode(n, MAY_BE_STRING_PREDICATE);
return allResultsCapture(n, MAY_BE_STRING_PREDICATE);
return recursiveRecurse(n, MAY_BE_STRING_PREDICATE);
return recurseRule(n, MAY_BE_STRING_PREDICATE);
return children.match(n, MAY_BE_STRING_PREDICATE);
return returnResultsMatch(n, MAY_BE_STRING_PREDICATE);
return recursiveMethodsMatch(n, MAY_BE_STRING_PREDICATE);
return nestedResultMatch(n, MAY_BE_STRING_PREDICATE);
return recursiveSorts(n, MAY_BE_STRING_PREDICATE);
return childSensitive(n, MAY_BE_STRING_PREDICATE);
return recurseString(n, MAY_BE_STRING_PREDICATE);
return allResultsWild(n, MAY_BE_STRING_PREDICATE);
return callRecurse(n, MAY_BE_STRING_PREDICATE);
return traverseRecurse(n, MAY_BE_STRING_PREDICATE);
return maxResultsMatch(n, MAY_BE_STRING_PREDICATE);
return recursiveGetValue(n, MAY_BE_STRING_PREDICATE);
return changeResultsMatch(n, MAY_BE_STRING_PREDICATE);
return addResultsMatch(n, MAY_BE_STRING_PREDICATE);
return recursiveCallCheck(n, MAY_BE_STRING_PREDICATE);
return beStringHelper(n, MAY_BE_STRING_PREDICATE);
return childChildrenMatch(n, MAY_BE_STRING_PREDICATE);
return childSearcher(n, MAY_BE_STRING_PREDICATE);
return bestResultsMatch(n, MAY_BE_STRING_PREDICATE);
return recursiveReplacement(n, MAY_BE_STRING_PREDICATE);
return findRecursive(n, MAY_BE_STRING_PREDICATE);
return recursivePatternMatch(n, MAY_BE_STRING_PREDICATE);
return allResultsSub(n, MAY_BE_STRING_PREDICATE);
return findNextNode(n, MAY_BE_STRING_PREDICATE);
return toResultsMatch(n, MAY_BE_STRING_PREDICATE);
return callResultsMatch(n, MAY_BE_STRING_PREDICATE);
return fromResultsMatch(n, MAY_BE_STRING_PREDICATE);
return childOfString(n, MAY_BE_STRING_PREDICATE);
return doRecursive(n, MAY_BE_STRING_PREDICATE);
return traverseResultsMatch(n, MAY_BE_STRING_PREDICATE);
return mergeResultsMatch(n, MAY_BE_STRING_PREDICATE);
return child.match(n, MAY_BE_STRING_PREDICATE);
return wildcardMatch(n, MAY_BE_STRING_PREDICATE);
return allSiblings(n, MAY_BE_STRING_PREDICATE);
return childSolve(n, MAY_BE_STRING_PREDICATE);
return searchRecursive(n, MAY_BE_STRING_PREDICATE);
return descendantNodeMatch(n, MAY_BE_STRING_PREDICATE);
return filterRecurse(n, MAY_BE_STRING_PREDICATE);
return restOfString(n, MAY_BE_STRING_PREDICATE);
return filterRecursive(n, MAY_BE_STRING_PREDICATE);
return iterateTree(n, MAY_BE_STRING_PREDICATE);
return iterateChildren(n, MAY_BE_STRING_PREDICATE);
return processResultsMatch(n, MAY_BE_STRING_PREDICATE);
return topLevelMatch(n, MAY_BE_STRING_PREDICATE);
return allResultsImpl(n, MAY_BE_STRING_PREDICATE);
return allResults match(n, MAY_BE_STRING_PREDICATE);
