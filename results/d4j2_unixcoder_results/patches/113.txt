 l &= 0xFFFFFFFFL;  
 l <<= 32;  
 assert l >= 0;  
 l >>>= 32;  
 l -= TWO_TO_32;  
 if (l < 0) return 0;  
 l %= TWO_TO_32;  
 l >>= 32;  
 l &= 0xffffffffL;  
 long tmp = l;  
 if (l < 0) return l;  
 long t = l;  
 assert l <= TWO_TO_32;  
 l *= TWO_TO_32;  
;  
 l *= 2;  
 return l;  
 zipLong = l;  
 --l;  
 l *= 0x100000000L;  
 assert l >= 0L;  
 this.l = l;  
 ++l;  
 assert l > 0;  
 l += TWO_TO_32;  
 long t = l & 0xFFFFFFFFL;  
 long t = l >> 32;  
 assert l >= TWO_TO_32;  
 l *= 10;  
 long t = l;  
 long temp = l;  
 long l = l << 32;  
 l &= ~TWO_TO_32;  
 if (l <= 0) return null;  
 this.l = l;  
 return l;  
 long l = l >>> 32;  
 l = -l;  
 if (l < 0) return null;  
 long n = l & 0xFFFFFFFFL;  
  assert l >= 0;  
 long n = l << 32;  
 long n = l >> 32;  
 if (l < 0) return 0;  
 long s = l;  
 long t = l << 32;  
 if (l >= 0) return l;  
 if (l <= 0) return l;  
 --l;  
 long tmp = l;  
 int i = 0;  
 l &= 0xFFFFFFFFL;  
 l += 0x100000000L;  
  l &= 0xFFFFFFFFL;  
 if (l <= 0) return 0;  
 long t = l >>> 32;  
 l *= -1L;  
 l += 0x80000000L;  
 l /= TWO_TO_32;  
 long n = l >>> 32;  
 long r = l;  
 if (l < 0) return l;  
 long n = l;  
 long l = l & 0xFFFFFFFFL;  
 if (l < 0) l = 0;  
  l &= 0xFFFFFFFFL;  
  ++l;  
 long unixTime = l;  
 long l = l >> 32;  
 assert l >= 2;  
 l *= -1;  
 long x = l;  
 long l0 = l;  
 l = l << 32;  
 l &= 0xFFFFFFFFL;  
 l = l & 0xFFFFFFFFL;  
  ++l;  
 long t = (long) l;  
 long time = l;  
  assert l >= 0;  
 if (l < 0) throw l;  
 long x = l >> 32;  
 l &= ~0xFFFFFFFFL;  
 assert l < TWO_TO_32;  
 l += 2;  
 l += 1L;  
 long l2 = l;  
 long z = l;  
 long r = l >> 32;  
 long r = l << 32;  
 long old = l;  
  --l;  
 long d = l & 0xFFFFFFFFL;  
 l -= TWO_TO_32;  
 long r = l & 0xFFFFFFFFL;  
 l *= TWO_TO_32L;  
 long tmp = l & 0xFFFFFFFFL;  
 long x = l & 0xFFFFFFFFL;  
 l <<= 56;  
 long m = l >> 32;  
 long t = l >> 32;  
 assert l >= 0;  
 if (l <= 0) return null;  
 long l1 = l;  
 long t = l & 0xFFFFFFFFL;  
 long d = l << 32;  
 long r = l >>> 32;  
 ++l;  
 int i = 0;  
 long d = l >> 32;  
  l -= TWO_TO_32;  
 l %= TWO_TO_32;  
 l &= Long.MAX_VALUE;  
 long s = l & 0xFFFFFFFFL;  
   return l;  
 long s = l >> 32;  
 l += 1;  
 l = l >>> 32;  
 long s = l;  
 l &= 0xFFFFFFFFL << 32;  
 long l0 = l >>> 32;  
 l = (long) l;  
 long x = l << 32;  
 long z = l << 32;  
  l >>>= 32;  
 return l << 32;  
 l <<= 1;  
 long r = 0;  
   l &= 0xFFFFFFFFL;  
 long x = l >>> 32;  
 long result = l;  
 long l = l >>> 32;  
 long tmp = l << 32;  
 long n = (long) l;  
 long t = l << 32;  
 long temp = l;  
 if (l == 0) return 0;  
 if (l >= 0) return l;  
 l &= 0xFFFFFFFF L;  
 long l = l << 32;  
 this.unix = l;  
 long t = 0;  
 l |= 0x80000000L;  
 long z = 0;  
 long i = l & 0xFFFFFFFFL;  
 long n = 0;  
 long t = l & 0xffffffffL;  
 if (l < 0) throw new IllegalArgumentException;  
 l += TWO_TO_32L;  
 int i = l & 0xFFFFFFFFL;  
 this.timestamp = l;  
 long d = l;  
 l += 0xFFFFFFFFL;  
 if (l < 0) return -1;  
 long v = l & 0xFFFFFFFFL;  
 long v = l;  
  l <<= 32;  
 long tmp; tmp = l;  
 long t = l >>> 32;  
 long i = l;  
 long tmp = l >>> 32;  
  l >>>= 32;  
 l -= TWO_TO_32L;  
 long temp = l & 0xFFFFFFFFL;  
 long s = l << 32;  
 if (l < 0) return null;  
 long n = l & 0xffffffffL;  
 long z = l >> 32;  
 l &= 0x7fffffffL;  
 long t = (long)l;  
 l = l >> 32;  
 if (l == 0) return null;  
 l &= 0xffffffffL;  
 l *= -32;  
 long v = l >> 32;  
 long n = l << 32;  
 long d = l >>> 32;  
 };  
 l ^= 0x80000000L;  
 long i = l >> 32;  
 try;  
 if (l < 0) return 0L;  
 long n = l & 0xFFFFFFFFL;  
 long l = l << 1;  
 long tmp = l >> 32;  
 long c = l >> 32;  
 long m = l >>> 32;  
 System.out.println;  
 l = (int) l;  
 if (l <= 0) return l;  
 if (l > 0) return l;  
 long l1 = l >> 32;  
 long c = l & 0xFFFFFFFFL;  
 long n = l >>> 32;  
 long t; t = l;  
 long unixTimestamp = l;  
 int i = (int) l;  
 long s = l >>> 32;  
 l = (long)l;  
 int i = l >> 32;  
 long l = (long) l;  
 long l2 = l >>> 32;  
 long l = -l;  
 int i = l & 0xFFFFFFFFL;  
 if (l == 0) return l;  
 long n = l << 1;  
 if (l < 1) return l;  
 if (l < 1) return 0;  
 if (l < 0L) return l;  
 long temp = l << 32;  
 long d = (long) l;  
 long l1 = l >>> 32;  
 long m = l & 0xFFFFFFFFL;  
 return unixTimeToZipLong;  
 switch (l) { case 0;  
 long a = l >> 32;  
 long l2 = l >> 32;  
 long bits = l >>> 32;  
 long z = l & 0xFFFFFFFFL;  
 l &= 0x00000000FFFFFFFFL;  
 if (l <= 0) return 0;  
 System.out.println(l);  
 long d = l & 0xffffffffL;  
 long z = l >>> 32;  
 int n = l & 0xFFFFFFFFL;  
 long c = l >>> 32;  
 if (l < 0L) return 0;  
 long v = l << 32;  
 long b = l & 0xFFFFFFFFL;  
 l /= TWO_TO_32L;  
 long l0 = l >> 32;  
 long l32 = l;  
 l &= ~0x80000000L;  
 int x = l & 0xFFFFFFFFL;  
 long t = l << 1;  
 long i = l >>> 32;  
 assert l >= 0x100000000L;  
 long r = l & 0xffffffffL;  
 long m = l << 32;  
 long v = l >>> 32;  
 l >>>= 0x100000000L;  
  assert l >= 0L;  
 int i = l >>> 32;  
 long now = System.currentTimeMillis();;  
 l = l & 0xffffffffL;  
 long p = l & 0xFFFFFFFFL;  
 long c = l << 32;  
 long l = l & 0xffffffffL;  
 long n = (long)l;  
 long s = l & 0xffffffffL;  
 }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 } }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 return l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 ; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
   }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  return l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
}; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  } }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 ...; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 } ; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 try; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 ... }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  } ; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 return l<mask1> }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  } ; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 int i; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 return l; }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 int i = 0; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 } ; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
...; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 return l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
long l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 ++l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 return 0L; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
   return l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 return 0; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 } }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
L; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 L; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  NOP; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 L; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long t = l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long l = l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  // }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 ; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long l = l >>> 32; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 }); final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  ++l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 throw new UnsupportedOperationException(); }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 for; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
} }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 int n = 0; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  return 0; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
<mask1> }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
return l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
   } }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 return unixTimeToZipLong; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 //}; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
long l = l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 assert l >= 0; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  //}; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 }; }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  } }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 return l >>> 32; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  //L; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  return l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long tmp = l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
static; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
    }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  // NOPMD; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 return Long.MAX_VALUE; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  // CHECKSTYLE:OFF; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long l = l >> 32; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 //L; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  return 0L; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 return l << 32; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 } // }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 --l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  return unixTimeToZipLong; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 ... } }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 return l & 0xFFFFFFFFL; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  //; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 NOP; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 <mask1> }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 // NOPMD; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 ++l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 <mask1> }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 ...; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 // }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 final long serialVersionUID = 1L; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 return l >> 32; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 return l<mask1> } }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long l = 0; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 } // }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long l2; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  assert l >= 0; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  //jni; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  ; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long l; }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 } } }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 //jni; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  try; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 return l * 2; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 //} }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 } };; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long l0 = l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 static long serialVersionUID = 1L; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
         return l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long l1 = l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
64; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long l = l << 32; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 return 1L; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long l = l << 1; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
static long serialVersionUID = 1L; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  }; }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  //Z; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 int i;; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 UTC; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
   } ; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  }  ; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  return l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long x = l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 }); }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
} ; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  ; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 return 0xFFFFFFFFL; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 assert l >= 0L; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
++l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 return new ZipLong() }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 overflow; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 int index = 0; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 this.l = l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long t<mask1> }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 assert l >= 0; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
     return l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 }  ; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 ; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
    return l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 64; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long l2 = l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 return l + 1; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
static long l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  ++l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 return l + 1L; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 return l + 2; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 final long l2 = l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  L; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 return Long.MIN_VALUE; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 int offset = 0; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 // CHECKSTYLE:OFF; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 return -1L; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  // long l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 int idx = 0; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 int i=0; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  } else; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 return l * 10; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 // CHECKSTYLE IGNORE LINE; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
long l2; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  return l<mask1> }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 <mask1>  }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  L; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long l = l >>> 31; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 return l<mask1>  }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long serialVersionUID = 1L; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 return l * 32; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 int i; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 return l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 int j = 0; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
long l = l >>> 32; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 final long l = l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long temp = l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 } } else {; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 return Long.SIZE; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 static long serialVersionUID = 0L; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long l = l<mask1> }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 int l = l >>> 32; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  } // }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  <mask1> }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 ull<mask1> }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long s = l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  return 0xFFFFFFFFL; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long t = l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  // return l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long n = l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long l2; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  } // }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 return l; } }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 int i = 0; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long l<mask1> }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
long l0 = l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long n = 0; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 final long l2; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 double d = 0; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 return l & 0xffffffffL; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 int l = 0; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long l = l % 32; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
long l=l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 int i; int j; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 String s = ""; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 static int serialVersionUID = 1L; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
long l = l >> 32; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 String s = l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 int m = 0; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 return l<mask1> } ; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long r = l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 return l<mask1> }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 int l = l >> 32; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long c = l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long l = l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  assert l >= 0L; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 return l << 1; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long l; long l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long l;; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 final long l0 = l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 int t = l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 assert l >= 0L; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long l2 = l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 throw new UnsupportedOperationException(); } }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
   }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long l0 = l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  return l << 32; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 final long l2; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final long l = l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long l = l * 2; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long l1 = l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long t = l<mask1> }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 assert l >= 0; }; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
static long serialVersionUID = 0L; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 final long serialVersionUID = 0L; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 return new ZipLong(); final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long l = l >>> 1; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
long l = l << 32; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long l = 0; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long t = l >> 32; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  return new ZipLong(); final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 final long l = 0; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
long l = l << 1; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 int l = l % 32; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long l0 = 0; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 int l = l << 1; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  // long l = 0; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  final long l2; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 return new ZipLong() ; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long l = l >>> 30; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 int n = l >> 32; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long l = l % 2; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  return l * 2; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  import static zip; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
  long l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long l32 = l; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
 long l = l >>> 56; final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long serialVersionUID = 1L;   TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long L_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long _  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long L  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long l  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long serialVersionUID=  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long N  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long serialVersionUID = 1L;  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long lib  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long MIN_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long #  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long MAX_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long DEFAULT_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long LONG_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long C  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long UNSIGNED_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long   TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long l_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long  _  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long U  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long C_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long TWO_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long T_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long X  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long serialVersionUID = -  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long 	  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long serialVersionUID_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long *  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long L=  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long BIG_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long xx  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long STACK_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long	  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long V_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long old  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long M  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long X_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long --  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long T  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long J  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long U_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long S  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long L;   TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long N_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long ^  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long //  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long V  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long TWO_TO_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long serialVersionUID = 2L;   TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long serialVersionUID = 0L;   TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long TIMESTAMP_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long ++  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long E  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long CURRENT_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long serialVersionUID = 1L; }  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long serialVersionUID=1L;  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long   TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long l=  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long E_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long SE  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long n  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long serialVersionUID;   TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long serialVersionUID = -1L;  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long serialVersionUID = -1;   TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long CHECK_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long BIT_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long HOUR_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long __  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long Z  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long B  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long x  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long D  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long I  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long R_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long -  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long n=  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long NATIVE_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long OLD_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long S_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long ~  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long serialVersionUID  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long v=  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long NS_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long long_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long $  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long O  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long serialVersionUID=1L;   TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long l^  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long A_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long serialVersionUID =  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long +  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long my  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long    TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long AS_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long ROOT_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long=  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long serialVersionUID = 1;   TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long K_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long.  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long IS_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long l;   TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long TINY_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long O_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long P  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long native  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long LEGACY_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long serialVersionUID = 1L ;   TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long TIME_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long BEGIN_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long z  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long UN  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long xx_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long Z_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long MIN  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long serialVersionUID = 1L;     TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long FILE_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long EPOCH_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long XXX_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long L*  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long ##  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long THIRTY_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long F  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long serialVersionUID = 0;   TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long [  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long long  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long P_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long <<  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long l*  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long UINT_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long MAX  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long CODE_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long serialVersionUID += 1L;   TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long serialVersionUID = 1L; //  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long lib32  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long R  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long K  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long D_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long JAVA_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long serialVersionUID = 2L;  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long tmp=  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long DE  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long old_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long M_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long LOG_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long x=  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long L.  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long tmp  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long SIZE_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long NOW_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long NT_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long serialVersionUID =   TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long ISO_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long JOINT_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long m  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long serialVersionUID = 1L;    TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long now=  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long BIT  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long G  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long TOT_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long >>>  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long EXTRA_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long NUM_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long xx=  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long VALID_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long TOTAL_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long _<mask1> long _  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long THREE_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long ESCAPE_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long FIRST_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long tmp;   TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long **  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long this_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long serialVersionUID = 0L;  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long lib64  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long n;   TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long JK_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long JDK_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long UNSAFE_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long WORLD_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long LOWER_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long OF_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long START_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long .  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long unix_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long A  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long BLOCK_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long UTC_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long MAGIC_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long		  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long GOLD_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long DECIMAL_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long DEBUG_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long DOUBLE_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long serialVersionUID = ~  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long serialVersionUID = 2;   TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long p  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long new  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long serialVersionUID = 2  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long G_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long JUST_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long (  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long AS  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long V=  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long serialVersionUID = (long)  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long temp;   TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long c  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long ...  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long IS  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long JAR_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long /*  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long v  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long s  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long tmp_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long unix  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long serialVersionUID = serialVersionUID;   TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long MARKER_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long !  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long i  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long LL  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long current_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long default  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long BASE_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long serialVersionUID = ++  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long serialVersionUID;  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long b  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long END_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long lib_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long &  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long L;  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long l-  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long POLL_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long LE_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long is  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long NAME_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long = -  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long LOT_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long PARENT_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long mask=  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long W  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long const  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long TOP_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long I_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long SHIFT_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long TILDE_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long LONG  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long STACK  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long LSHIFT_  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long Big  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final  long serialVersionUID = 31L;   TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  l = 0x100000000L; if (l >= TWO_TO_32) {   
final long  serialVersionUID = 0x100000000L; if (l >= TWO_TO_32) {   
final long  l2 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  z = 0x100000000L; if (l >= TWO_TO_32) {   
final long  L = 0x100000000L; if (l >= TWO_TO_32) {   
final long  x = 0x100000000L; if (l >= TWO_TO_32) {   
final long  TWO_TO_64 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  t = 0x100000000L; if (l >= TWO_TO_32) {   
final long  n = 0x100000000L; if (l >= TWO_TO_32) {   
final long  MAX = 0x100000000L; if (l >= TWO_TO_32) {   
final long  l<< = 0x100000000L; if (l >= TWO_TO_32) {   
final long  MIN = 0x100000000L; if (l >= TWO_TO_32) {   
final long  LONG = 0x100000000L; if (l >= TWO_TO_32) {   
final long  r = 0x100000000L; if (l >= TWO_TO_32) {   
final long  N = 0x100000000L; if (l >= TWO_TO_32) {   
final long  e = 0x100000000L; if (l >= TWO_TO_32) {   
final long  b = 0x100000000L; if (l >= TWO_TO_32) {   
final long  TWO_TO_16 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  X = 0x100000000L; if (l >= TWO_TO_32) {   
final long  f = 0x100000000L; if (l >= TWO_TO_32) {   
final long  l0 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  m = 0x100000000L; if (l >= TWO_TO_32) {   
final long  MAGIC = 0x100000000L; if (l >= TWO_TO_32) {   
final long  l32 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  _ = 0x100000000L; if (l >= TWO_TO_32) {   
final long  SIZE = 0x100000000L; if (l >= TWO_TO_32) {   
final long  ZERO = 0x100000000L; if (l >= TWO_TO_32) {   
final long  s = 0x100000000L; if (l >= TWO_TO_32) {   
final long  c = 0x100000000L; if (l >= TWO_TO_32) {   
final long  tmp = 0x100000000L; if (l >= TWO_TO_32) {   
final long  2 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  ZONE = 0x100000000L; if (l >= TWO_TO_32) {   
final long  k = 0x100000000L; if (l >= TWO_TO_32) {   
final long  v = 0x100000000L; if (l >= TWO_TO_32) {   
final long  p = 0x100000000L; if (l >= TWO_TO_32) {   
final long  X5455 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  u = 0x100000000L; if (l >= TWO_TO_32) {   
final long  temp = 0x100000000L; if (l >= TWO_TO_32) {   
final long  SUFFIX = 0x100000000L; if (l >= TWO_TO_32) {   
final long  l64 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  2_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  d = 0x100000000L; if (l >= TWO_TO_32) {   
final long  DOUBLE = 0x100000000L; if (l >= TWO_TO_32) {   
final long  two = 0x100000000L; if (l >= TWO_TO_32) {   
final long  TWO_FROM_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  ONE = 0x100000000L; if (l >= TWO_TO_32) {   
final long  Z = 0x100000000L; if (l >= TWO_TO_32) {   
final long  two_to_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  j = 0x100000000L; if (l >= TWO_TO_32) {   
final long  l1 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  o = 0x100000000L; if (l >= TWO_TO_32) {   
final long   l = 0x100000000L; if (l >= TWO_TO_32) {   
final long  y = 0x100000000L; if (l >= TWO_TO_32) {   
final long  a = 0x100000000L; if (l >= TWO_TO_32) {   
final long  >>> = 0x100000000L; if (l >= TWO_TO_32) {   
final long  DELTA = 0x100000000L; if (l >= TWO_TO_32) {   
final long  TIMESTAMP = 0x100000000L; if (l >= TWO_TO_32) {   
final long  ZIP = 0x100000000L; if (l >= TWO_TO_32) {   
final long  TWOTO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  l<<32 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  ZIP_LONG = 0x100000000L; if (l >= TWO_TO_32) {   
final long  ENTER = 0x100000000L; if (l >= TWO_TO_32) {   
final long  ZONE_BITS = 0x100000000L; if (l >= TWO_TO_32) {   
final long  len = 0x100000000L; if (l >= TWO_TO_32) {   
final long  ZONE_OFFSET = 0x100000000L; if (l >= TWO_TO_32) {   
final long [] l = 0x100000000L; if (l >= TWO_TO_32) {   
final long  h = 0x100000000L; if (l >= TWO_TO_32) {   
final long  now = 0x100000000L; if (l >= TWO_TO_32) {   
final long  TIME_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  XP = 0x100000000L; if (l >= TWO_TO_32) {   
final long  UNSIGNED = 0x100000000L; if (l >= TWO_TO_32) {   
final long  TIME = 0x100000000L; if (l >= TWO_TO_32) {   
final long  OLD = 0x100000000L; if (l >= TWO_TO_32) {   
final long  MAX_LONG = 0x100000000L; if (l >= TWO_TO_32) {   
final long  i = 0x100000000L; if (l >= TWO_TO_32) {   
final long  TWO_TO_8 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  TWO_TO_31 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  EMPTY = 0x100000000L; if (l >= TWO_TO_32) {   
final long  PE = 0x100000000L; if (l >= TWO_TO_32) {   
final long  serialVersionUID	 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  T = 0x100000000L; if (l >= TWO_TO_32) {   
final long  lvalue = 0x100000000L; if (l >= TWO_TO_32) {   
final long  l& = 0x100000000L; if (l >= TWO_TO_32) {   
final long  UINT32 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  POWER = 0x100000000L; if (l >= TWO_TO_32) {   
final long  l16 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  MASK = 0x100000000L; if (l >= TWO_TO_32) {   
final long  l >>> = 0x100000000L; if (l >= TWO_TO_32) {   
final long  l_ = 0x100000000L; if (l >= TWO_TO_32) {   
final long  VL = 0x100000000L; if (l >= TWO_TO_32) {   
final long  0 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  BIG = 0x100000000L; if (l >= TWO_TO_32) {   
final long  BIG_INT = 0x100000000L; if (l >= TWO_TO_32) {   
final long  el = 0x100000000L; if (l >= TWO_TO_32) {   
final long  NT = 0x100000000L; if (l >= TWO_TO_32) {   
final long  _l = 0x100000000L; if (l >= TWO_TO_32) {   
final long  E = 0x100000000L; if (l >= TWO_TO_32) {   
final long  CRC = 0x100000000L; if (l >= TWO_TO_32) {   
final long  xx = 0x100000000L; if (l >= TWO_TO_32) {   
final long  ONE_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  PID = 0x100000000L; if (l >= TWO_TO_32) {   
final long  EPOCH = 0x100000000L; if (l >= TWO_TO_32) {   
final long  MIN_VALUE = 0x100000000L; if (l >= TWO_TO_32) {   
final long  zipLong = 0x100000000L; if (l >= TWO_TO_32) {   
final long  BITMASK = 0x100000000L; if (l >= TWO_TO_32) {   
final long  CRC32 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  l4 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  TWO_To_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  LONG_MASK = 0x100000000L; if (l >= TWO_TO_32) {   
final long  one = 0x100000000L; if (l >= TWO_TO_32) {   
final long  time = 0x100000000L; if (l >= TWO_TO_32) {   
final long  result = 0x100000000L; if (l >= TWO_TO_32) {   
final long  zip = 0x100000000L; if (l >= TWO_TO_32) {   
final long  1 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  32 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  TWO_TO_INT = 0x100000000L; if (l >= TWO_TO_32) {   
final long  BIG_INTEGER = 0x100000000L; if (l >= TWO_TO_32) {   
final long  SECONDS = 0x100000000L; if (l >= TWO_TO_32) {   
final long  >>>32 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  l>> = 0x100000000L; if (l >= TWO_TO_32) {   
final long  C = 0x100000000L; if (l >= TWO_TO_32) {   
final long  HH = 0x100000000L; if (l >= TWO_TO_32) {   
final long  xl = 0x100000000L; if (l >= TWO_TO_32) {   
final long  TWO_TO_2 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  mask = 0x100000000L; if (l >= TWO_TO_32) {   
final long  ulong = 0x100000000L; if (l >= TWO_TO_32) {   
final long  l>>> = 0x100000000L; if (l >= TWO_TO_32) {   
final long  MACHINE = 0x100000000L; if (l >= TWO_TO_32) {   
final long  old = 0x100000000L; if (l >= TWO_TO_32) {   
final long  U = 0x100000000L; if (l >= TWO_TO_32) {   
final long  UNSIGNED_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  LEN = 0x100000000L; if (l >= TWO_TO_32) {   
final long  littleEndian = 0x100000000L; if (l >= TWO_TO_32) {   
final long  MIN_L = 0x100000000L; if (l >= TWO_TO_32) {   
final long  TWO_TO_LONG = 0x100000000L; if (l >= TWO_TO_32) {   
final long  BIT = 0x100000000L; if (l >= TWO_TO_32) {   
final long  xs = 0x100000000L; if (l >= TWO_TO_32) {   
final long  LIST = 0x100000000L; if (l >= TWO_TO_32) {   
final long  SLICE = 0x100000000L; if (l >= TWO_TO_32) {   
final long  64 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  TWO_TO_48 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  INF = 0x100000000L; if (l >= TWO_TO_32) {   
final long  MINUS = 0x100000000L; if (l >= TWO_TO_32) {   
final long  little = 0x100000000L; if (l >= TWO_TO_32) {   
final long  DELIM = 0x100000000L; if (l >= TWO_TO_32) {   
final long  ZIPLONG = 0x100000000L; if (l >= TWO_TO_32) {   
final long  TWO_TO_24 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  UTC = 0x100000000L; if (l >= TWO_TO_32) {   
final long  VAL = 0x100000000L; if (l >= TWO_TO_32) {   
final long  xxx = 0x100000000L; if (l >= TWO_TO_32) {   
final long  COUNTER = 0x100000000L; if (l >= TWO_TO_32) {   
final long  BITS = 0x100000000L; if (l >= TWO_TO_32) {   
final long  MAX_VALUE = 0x100000000L; if (l >= TWO_TO_32) {   
final long  NUM_BITS = 0x100000000L; if (l >= TWO_TO_32) {   
final long  mz = 0x100000000L; if (l >= TWO_TO_32) {   
final long  LONG_BITS = 0x100000000L; if (l >= TWO_TO_32) {   
final long  l^ = 0x100000000L; if (l >= TWO_TO_32) {   
final long  sum = 0x100000000L; if (l >= TWO_TO_32) {   
final long  SPACE = 0x100000000L; if (l >= TWO_TO_32) {   
final long  bits = 0x100000000L; if (l >= TWO_TO_32) {   
final long  SZ = 0x100000000L; if (l >= TWO_TO_32) {   
final long  TWO_TO_4 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  l^2 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  STACK = 0x100000000L; if (l >= TWO_TO_32) {   
final long  num = 0x100000000L; if (l >= TWO_TO_32) {   
final long  ID = 0x100000000L; if (l >= TWO_TO_32) {   
final long  z2 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  length = 0x100000000L; if (l >= TWO_TO_32) {   
final long  A = 0x100000000L; if (l >= TWO_TO_32) {   
final long  AD = 0x100000000L; if (l >= TWO_TO_32) {   
final long  SEED = 0x100000000L; if (l >= TWO_TO_32) {   
final long  	 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  R = 0x100000000L; if (l >= TWO_TO_32) {   
final long  MIN_LONG = 0x100000000L; if (l >= TWO_TO_32) {   
final long  lp = 0x100000000L; if (l >= TWO_TO_32) {   
final long  unix = 0x100000000L; if (l >= TWO_TO_32) {   
final long  CODE = 0x100000000L; if (l >= TWO_TO_32) {   
final long  long2 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  -- = 0x100000000L; if (l >= TWO_TO_32) {   
final long  zero = 0x100000000L; if (l >= TWO_TO_32) {   
final long  value = 0x100000000L; if (l >= TWO_TO_32) {   
final long  IL = 0x100000000L; if (l >= TWO_TO_32) {   
final long  [] = 0x100000000L; if (l >= TWO_TO_32) {   
final long  BIGINT = 0x100000000L; if (l >= TWO_TO_32) {   
final long  P = 0x100000000L; if (l >= TWO_TO_32) {   
final long  MAX32 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  first = 0x100000000L; if (l >= TWO_TO_32) {   
final long  LZF = 0x100000000L; if (l >= TWO_TO_32) {   
final long  SECOND = 0x100000000L; if (l >= TWO_TO_32) {   
final long  BINARY = 0x100000000L; if (l >= TWO_TO_32) {   
final long  MAX_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  OFFSET = 0x100000000L; if (l >= TWO_TO_32) {   
final long  THREE_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  that = 0x100000000L; if (l >= TWO_TO_32) {   
final long  l>>32 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  HOUR = 0x100000000L; if (l >= TWO_TO_32) {   
final long  MS = 0x100000000L; if (l >= TWO_TO_32) {   
final long  <<32 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  half = 0x100000000L; if (l >= TWO_TO_32) {   
final long  MIN_TIMESTAMP = 0x100000000L; if (l >= TWO_TO_32) {   
final long  ENTERPRISE = 0x100000000L; if (l >= TWO_TO_32) {   
final long  NIL = 0x100000000L; if (l >= TWO_TO_32) {   
final long  real = 0x100000000L; if (l >= TWO_TO_32) {   
final long  oldValue = 0x100000000L; if (l >= TWO_TO_32) {   
final long  serialVersionUIDVersionUID = 0x100000000L; if (l >= TWO_TO_32) {   
final long  delta = 0x100000000L; if (l >= TWO_TO_32) {   
final long  l+ = 0x100000000L; if (l >= TWO_TO_32) {   
final long  w = 0x100000000L; if (l >= TWO_TO_32) {   
final long  LD = 0x100000000L; if (l >= TWO_TO_32) {   
final long  compressed = 0x100000000L; if (l >= TWO_TO_32) {   
final long  diff = 0x100000000L; if (l >= TWO_TO_32) {   
final long  ul = 0x100000000L; if (l >= TWO_TO_32) {   
final long  42 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  CHECK = 0x100000000L; if (l >= TWO_TO_32) {   
final long  timestamp = 0x100000000L; if (l >= TWO_TO_32) {   
final long  MAX_BITS = 0x100000000L; if (l >= TWO_TO_32) {   
final long  32767 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  NC = 0x100000000L; if (l >= TWO_TO_32) {   
final long  M = 0x100000000L; if (l >= TWO_TO_32) {   
final long  8 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  bytes = 0x100000000L; if (l >= TWO_TO_32) {   
final long  OFF = 0x100000000L; if (l >= TWO_TO_32) {   
final long  INFINITY = 0x100000000L; if (l >= TWO_TO_32) {   
final long  ZERO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  ENTERSHIFT = 0x100000000L; if (l >= TWO_TO_32) {   
final long  DEFLATED = 0x100000000L; if (l >= TWO_TO_32) {   
final long  DEGT = 0x100000000L; if (l >= TWO_TO_32) {   
final long  TWO_TO_ 32 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  MILLI = 0x100000000L; if (l >= TWO_TO_32) {   
final long  LEGACY = 0x100000000L; if (l >= TWO_TO_32) {   
final long  l^32 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  l; = 0x100000000L; if (l >= TWO_TO_32) {   
final long  l  = 0x100000000L; if (l >= TWO_TO_32) {   
final long  KELVIN = 0x100000000L; if (l >= TWO_TO_32) {   
final long  long_ = 0x100000000L; if (l >= TWO_TO_32) {   
final long  << 32 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  NUM_BYTES = 0x100000000L; if (l >= TWO_TO_32) {   
final long  X_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  TWOTO32 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  ZONE_NUMBER = 0x100000000L; if (l >= TWO_TO_32) {   
final long  9999999999999999 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  BIG_L = 0x100000000L; if (l >= TWO_TO_32) {   
final long  z; z = 0x100000000L; if (l >= TWO_TO_32) {   
final long  ZE = 0x100000000L; if (l >= TWO_TO_32) {   
final long  Z2 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  twoToZipLong = 0x100000000L; if (l >= TWO_TO_32) {   
final long  twoTo32 = 0x100000000L; if (l >= TWO_TO_32) {   
final long  serialVersionUID  = 0x100000000L; if (l >= TWO_TO_32) {   
final long  l<<16 = 0x100000000L; if (l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if ( l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (long l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (L >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (x >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (t >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (n >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (lval >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (r >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (c >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (t<mask1>l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (e >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l+1 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l>>32 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (u >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if ( l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (i >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l  >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l<mask1>l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (ll >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l  >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (0 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (this.l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l& >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (s >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (2*l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l+32 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (longValue(l) >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (v >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (b >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l-1 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (d >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l+2 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (p >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (0x100000000L >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (1L >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (t<mask1>t >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l-2 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l-l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (Long.SIZE >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (long) l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (AST#binary_expression#Leftl >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (m >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l not >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (longl >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (ld >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l. >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (z >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (long_ >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (long >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (h >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l<mask2>l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l	 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l*2 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (k >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (time >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l*32 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (lg >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (o >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (System.currentTimeMillis() >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l<<32 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l-- >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l++ >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (longValue() >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (long)l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (abs(l) >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (a >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (lkey >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (longL >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (1 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (max(l) >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (64*l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (ls >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (f<mask1>l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l+l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l- >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (LONG >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (ls.length >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (now() >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (long. >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l+8 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (e<mask1>l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (1<<l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (lL >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (ldata >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l2 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (b<mask1>l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (lB >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (z<mask1>l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (result >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (0l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (a+b >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (nValue >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (0xFFFFFFFFL >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l+4 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (--l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (lon >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (val >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (lp >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (np >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (lf >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l+1L >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (doublel >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (  l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (lv >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (1+l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (lV >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (long(l) >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (seconds >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (value >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l     >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (0L >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (ls<mask1>l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l-32 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (f >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (x64 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (int(l) >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (u. >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (long.l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (jl >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l+16 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (x>>32 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (j >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (long1 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l<= >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l+31 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (li >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (32-l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l< >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (lE >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (lsb >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l+20 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (longValue >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (2 * l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (c<mask1>l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (data.length >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (0<mask1>l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (s<mask1>l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (a<mask1>l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l> >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (lg(l) >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (timestamp >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (0x100000000 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (y >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (64 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l+7 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (n<mask1>l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l ! >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (16*l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (	l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (x<mask1>l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (this.value >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (lli >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (len(l) >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (tz >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (el >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (1L<<l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (e+l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (id >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (0xffffffffL >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (Long.bitCount >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (left >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (u.l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (real(l) >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (8*l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (a+l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (lX >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (t>>32 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (t. >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l && l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (d<mask1>l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (LONG_SIZE >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (32 - l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (long0 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (not l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (oldl >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (... >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (int32l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (m<mask1>l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (ultraLong >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (!l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (256*l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l&1L >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (^l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l   >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (_ >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (ul(l) >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (cl >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (timeL >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (64-l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (ls<mask1>ls >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (LONG_BITS >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (lsa >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l>>24 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l<0) >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l&1 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (1<mask1>l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (given l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l%2 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (this.longValue() >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (size() >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (t<mask2>l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (32*l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (z>>32 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (parseInt(l) >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (lcp >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (xFFFFFFFFL >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (Double.longBits >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (0>l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (lR >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (ultra >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l*8 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l-65536 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (0x80000000 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l+64 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (t.bitLength() >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l^2 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (length(l) >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (Long. >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l>>16 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (v<mask1>l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l & 1L >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (longBits >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (long) >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (2^l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (2**l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (t+l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (long  >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (x>>>32 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (n+l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (lt(l) >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (b2 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (lv<mask1>l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (lower(l) >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l/2 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (time-l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l-32768 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l<0 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l<mask3> } >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (long)(l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l & 1 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l+5 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l - 2 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l+256 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (return l; } >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l+32767 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l%32 >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (t.length() >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l>32) >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l|0) >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  two_to_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2^32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_to_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_2_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  TWO_TO_16) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_To_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  TWO_TO_64) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2 ** 32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  TWO_To_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  twoTo32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2 << 32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_32L) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  two32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2**32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2*32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  SECONDS) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2 * 32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_FROM_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_64) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_L) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_2) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2<<32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2^32 - 1) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2L) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_5L) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2000) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_55) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_5) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_048) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_32_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  0) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  20) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  232) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_04800000L) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  TWO_TO_31) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2 ** 31) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_PWR_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_64L) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  22) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  0xFFFFFFFFL) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_5_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  262144) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_X) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_32_MAX) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  0x100000000L) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_32^32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_048L) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_100) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  1L) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  252) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  16777216) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  Two_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_48) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_<<32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_32_BITS) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_40000000) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_32_000) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2X) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  two_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  DOUBLE) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  42) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  twoToZipLong) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  32767) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_52) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  1) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  NANO) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_64_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  52) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  10000) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  TWO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_256) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  TWO_FROM_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  4) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2^32-1) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  TWO_TO_2) {   
final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_324L) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  256) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  TWO_TO_8) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  1 << 32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  two32bits) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2 << 31) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_INT) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_33) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  1048576L) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_35) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_000000L) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_2^32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  16777215) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_0L) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2097152) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  two_bits) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2 << 30) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2 ^ 32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  TWO_to_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  TWO_TO_ 32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  two_2_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_000000) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_32_MIN) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_58) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_48576L) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  8) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  251) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  21) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  NANO_BITS) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2^31) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  LONG_SIZE) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  32767L) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_32_64) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_256_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  1000000000) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  32767) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_32 * 32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_55L) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  16777215L) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_0) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_34) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  two52) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  TWO_TO_30) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_1) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  NANOS) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  TWO_TO32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_31) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_32F) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  8000000000000000L) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  SEED) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_BITS) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_000L) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  two2) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  LONG) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  two_to32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  SECOND) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2X_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  0xffffffffL) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_8) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_0105L) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_128) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  32L) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  28) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  56) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_000_000) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_40) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  twoTo32L) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_MIN) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_TO_64) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  3) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_100L) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_8_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  this) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_32*32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_000000000000000L) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  LONG_MAX) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  LONG_BITS) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_TO_16) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_ToUInt32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  secondToZipLong) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  1024) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  32 << 32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2I) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_256L) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2 + 32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_4_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_4) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_16) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  258) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  1<<32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  SECONDS_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  10) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_45) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2 * 2) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  10000L) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  20000000L) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  unixTimeToZipLong) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  OCTOBER) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  TWO_2_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2AST#binary_expression#Right) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_16_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_1_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_04800000) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_5455) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_100000000L) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_0000001L) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_2L) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  TWO_TO_24) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  1000000000L) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  TIME_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_DOUBLE) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_56) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  DOUBLE_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2*32*32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  1000) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  ONE_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_MINUS_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  LONG_MASK) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_102) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  second_to_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_X_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2 ** 32 - 1) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  TWO_TO_48) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  TIMESTAMP_SIZE) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  LONG_TO_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  30) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  SIZEOF_LONG) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_TO_31) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  223372036854775808) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  32*32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_048048) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  SIZE) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  TWO_TO_INT) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2**32 - 1) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  32 * 32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_32l) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_75L) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  Long.MAX_VALUE) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2*32L) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_0_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_32_L) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2 ) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_30) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_64_BITS) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_77) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2 ** 30) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_32_1) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  seconds) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_324) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_32C) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  TWO_TO_29) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_00000000_000) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_256_455) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  ULONG) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  two_To_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2X32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  TWO_TO_LONG) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_256_000) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  two_tos_32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_2_64) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  Long.SIZE) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  29) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  two_to_64) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  TWO_To32) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_32^31) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  64) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  31) {   
final long TWO_TO_32 = 0x100000000L; if (l >=  2_38) {   
if(TWO_TO_32==null){return  null; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return ; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong(l); };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong(); };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1> null; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong();};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;  };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return null; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  NULL;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return ;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; } };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong(l);};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return null;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return };;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; } };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; } else;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;<mask1>;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return l; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l<mask1> null; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong(0); };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  0; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; } ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;<mask1>};;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l<mask1> l; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;<mask1>};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; } ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1>};;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;} };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;<mask1>}; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;} };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return ;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; }<mask1>;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return null;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1> null;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong(l);;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;} else;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;   };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  NULL; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  Long.NaN; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  false; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  0L; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1>;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1>}; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1> l; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong();;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;<mask1> null; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l<mask1>};;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; } else { return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1> null;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;} };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong(0);};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l; } };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  0l; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1>; } ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  0;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong();<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;<mask1>;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  -1; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  this; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong(l);};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l<mask1>}; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong<mask1>;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong(-l); };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;<mask1>;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1>;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;<mask1> null;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  0<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1>};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;}; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; } else {return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return null<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l;  };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  Long.MAX_VALUE; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  NaN;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; }; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;}};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  NaN; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  Double.NaN; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1> new ZipLong(); };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;} else {return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;} ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l<mask1>};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return null;<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l<mask1> null;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;} ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; }  ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;<mask1> null;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong();} };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1> null;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  this;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong(0);;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return null;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return ;<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1> null;} };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return }; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  Long.NaN<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l<mask1>; } ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  Long.NaN;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l<mask1>;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; }<mask1>};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return l<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong(); } };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l; } ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return null<mask1> null; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  super;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong<mask1>};;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong(-l);};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask2> null; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null ;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return null;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong() ;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; }  ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return new ZipLong(l); };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1> new ZipLong();};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong() };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1>;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return null};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1>; } };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;<mask1>;  };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l;<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  EMPTY;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask3>};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; }  ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l<mask1>;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; } L;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l<mask1> null;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1>;} ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null};;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong();  };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; }<mask3> };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong();} };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  z; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  0<mask1> null; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return ; } ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null}; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; } else { return null;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;  } ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  0<mask1> 0; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1> 0; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  NAN;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  zipLong; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong();} else;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;<mask3>};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l; } };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; }else;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  Long.MIN_VALUE; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l<mask1> l;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;} return new ZipLong;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null ;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return l;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;}else;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;} return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; }   ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  Double.NaN;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  0L;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l<mask1>; } };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  2; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return new ZipLong(); };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; }  };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1>; } ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  nil; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l<mask1> 0; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; } else {return null;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; } return l;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return new ZipLong();};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong(-l);};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; }<mask1>};;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; } long l;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return NULL;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; }   ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; } Unix timestamp;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return ; } };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; //};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l; } else;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l<mask1>l; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  -1L; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return 0; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;<mask3> };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l}; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong();<mask1>;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return ;  };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null ; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong(); } };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;} else { return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong();<mask1>};;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;};;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  EMPTY_ZIP_LONG; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  0l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;AST#then#Right;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; }<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  NAN; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l<mask1> new ZipLong(); };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong();<mask1>}; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return new ZipLong(l);};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return l;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; } Unix Timestamp;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  false;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  };;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;<mask1> l; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; } return new ZipLong;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; } return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  0;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong(0L);;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong(-l);;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;<mask2> null; } };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l; } else { return null;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  nil;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong(null); };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l; } else { return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  "";};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  {};;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong<mask1>; } };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;} else{return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l};;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return [];};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  -1;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;}};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  Null;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return [];;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  ZERO;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return NaN;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  undefined;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  NIL;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  Double;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  2;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  ;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return 0;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  UTIL;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  NOP;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  Nil;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xFFFFFFFFL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0x100000000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=Long.MAX_VALUE; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xffffffffL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=unixTimeToZipLong; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=Long.MIN_VALUE; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=1L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>l; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=2; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=null; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>0xFFFFFFFFL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<<32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=1; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=Long.SIZE; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xFFFFL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l>>32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=UnixTimeToZipLong; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>0xffffffffL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xFFFFFFFFL<mask1>l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0<mask1>0xFFFFFFFFL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xffffL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>2; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0<mask1>0; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=Integer.MAX_VALUE; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>0; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l>>>32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=true; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>2; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xFFFFFFFFL; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l; } }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=2147483647L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0<mask1>0; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=2L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xFFFFFFFFL<mask1>0; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0<mask1>0xffffffffL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>0; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=Double.MAX_VALUE; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=2000; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l}; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>32; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=32<mask1>32; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0x80000000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=false; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l%32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=64; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l^2; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l & 0xFFFFFFFFL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<<1; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0<mask1>l; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=65536L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=16384L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=Long; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=2147483648L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=unixToZipLong; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0x10000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l&0xFFFFFFFFL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0<mask1>l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xFFFFFFFFl; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xFFFFFFFF L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=32768; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=Integer.MIN_VALUE; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=1024L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xFFFFFFFFL<mask1>2; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0x00000000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>1L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=32768L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=64L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>l<<32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32= Long.MAX_VALUE; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=2000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l+1L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=256<mask1>256; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l << 32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xff; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=1000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xFFFFFFFFFFFFFFFFL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=32<mask1>l; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=4; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=32767L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=32; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=32<mask1>0xFFFFFFFFL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=1l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32= 0xFFFFFFFFL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=Math.max; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=1L<mask1>1L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l >>> 32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=unixTimeToUnixLong; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xffffffffL; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=int32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l%2; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l >> 32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<<1L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=10000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0x100000000; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0x1000000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=Double; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>Long.SIZE; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xffff; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32= 2147483647L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>l>>>32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=8L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<<32<mask1>l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>1; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0X100000000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=unixTimeToZipLong(); } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=xFFFFFFFFL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=Double.MIN_VALUE; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=1024; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0; } }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0<mask1>2; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xFFFF; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32= l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0x100000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xffffffffL<mask1>l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0<mask1>2; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l+1; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=32<mask1>0; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l+32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=32<mask1>0; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l & 0xffffffffL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>l>>32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=32<mask1>32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=LONG; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0<mask1>1L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l; return null; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l % 32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=2<mask1>2; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=2<mask1>2; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=16777215L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=2^32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0AST#assignment_expression#Right; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=32<mask1>l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xffffffL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l2; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=32<mask1>0xffffffffL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l*2; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=256<mask1>256; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0AST#variable_declarator#Right; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=8; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=2; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask2>l; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32= 0x100000000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=32L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=Double.longBitsToDouble; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>l}; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l+2; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>Long; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>l;}; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=long; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=new Long() }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=100000000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=UnixToZipLong; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>l}; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>256; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=Infinity; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xFFFFFFFFL<mask1>1; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=4L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l; return 2; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>null; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=NULL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=32<mask1>2; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=Double.NEGATIVE_INFINITY; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=null; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=3; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32= unixTimeToZipLong; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xffffffff L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xffL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>1; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xFFFFFFFFL  }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l^32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=lAST#assignment_expression#Right; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=256L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l + 1L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0<mask1>32; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=InfinityL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>l;}; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0x100000000 L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=100000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=INF; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=nullL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<<31; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=10; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xFFL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>2^32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>l<<1; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=unixToLong; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32= Long.MIN_VALUE; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>0x100000000; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=2<mask1>0xFFFFFFFFL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32= 0xffffffffL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=1048576L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xffffffffL<mask1>0; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xFFFFFFFFL<mask1>32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=parseInt(l); }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0; } return l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<<32<mask1>0; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l&0xffffffffL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l;  }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>l >>> 32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=new ZipLong(); } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xFFFFFFFFFFFFL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l>>>32<mask1>0; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=20; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0<mask2>0xFFFFFFFFL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=1000; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l*2^32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0<mask1>0x100000000; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0L<mask1>0L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=30; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=1L<mask1>2L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=16; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>2147483647L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=new ZipLong(); }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=256; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=9223372036854775808; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=java.lang.Long; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>l << 32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xFFFFFFFFL<mask1> l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xffffffffL<mask1>2; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<<32<mask1>2; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>l};; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32= 0; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<<32L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=new ZipLong() }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=10000; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=UTC; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l >>> 32; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=1970; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0; return l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>l+1; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=16777216L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>2147483648L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l; return l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l>>32<mask1>0; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l%32; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32={}; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=new Long<mask1>new Long; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>Long.MAX; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>l*2; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l>>>32<mask1>2; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null<mask1> null; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else { return l; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else { return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null<mask1>;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else { return new ZipLong<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return unixTimeToZipLong;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return unixTimeToZipLong<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return unixTimeToZipLong<mask1>;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return new ZipLong<mask1>;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null<mask1>};;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null<mask1> null;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else {return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return l;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return new ZipLong<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else { return l<mask1>; } };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return l; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null<mask1>;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null<mask1>; } };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return new ZipLong();;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else {return l; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return l<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return unixTimeToZipLong();;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else{return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return unixTimeToZipLong;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return unixTimeToZipLong(l);;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;<mask1>};;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return new ZipLong();} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return new ZipLong() {;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null<mask1> null;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null<mask1>};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return l<mask1>;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} return new ZipLong<mask1>;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} else {return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} return l; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else { return l<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null<mask1>;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else {return new ZipLong<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null<mask1> null; } };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} else { return l; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return new ZipLong(l);;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return l<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} return new ZipLong(l);;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null<mask1>}; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;<mask1> null; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return null<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  l; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return unixTimeToZipLong(l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else{ return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return l; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return unixTimeToZipLong<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;<mask1>;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return ; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} else {return l; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} return unixTimeToZipLong;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} else{return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} return unixTimeToZipLong<mask1>;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} return unixTimeToZipLong<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return null; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} else { return new ZipLong<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;<mask1>}; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return new ZipLong() {};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;  };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} else { return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;<mask1>};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;<mask1>;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return unixToLong(l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else {return l<mask1>; } };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null<mask1> null;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } long l;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } L;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else{ return l; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  new ZipLong(); };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} return l; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return null<mask1>;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else { return unixTimeToZipLong;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } long l = l;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} return l<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return unixToZipLong<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  NULL;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else { return new ZipLong<mask1>};;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} return new ZipLong(l);;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else{return l; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return new ZipLong(l);;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return unixTimeToZipLong();} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return new ZipLong<mask1>};;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} return unixTimeToZipLong(l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else { return l<mask1> };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return unixToZipLong;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; }  return unixTimeToZipLong;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else{ return new ZipLong<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} return new ZipLong();;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return null<mask1> null; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else { return l; } };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} return l<mask1>;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null<mask1> l; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;}; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return unixTimeToZipLong;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return unixToLong(l);;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return l; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null<mask3> };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else { return l<mask1>};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} else{return l; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} else {return new ZipLong<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return new ZipLong(l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } final long l;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return l;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;<mask1>; } };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} return l<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else { return Long.valueOf(l);;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else {return l<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return new ZipLong<mask1>();;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } Long.parseLong(l);;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else{return new ZipLong<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  l<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else { return l<mask1>};;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return new ZipLong<mask1>;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else { return new ZipLong<mask1>}; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} return new ZipLong<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; }  ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; }; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; }else{return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return unixToZipLong<mask1>;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} return l; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null<mask1> null; } ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;<mask1>; } ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} return unixTimeToZipLong(l);;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} return l;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return null;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return unixTimeToZipLong(l);} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return null<mask1>};;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return null;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} return unixTimeToZipLong();;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} return unixTimeToZipLong;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} return new ZipLong();} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null<mask1>null; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} return new ZipLong(l);;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else { return l<mask1>}; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return new ZipLong() {};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return l<mask1>};;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; }<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else { return l * 2;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } ZipLong zip = new ZipLong();;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return unixTimeToZipLong;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return UnixTimeToZipLong;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; }  };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null<mask2> null; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;}};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  l<mask1> null; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  new ZipLong();};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null<mask1> 0;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } <mask1>};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; }return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null<mask3>};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null<mask1> null;} };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} return unixTimeToZipLong(l);;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else { return unixToLong(l);;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; }  return unixTimeToZipLong<mask1>;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return unixToLong(l);} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; }<mask1>;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} else {return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null<mask1> null};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } <mask1>;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return new ZipLong();} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return ; } return new ZipLong(l);;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} return new ZipLong() {;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } <mask1> };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} return unixTimeToZipLong<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;}return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else { return l;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;   };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } zipLong(l);;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return l; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;<mask3> };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return zipLong(l);;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null<mask1> null; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return unixTimeToZipLong<mask1>;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;}else{return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else {return l<mask1>};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null}; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} return new ZipLong<mask1>;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return null<mask1> null;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  new ZipLong(null); };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else { return new ZipLong<mask1>(); };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null<mask1>;  };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else { return l<mask1>;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; }   ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } final long l = l<mask1>;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return unixTimeToZipLong(l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} else {return l<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null<mask1> l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} else { return l<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} else { return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else { return new ZipLong<mask1> };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else { return new ZipLong<mask1>};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;<mask2> null; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} else{return new ZipLong<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return new ZipLong(l<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return new ZipLong(l<mask1>};;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  new ZipLong(0); };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} else { return l<mask1>; } };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;} return unixTimeToZipLong<mask1>;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return l.longValue();;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null<mask1>; } ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; }else{ return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else return l<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else {return l;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; }  ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return unixTimeToZipLong(l);;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; }  return unixTimeToZipLong;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null<mask1>;} };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return new ZipLong();;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } try;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return unixTimeToZipLong<mask1>};;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else {return l<mask1>};;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null<mask1> new ZipLong(); };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } <mask3> };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } Longs;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } else { return l + 1;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;}l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null<mask1> new ZipLong(null); };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return new ZipLong(l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null;<mask1>;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){return  null; } return new ZipLong<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>0; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=Long.MIN_VALUE; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0; } return l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=Long.NaN; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>0L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>0; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=Long.MAX_VALUE; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=null; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0xFFFFFFFFL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=Double.NaN; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=1L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=1; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0x00000000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0x100000000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0x00; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0x00000000; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>0;}; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0xffffffffL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>0l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>1L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=Long.POSITIVE_INFINITY; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=NULL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=Long.NEGATIVE_INFINITY; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=Integer.MIN_VALUE; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=2147483647L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0x80000000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=null; } return l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l= 0; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0x0; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0AST#assignment_expression#Right }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0AST#variable_declarator#Right; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=""; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=2; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0d; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0AST#ternary_expression#Right; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=2147483648L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=BigInteger.ZERO; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0x0000; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0x10000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=Long.NULL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>null; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=Double.NEGATIVE_INFINITY; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0AST#assignment_expression#Right return null; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0; return null; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0x00L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=l0; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=2000; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=false; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>0xFFFFFFFF; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=Integer.MAX_VALUE; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=Long.ZERO; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0AST#assignment_expression#Right } return l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=INF; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l= 0L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1> 0; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=NAN; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>0xff; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=999999999L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>0AST#assignment_expression#Right; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0; } return null; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=64; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>0xffffffff; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l= -1; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>1; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=1l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0L<mask1>0; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0xff; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>2; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=10; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0x00000000FFFFFFFFL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=1970; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=Longs.NULL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>0x00000000; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=NaN; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1> 0; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0; } }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>2; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0xFFFFL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=nullL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0.0; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=l<<1; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0x10000; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0x000000; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>1; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0x00000000AST#assignment_expression#Right }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=Short.MIN_VALUE; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=true; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=initialValue; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0xffffL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>0AST#ternary_expression#Right; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=Infinity; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>0xffff; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0;} return l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0x0000000000000000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=100000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>32; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=1; } return l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l= Long.MIN_VALUE; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=Double.POSITIVE_INFINITY; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0; }return l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=Short.MAX_VALUE; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=lLong; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>l; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0X100000000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=null<mask1>0; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=-1; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0x100000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=1024; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=2147483647; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=10000; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0x7fffffffL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l= -1L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=20; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask3>};; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=32768; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>2147483647; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=defaultUnixTimeToZipLong; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=new ZipLong() }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=-1L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=1000; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0x7FFFFFFFL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=9999999999L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>Long.NaN; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=Float.NaN; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0xFFFFFFFFl; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0X80000000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=ZERO; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>2L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=Longs.ZERO; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=100000; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=100; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0x0F; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=NANOSECONDS; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0 L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0x00000000Z; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=64L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>0};; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0x7fffffff; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=10000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l= ""; } return l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0x10; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>2147483648; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>0;}; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=99; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>0AST#variable_declarator#Right; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>0 L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0x0000000000000000; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0x00000000 L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l= 0<mask1>0; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l= Long.NaN; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=1000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=}; return l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask2>0; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0x0FFFFFFFL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0; return null }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0x1000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=longDefault; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0;} return l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0x00000001L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l= Long.MAX_VALUE; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>0}; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1> -1; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>L; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask3> }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=NANO; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=Double; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=+1L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask2>0L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>0; };; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=2147483648; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=99999999L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0; return null;}; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=9; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=9999999999999999L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=Long.valueOf(""); } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>32768; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0x100; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l= 2147483647L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>0x00; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0long; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=POSITIVE; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=1000000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0x20; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=longlongNull; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0x10000000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=65536L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=Null; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0xffff; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=LONG_NULL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=Double.MIN_VALUE; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=l<<1L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=Long; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>2000; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=NULL_LONG; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=1970L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>0;; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>0L;}; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0x7FFFFFFF; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=00000000; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0; } return Long; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>NULL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=8; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=UTC; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0x100L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>0d; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=10000000; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0AST#assignment_expression#Right} return l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0xffL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=LONG; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>1970; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0xFFFFFFFFFFFFFFFFL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0xFFFFFFFF L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=999L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>new Long; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>0X; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>0xFFFF; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=l+1; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=10000000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=2L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=2147483648<mask1>0; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0} return l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=longValue(); } return l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=AST#unary_expression#Left-1AST#unary_expression#Right; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=String.valueOf(""); } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>0xFF; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=l<mask1>0; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=9223372036854775808L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=100000000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0L; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l= 0; } return l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0x0fffffffL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l= 0l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask3> };; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=UNDEFINED; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>Long.ZERO; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=l&0xFFFFFFFFL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=32<mask1>0; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=EMPTY; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0; } else; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0x00000000000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=9223372036854775808; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>0 ; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l==null){ l=0<mask1>0xffffffffL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return ; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong(l); };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong(); };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1> null; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong();};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;  };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return null; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  NULL;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return ;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; } };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong(l);};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return null;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return };;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; } };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; } else;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;<mask1>;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return l; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l<mask1> null; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong(0); };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  0; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; } ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;<mask1>};;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l<mask1> l; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;<mask1>};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; } ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1>};;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;} };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;<mask1>}; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;} };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return ;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; }<mask1>;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return null;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1> null;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong(l);;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;} else;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;   };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  NULL; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  Long.NaN; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  false; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  0L; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1>;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1>}; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1> l; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong();;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;<mask1> null; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l<mask1>};;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; } else { return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1> null;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;} };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong(0);};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l; } };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  0l; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1>; } ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  0;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong();<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;<mask1>;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  -1; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  this; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong(l);};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l<mask1>}; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong<mask1>;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong(-l); };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;<mask1>;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1>;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;<mask1> null;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  0<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1>};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;}; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; } else {return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return null<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l;  };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  Long.MAX_VALUE; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  NaN;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; }; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;}};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  NaN; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  Double.NaN; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1> new ZipLong(); };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;} else {return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;} ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l<mask1>};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return null;<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l<mask1> null;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;} ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; }  ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;<mask1> null;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong();} };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1> null;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  this;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong(0);;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return null;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return ;<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1> null;} };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return }; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  Long.NaN<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l<mask1>; } ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  Long.NaN;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l<mask1>;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; }<mask1>};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return l<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong(); } };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l; } ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return null<mask1> null; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  super;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong<mask1>};;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong(-l);};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask2> null; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null ;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return null;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong() ;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; }  ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return new ZipLong(l); };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1> new ZipLong();};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong() };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1>;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return null};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1>; } };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;<mask1>;  };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l;<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  EMPTY;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask3>};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; }  ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l<mask1>;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; } L;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l<mask1> null;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1>;} ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null};;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong();  };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; }<mask3> };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong();} };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  z; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  0<mask1> null; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return ; } ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null}; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; } else { return null;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;  } ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  0<mask1> 0; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1> 0; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  NAN;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  zipLong; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong();} else;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;<mask3>};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l; } };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; }else;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  Long.MIN_VALUE; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l<mask1> l;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;} return new ZipLong;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null ;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return l;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;}else;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;} return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; }   ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  Double.NaN;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  0L;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l<mask1>; } };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  2; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return new ZipLong(); };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; }  };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null<mask1>; } ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  nil; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l<mask1> 0; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; } else {return null;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; } return l;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return new ZipLong();};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong(-l);};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; }<mask1>};;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; } long l;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return NULL;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; }   ;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; } Unix timestamp;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return ; } };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; //};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l; } else;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l<mask1>l; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  -1L; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return 0; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;<mask3> };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l}; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong();<mask1>;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return ;  };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null ; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong(); } };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l;};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;} else { return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong();<mask1>};;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;};;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  EMPTY_ZIP_LONG; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  0l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;AST#then#Right;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; }<mask1>; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  NAN; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l<mask1> new ZipLong(); };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong();<mask1>}; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return new ZipLong(l);};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return l;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; } Unix Timestamp;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  false;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  };;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;<mask1> l; };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; } return new ZipLong;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null; } return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  0;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong(0L);;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong(-l);;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;<mask2> null; } };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l; } else { return null;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  nil;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong(null); };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l; } else { return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  "";};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  {};;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  new ZipLong<mask1>; } };} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;} else{return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  l};;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return [];};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  -1;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  null;}};} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  Null;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return [];;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  ZERO;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return NaN;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  undefined;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  NIL;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  Double;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  2;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  ;;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return 0;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  UTIL;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return l;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  NOP;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){return  Nil;} final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xFFFFFFFFL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0x100000000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=Long.MAX_VALUE; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xffffffffL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=unixTimeToZipLong; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=Long.MIN_VALUE; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=1L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>l; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=2; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=null; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>0xFFFFFFFFL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<<32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=1; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=Long.SIZE; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xFFFFL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l>>32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=UnixTimeToZipLong; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>0xffffffffL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xFFFFFFFFL<mask1>l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0<mask1>0xFFFFFFFFL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xffffL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>2; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0<mask1>0; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=Integer.MAX_VALUE; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>0; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l>>>32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=true; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>2; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xFFFFFFFFL; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l; } }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=2147483647L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0<mask1>0; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=2L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xFFFFFFFFL<mask1>0; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0<mask1>0xffffffffL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>0; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=Double.MAX_VALUE; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=2000; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l}; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>32; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=32<mask1>32; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0x80000000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=false; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l%32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=64; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l^2; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l & 0xFFFFFFFFL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<<1; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0<mask1>l; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=65536L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=16384L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=Long; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=2147483648L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=unixToZipLong; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0x10000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l&0xFFFFFFFFL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0<mask1>l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xFFFFFFFFl; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xFFFFFFFF L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=32768; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=Integer.MIN_VALUE; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=1024L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xFFFFFFFFL<mask1>2; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0x00000000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>1L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=32768L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=64L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>l<<32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32= Long.MAX_VALUE; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=2000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l+1L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=256<mask1>256; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l << 32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xff; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=1000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xFFFFFFFFFFFFFFFFL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=32<mask1>l; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=4; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=32767L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=32; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=32<mask1>0xFFFFFFFFL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=1l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32= 0xFFFFFFFFL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=Math.max; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=1L<mask1>1L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l >>> 32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=unixTimeToUnixLong; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xffffffffL; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=int32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l%2; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l >> 32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<<1L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=10000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0x100000000; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0x1000000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=Double; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>Long.SIZE; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xffff; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32= 2147483647L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>l>>>32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=8L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<<32<mask1>l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>1; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0X100000000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=unixTimeToZipLong(); } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=xFFFFFFFFL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=Double.MIN_VALUE; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=1024; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0; } }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0<mask1>2; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xFFFF; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32= l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0x100000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xffffffffL<mask1>l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0<mask1>2; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l+1; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=32<mask1>0; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l+32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=32<mask1>0; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l & 0xffffffffL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>l>>32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=32<mask1>32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=LONG; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0<mask1>1L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l; return null; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l % 32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=2<mask1>2; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=2<mask1>2; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=16777215L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=2^32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0AST#assignment_expression#Right; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=32<mask1>l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xffffffL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l2; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=32<mask1>0xffffffffL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l*2; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=256<mask1>256; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0AST#variable_declarator#Right; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=8; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=2; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask2>l; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32= 0x100000000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=32L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=Double.longBitsToDouble; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>l}; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l+2; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>Long; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>l;}; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=long; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=new Long() }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=100000000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=UnixToZipLong; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>l}; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>256; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=Infinity; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xFFFFFFFFL<mask1>1; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=4L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l; return 2; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>null; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=NULL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=32<mask1>2; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=Double.NEGATIVE_INFINITY; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=null; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=3; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32= unixTimeToZipLong; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xffffffff L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xffL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>1; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xFFFFFFFFL  }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l^32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=lAST#assignment_expression#Right; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=256L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l + 1L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0<mask1>32; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=InfinityL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>l;}; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0x100000000 L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=100000L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=INF; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=nullL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<<31; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=10; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xFFL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>2^32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>l<<1; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=unixToLong; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32= Long.MIN_VALUE; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>0x100000000; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=2<mask1>0xFFFFFFFFL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32= 0xffffffffL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=1048576L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xffffffffL<mask1>0; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xFFFFFFFFL<mask1>32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=parseInt(l); }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0; } return l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<<32<mask1>0; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l&0xffffffffL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l;  }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>l >>> 32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=new ZipLong(); } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xFFFFFFFFFFFFL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l>>>32<mask1>0; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=20; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0<mask2>0xFFFFFFFFL; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=1000; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l*2^32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0<mask1>0x100000000; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0L<mask1>0L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=30; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=1L<mask1>2L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=16; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>2147483647L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=new ZipLong(); }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=256; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=9223372036854775808; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=java.lang.Long; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>l << 32; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xFFFFFFFFL<mask1> l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0xffffffffL<mask1>2; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<<32<mask1>2; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>l};; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32= 0; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<<32L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=new ZipLong() }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=10000; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=UTC; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l >>> 32; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=1970; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=0; return l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>l+1; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=16777216L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>2147483648L; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l; return l; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l>>32<mask1>0; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l%32; }; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32={}; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=new Long<mask1>new Long; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>Long.MAX; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l<mask1>l*2; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(TWO_TO_32==null){ TWO_TO_32=l>>>32<mask1>2; } final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) {   
if(l < 0){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l<0){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 0L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(unixTimeToZipLong == null){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l >= TWO_TO_32){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 0x100000000L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l >= 0){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l == 0L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(true){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l == 0){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 0<mask1>l){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l > 0){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(unixToZipLong == null){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l<0L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l != 0){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l == 0<mask1>l){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(false){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(unixTimeToZipLong != null){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 1L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(DEBUG){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l <= 0xFFFFFFFFL){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l>=0){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l==0L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l <= 0){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l >= 0x100000000L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l==0){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(unixTimeToZipLong==null){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l > TWO_TO_32){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < TWO_TO_32){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l>0){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l<0x100000000L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if( l < 0){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 0x80000000L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(unixToZipLong != null){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l == -1){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 10){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l <= 0x100000000L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l<0<mask1>l){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 0<mask1>0){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(SAFE){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l == -1L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l==0<mask1>l){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(Windows){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l >= 0L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 2){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l!=0){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(false<mask1>true){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 1){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 0l){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l<=0){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l > 0xFFFFFFFFL){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l >= 2){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(WINDOWS){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 0xFFFFFFFFL){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(Double.isNaN(l)){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(null==l){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(null == l){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 10L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(unixToZipLong==null){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l instanceof ZipLong){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l <= 0L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l == 0l){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < -1L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l >= 1L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l == 0xFFFFFFFFL){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(NATIVE){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if( l >= TWO_TO_32){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l > 0x100000000L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l == Long.MIN_VALUE){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l<0l){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l <= 0<mask1>l){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 2L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l <= TWO_TO_32){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 0<mask3> }){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l != -1){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l<0<mask1>0){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(isNaN(l)){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(false<mask1>l < 0){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(unixTimeToZipLong!=null){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l >= 2000){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l > 0L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l >= 0xFFFFFFFFL){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l <= 0xffffffffL){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 0<mask1>2){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l<=0<mask1>l){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(false<mask1>false) {){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 32<mask1>l){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l==0l){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 0<mask1>false){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l == 0<mask1>false){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l == 0<mask1>0){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l<1L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(unixOverflow){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l >= 0<mask1>l){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l >= 2L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l != 0L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 1000000000){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l<=0L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(false<mask1>false){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 10000){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l > 0xffffffffL){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l >= 32<mask1>l){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l <= 0x80000000L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l>=2){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(unixTimestamps){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l >= 0x80000000L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l == null){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 0xffffffffL){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 32){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 0x80000000){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l > 2147483647L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 2<mask1>l){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(debug){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 0x10000){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l <= 0xffff){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l >= 10000){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l == 0<mask1> l){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l <= 1L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l==-1){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l == 2){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l >= 10){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(unixTimestamp(l) < 0){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 0x00000000FFFFFFFFL){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(unixToDate(l) < 0){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l<=0xFFFFFFFFL){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l == 1){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l == 0x100000000L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(Long.isNaN(l)){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l <= 0xFFFF){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l >= 1000000000){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l > 31){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(strict){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(LITTLE_ENDIAN){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 0xffff){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l>=2L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l >= 28000L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l >= 32){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 0<mask1>1){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l<=0x100000000L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l == 1L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l >= 1){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l >= 20000000L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(unixToZipLong fails){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < -2L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(UNIX_TIMESTAMPS){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l >= 10000L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l instanceof Long){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 0<mask1> l){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l >= 0xffffffffL){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if( true){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l >= 8000000000000000L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(UnixTimestamps){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(unixToZipLong!=null){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l > 1L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < -2){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(signedTimestamps){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 0X100000000L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l>0L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(false<mask3> }){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 0<mask1>true){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(Thread.interrupted){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l<0x80000000L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if( l == 0){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 0x100000000){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 1048576L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l == 0xffffffffL){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l >= 1048576L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l<0xFFFFFFFFL){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(unixTimeStamp(l) < 0){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l >= 2097152){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l<1){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if( l < 0L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 0<mask1> 0){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l <= 0xFFFFL){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(signed){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(unixToDate(l) >= 0){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 1<mask1>l){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l != 0<mask1>l){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l==0<mask1>0){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l > 0<mask1>l){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l <= 0x7FFFFFFF){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l <= -1L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(unixToDate(l)==null){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(closed){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l == 0<mask1>true){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l > 32<mask1>l){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 0<mask1>32){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 0X80000000L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l > 0x80000000L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l <= 0x7fffffff){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l > 0xffff){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l>=0x100000000L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 0xfd){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if( l < 0x100000000L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 10000000L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 2147483647L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(windows){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l<0<mask3> }){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < Long.MIN_VALUE){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l > 0xFFFF){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 0x7fffffff){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l >= 2000000L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l>=TWO_TO_32){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l >= 2**32){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l == 0x00000000){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 1<<31){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(UTC){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(NULL){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(unixTimestamp(l) >= 0){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(unixTime(l) < 0){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(unixToDate(l) == null){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l <= 0<mask1>0){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 0x10000000){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l>=32<mask1>l){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(unixTimeToZipLong fails){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(TRUE){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l <= 32<mask1>l){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l<0<mask1>2){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(LOG){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l>32<mask1>l){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if( false){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(null == l<mask1>l){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(frozen){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(VERBOSE){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(BINARY){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(unixTimeStamp(l) >= 0){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(UNIX){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 0<mask1>1L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(unixTimeToZipLong == null){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l <= 0x00000000FFFFFFFFL){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l>= TWO_TO_32){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 0x7FFFFFFF){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(FALSE){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 0<mask1>0L){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 0) return 0;){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if( l > TWO_TO_32){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l >= 16777216){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 0<mask1>l < 0){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(unixTimeToZipLong == NULL){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l == 0x00000000FFFFFFFFL){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l <= 0x7fffffffL){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(unixToLong(l) < 0){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(unixTimestamp(l)==0){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(unixTime(l) >= 0){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(linux){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l == Long.MAX_VALUE){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(isNegative){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(native){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l == 0<mask1>l == 0){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
if(l < 0x7fffffffL){ final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { }  
