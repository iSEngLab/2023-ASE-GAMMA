tais.reset();   
tais.close();   
tais.reset();();   
tais.getNextEntry();   
tais.close();();   
tais.closeArchive();   
tais.getNextEntry();();   
tais.resetEntry();   
tais.close(); }();   
tais.nextEntry();   
tais.reset()();   
tais.rewind();   
tais.closeArchiveInputStream();   
tais.mark();   
tais.init();   
tais.clear();   
tais.rewind();();   
tais.resetArchive();   
tais.release();   
tais.reset(); }();   
tais.resetAll();   
tais.openArchive();   
tais.resetAndClose();   
tais.resetStream();   
tais.close()();   
tais.closeArchive();();   
tais.start();   
tais.releaseEntry();   
tais.resetBuffer();   
tais.resetAndMark();   
tais.nextEntry();();   
tais.release();();   
tais.flush();   
tais.markSupported();   
tais.open();   
tais.close(in);();   
tais.closeArchiveEntry();   
tais.resetIndex();   
tais.resetState();   
tais.closeArchiveStream();   
tais.resetInputStream();   
tais.closeAll();   
tais.closes();   
tais.closeQuietly();   
tais.resetEntry();();   
tais.commit();   
tais.close();}();   
tais.resetCaches();   
tais.resetReader();   
tais.closeEntry();   
tais.getArchiveInputStream();   
tais.reset(); }();   
tais.resetStream();();   
tais.dispose();   
tais.closeStream();   
tais.nextToken();   
tais.closeArchiveInputStream();();   
tais.resetArchiveInputStream();   
tais.resetIfNeeded();   
tais.resetIterator();   
tais.resetAllEntries();   
tais.init();();   
tais.close(); }();   
tais.closeArchiveStream();();   
tais.reset(true);();   
tais.getNextEntry()();   
tais.resetAndReset();   
tais.reset(); ();   
tais.closeArchive(); }();   
tais.clear();();   
tais.rewind()();   
tais.getNextEntry(); }();   
tais.resetEntries();   
tais.closes the stream();   
tais.open();();   
tais.createArchiveInputStream();   
tais.end();   
tais.next();   
tais.cleanUp();   
tais.closeStream();();   
tais.resetCache();   
tais.reset and mark();   
tais.resetAndOpen();   
tais.resetArchiveEntry();   
tais.reset(false);();   
tais.resetBuffer();();   
tais.resetAndConsume();   
tais.release()();   
tais.reset.();   
tais.resetCurrentEntry();   
tais.reset(in);();   
tais.mark();();   
tais.resetIndex();();   
tais.flush();();   
tais.read();   
tais.releaseResources();   
tais.close it();   
tais.reset();}();   
tais.releaseConnection();   
tais.nextToken();();   
tais.commit();();   
tais.release(); }();   
tais.resetWrapper();   
tais.shutdown();   
tais.finish();   
tais.begin();   
tais.resetToLastEntry();   
tais.resetSize();   
tais.resetArchive();();   
tais.resetReads();   
tais.close the stream();   
tais.resetState();();   
tais.resetStreams();   
tais.resetTimer();   
tais.destroy();   
tais.resetValues();   
tais.resetToSize();   
tais.resets();   
tais.resetSupported();   
tais.getArchive();   
tais.resetNow();   
tais.close.();   
tais.close;();   
tais.closeArchiveEntry();();   
tais.closeInputStream();   
tais.reset() ;();   
tais.resetLastEntry();   
tais.initArchive();   
tais.stop();   
tais.resetIfNecessary();   
tais.resetPosition();   
tais.releaseEntry();();   
tais.reset!();   
tais.openEntry();   
tais.disposeArchive();   
tais.resetLock();   
tais.initialize();   
tais.closeEntry();();   
tais.resetReader();();   
tais.resetAndRead();   
tais.getCurrentEntry();   
tais.prepare();   
tais.reset everything();   
tais.getNextEntry;();   
tais.cleanup();   
tais.resetCaches();();   
tais.hasNextEntry();   
tais.open(); }();   
tais.readNextEntry();   
tais.resetCalled();   
tais.close(); ();   
tais.resetToDefault();   
tais.resetArchiveState();   
tais.resetAndLock();   
tais.setup();   
tais.getArchiveEntry();   
tais.resetNextEntry();   
tais.markSupported();();   
tais.resetQuietly();   
tais.closes input stream();   
tais.resetHeader();   
tais.reset;();   
tais.resetInput();   
tais.closeSafely();   
tais.seek(0);();   
tais.prepareArchive();   
tais.resetEnvironment();   
tais.closeArchive()();   
tais.resetDone();   
tais.openArchive();();   
tais.refresh();   
tais.closeConnection();   
tais.resetInternally();   
tais.resetAndFlush();   
tais.openArchiveInputStream();   
tais.open()();   
tais.getInputStream();   
tais.resetMark();   
tais.startArchive();   
tais.freeze();   
tais.close archive();   
tais.resetFile();   
tais.skip();   
tais.archive();   
tais.lock();   
tais.resetAll();();   
tais.readEntry();   
tais.resetToSize();();   
tais.resetIfNeeded();();   
tais.resetArchiveStream();   
tais.resetInputStream();();   
tais.nextEntry()();   
tais.getNextEntry() {();   
tais.resetWrapper();();   
tais.resetAndClose();();   
tais.resetToStart();   
tais.rewind(in);();   
tais.close(); },();   
tais.reset() { }();   
tais.resetStreamSignature();   
tais.getNextEntry(); ();   
tais.close(in);}();   
tais.resetAndStart();   
tais.releaseResources();();   
tais.resetAndGetEntry();   
tais.closeArchiveReader();   
tais.closeArchiveFile();   
tais.resetPosition();();   
tais.resetInput();();   
tais.resetOpen();();   
tais.resetAllEntries();();   
tais.openNextEntry();   
tais.close();  }();   
tais.close ArchiveInputStream();   
tais.resetAllCaches();   
tais.resetAndClear();   
tais.closeInputStream();();   
tais.close().close();();   
tais.resetAndCopy();   
tais.resetValues();();   
tais.resetCurrentEntry();();   
tais.openArchiveStream();   
tais.resetEntries();();   
tais.reset() ();   
tais.reset the stream();   
tais.moveToNextEntry();   
tais.resetTimer();();   
tais.resetAndValidate();   
tais.closes the InputStream();   
tais.resetSize();();   
tais.closeQuietly();();   
tais.closeStream(); }();   
tais.close the stream.();   
tais.resetArchiveInputStream();();   
tais.openEntry();();   
tais.resetAllStreams();   
tais.reset and mark operations();   
tais.resetAndRelease();   
tais.resetAndCloseArchive();   
tais.resets the stream();   
tais.resetToCurrentEntry();   
tais.nextEntry(); }();   
tais.resetArchiveStream();();   
tais.close the input stream();   
tais.moveToNextEntry();();   
tais.reset();  }();   
tais.reset(0);();   
tais.resetArchiveEntry();();   
tais.resetLastEntry();();   
tais.resetAndMark();();   
if(tais==null){ tais=null; } tais.getNextEntry();   
if(tais==null){ tais=new TarArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais=new TarArchiveInputStream();; } tais.getNextEntry();   
if(tais==null){ tais=new TarArchiveInputStream(in);; } tais.getNextEntry();   
if(tais==null){ tais=new TarArchiveInputStream() {; } tais.getNextEntry();   
if(tais==null){ tais=new TarArchiveInputStream(); } tais.getNextEntry();   
if(tais==null){ tais=tais; } tais.getNextEntry();   
if(tais==null){ tais=TarArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais=this; } tais.getNextEntry();   
if(tais==null){ tais=new TarArchiveInputStream(); }; } tais.getNextEntry();   
if(tais==null){ tais=null;; } tais.getNextEntry();   
if(tais==null){ tais=archive; } tais.getNextEntry();   
if(tais==null){ tais=new JarArchiveInputStream();; } tais.getNextEntry();   
if(tais==null){ tais=new JarArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais=null; }; } tais.getNextEntry();   
if(tais==null){ tais=new ZipArchiveInputStream();; } tais.getNextEntry();   
if(tais==null){ tais=new ZipArchiveInputStream(in);; } tais.getNextEntry();   
if(tais==null){ tais=createArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais=new ArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais= null; } tais.getNextEntry();   
if(tais==null){ tais=new ZipArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais=new JarArchiveInputStream(in);; } tais.getNextEntry();   
if(tais==null){ tais=jar; } tais.getNextEntry();   
if(tais==null){ tais=tar; } tais.getNextEntry();   
if(tais==null){ tais=new NullArchiveInputStream();; } tais.getNextEntry();   
if(tais==null){ tais=new ArchiveInputStream() {; } tais.getNextEntry();   
if(tais==null){ tais= new TarArchiveInputStream(in);; } tais.getNextEntry();   
if(tais==null){ tais= new TarArchiveInputStream() {; } tais.getNextEntry();   
if(tais==null){ tais=new ArchiveInputStream(); } tais.getNextEntry();   
if(tais==null){ tais=newTarArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais=new ArchiveInputStream(in);; } tais.getNextEntry();   
if(tais==null){ tais= new TarArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais=new ArchiveInputStream();; } tais.getNextEntry();   
if(tais==null){ tais=new TarArchiveInputStream() {; } tais.getNextEntry();   
if(tais==null){ tais=new ZipArchiveInputStream(in); }; } tais.getNextEntry();   
if(tais==null){ tais= new TarArchiveInputStream(); } tais.getNextEntry();   
if(tais==null){ tais=new TarArchiveInputStream();}; } tais.getNextEntry();   
if(tais==null){ tais= new TarArchiveInputStream();; } tais.getNextEntry();   
if(tais==null){ tais=tarArchive; } tais.getNextEntry();   
if(tais==null){ tais=tarArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais=new CpioArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais=new JarArchiveInputStream() {; } tais.getNextEntry();   
if(tais==null){ tais=new ZipArchiveInputStream(); } tais.getNextEntry();   
if(tais==null){ tais=new JarArchiveInputStream(); } tais.getNextEntry();   
if(tais==null){ tais=new TarArchiveInputStream(in);}; } tais.getNextEntry();   
if(tais==null){ tais=new TarArchiveInputStream(this);; } tais.getNextEntry();   
if(tais==null){ tais=new TarArchiveInputStream(){; } tais.getNextEntry();   
if(tais==null){ tais=NULL; } tais.getNextEntry();   
if(tais==null){ tais=new NullArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais=new ZipArchiveInputStream() {; } tais.getNextEntry();   
if(tais==null){ tais=openArchive; } tais.getNextEntry();   
if(tais==null){ tais=new TarArchiveInputStream(in); } tais.getNextEntry();   
if(tais==null){ tais=new TarArchiveInputStream() { }; } tais.getNextEntry();   
if(tais==null){ tais=new ZipArchiveInputStream(); }; } tais.getNextEntry();   
if(tais==null){ tais=empty; } tais.getNextEntry();   
if(tais==null){ tais=getArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais=nextEntry; } tais.getNextEntry();   
if(tais==null){ tais=new NullArchiveInputStream(); }; } tais.getNextEntry();   
if(tais==null){ tais=EMPTY; } tais.getNextEntry();   
if(tais==null){ tais=noop; } tais.getNextEntry();   
if(tais==null){ tais=archiver; } tais.getNextEntry();   
if(tais==null){ tais=tai; } tais.getNextEntry();   
if(tais==null){ tais=new ZipArchiveInputStream(); return tais; } tais.getNextEntry();   
if(tais==null){ tais=new JarArchiveInputStream(); }; } tais.getNextEntry();   
if(tais==null){ tais=new TarArchiveInputStream() ;; } tais.getNextEntry();   
if(tais==null){ tais=JarArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais=null; return tais; } tais.getNextEntry();   
if(tais==null){ tais=newTarArchiveInputStream();; } tais.getNextEntry();   
if(tais==null){ tais=t; } tais.getNextEntry();   
if(tais==null){ tais=new ArchiveInputStream(in); }; } tais.getNextEntry();   
if(tais==null){ tais=getNextEntry();; } tais.getNextEntry();   
if(tais==null){ tais=new TarArchiver; } tais.getNextEntry();   
if(tais==null){ tais=super; } tais.getNextEntry();   
if(tais==null){ tais=new TarArchiverInputStream; } tais.getNextEntry();   
if(tais==null){ tais= tar archive; } tais.getNextEntry();   
if(tais==null){ tais=tararchive; } tais.getNextEntry();   
if(tais==null){ tais=new DefaultArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais=tar archive; } tais.getNextEntry();   
if(tais==null){ tais=new TarArchiveInputStream;; } tais.getNextEntry();   
if(tais==null){ tais=tarInputStream; } tais.getNextEntry();   
if(tais==null){ tais=new CpioArchiveInputStream();; } tais.getNextEntry();   
if(tais==null){ tais=new TarArchiveInputStream() { ; } tais.getNextEntry();   
if(tais==null){ tais=tais.getNextEntry();; } tais.getNextEntry();   
if(tais==null){ tais=archiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais=tarStream; } tais.getNextEntry();   
if(tais==null){ tais=createArchiveInputStream(); } tais.getNextEntry();   
if(tais==null){ tais=createArchiveInputStream(in);; } tais.getNextEntry();   
if(tais==null){ tais=getNextEntry; } tais.getNextEntry();   
if(tais==null){ tais=new DefaultArchiveInputStream();; } tais.getNextEntry();   
if(tais==null){ tais=next; } tais.getNextEntry();   
if(tais==null){ tais= new TarArchiveInputStream(); }; } tais.getNextEntry();   
if(tais==null){ tais=tarfile; } tais.getNextEntry();   
if(tais==null){ tais=System.in; } tais.getNextEntry();   
if(tais==null){ tais=newArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais= archive; } tais.getNextEntry();   
if(tais==null){ tais=new TarArchiveInputStream() {};; } tais.getNextEntry();   
if(tais==null){ tais=new TarArchiveInputStream() {}; } tais.getNextEntry();   
if(tais==null){ tais=new DefaultTarArchiveInputStream();; } tais.getNextEntry();   
if(tais==null){ tais=nil; } tais.getNextEntry();   
if(tais==null){ tais=new NullArchiveInputStream(); return tais; } tais.getNextEntry();   
if(tais==null){ tais=new DefaultTarArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais=new TarArchiveInputStream(); ; } tais.getNextEntry();   
if(tais==null){ tais=tais;; } tais.getNextEntry();   
if(tais==null){ tais=new TarArchiveInputStream() { };; } tais.getNextEntry();   
if(tais==null){ tais=createTarArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais=new TestArchiveInputStream();; } tais.getNextEntry();   
if(tais==null){ tais=new TarArchiver();; } tais.getNextEntry();   
if(tais==null){ tais=tarjar; } tais.getNextEntry();   
if(tais==null){ tais=ArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais= null; }; } tais.getNextEntry();   
if(tais==null){ tais=false; } tais.getNextEntry();   
if(tais==null){ tais=new ArchiveInputStream(); }; } tais.getNextEntry();   
if(tais==null){ tais=getNextEntry(); } tais.getNextEntry();   
if(tais==null){ tais=new TarArchiverInputStream();; } tais.getNextEntry();   
if(tais==null){ tais=new TarArchiveInputStream();  ; } tais.getNextEntry();   
if(tais==null){ tais=new TarArchiveInputStream(input);; } tais.getNextEntry();   
if(tais==null){ tais=new ArchiveInputStream(); return tais; } tais.getNextEntry();   
if(tais==null){ tais=newTarArchiveInputStream(in);; } tais.getNextEntry();   
if(tais==null){ tais=in; } tais.getNextEntry();   
if(tais==null){ tais=0; } tais.getNextEntry();   
if(tais==null){ tais=parent; } tais.getNextEntry();   
if(tais==null){ tais=newTarArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais=empty archive; } tais.getNextEntry();   
if(tais==null){ tais=null;}; } tais.getNextEntry();   
if(tais==null){ tais= null;; } tais.getNextEntry();   
if(tais==null){ tais=tararchive.TarArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais=tarArchiver; } tais.getNextEntry();   
if(tais==null){ tais=inputStream; } tais.getNextEntry();   
if(tais==null){ tais= new ArchiveInputStream() {; } tais.getNextEntry();   
if(tais==null){ tais=new TarArchiveInputStream( in );; } tais.getNextEntry();   
if(tais==null){ tais=tarHeader; } tais.getNextEntry();   
if(tais==null){ tais=new FileInputStream(in);; } tais.getNextEntry();   
if(tais==null){ tais=tarFactory; } tais.getNextEntry();   
if(tais==null){ tais=new TarArchiveInputStream(null);; } tais.getNextEntry();   
if(tais==null){ tais=createArchiveInputStream() {; } tais.getNextEntry();   
if(tais==null){ tais=new NullArchiveInputStream(); } tais.getNextEntry();   
if(tais==null){ tais=tar.InputStream; } tais.getNextEntry();   
if(tais==null){ tais=a; } tais.getNextEntry();   
if(tais==null){ tais=new NoOpArchiveInputStream();; } tais.getNextEntry();   
if(tais==null){ tais= new ZipArchiveInputStream(in);; } tais.getNextEntry();   
if(tais==null){ tais=new StreamArchiveInputStream();; } tais.getNextEntry();   
if(tais==null){ tais=getNextEntry(); }; } tais.getNextEntry();   
if(tais==null){ tais=openArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais=tarFile; } tais.getNextEntry();   
if(tais==null){ tais=root; } tais.getNextEntry();   
if(tais==null){ tais=tarInfo; } tais.getNextEntry();   
if(tais==null){ tais=jar archives; } tais.getNextEntry();   
if(tais==null){ tais=tais.getNextEntry(); }; } tais.getNextEntry();   
if(tais==null){ tais=new TarArchiveInputStream(){}; } tais.getNextEntry();   
if(tais==null){ tais=ar; } tais.getNextEntry();   
if(tais==null){ tais=archiveReader; } tais.getNextEntry();   
if(tais==null){ tais=tais; }; } tais.getNextEntry();   
if(tais==null){ tais=super.createArchiveInputStream(in);; } tais.getNextEntry();   
if(tais==null){ tais=new BasicTarArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais=new InMemoryArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais=tc; } tais.getNextEntry();   
if(tais==null){ tais=new NoOpArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais= this; } tais.getNextEntry();   
if(tais==null){ tais=new TarArchiveInputStream() ; } tais.getNextEntry();   
if(tais==null){ tais=openArchive();; } tais.getNextEntry();   
if(tais==null){ tais=new BasicTarArchiveInputStream();; } tais.getNextEntry();   
if(tais==null){ tais=new TempArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais=getInputStream; } tais.getNextEntry();   
if(tais==null){ tais=taison; } tais.getNextEntry();   
if(tais==null){ tais=new TarsArchiveInputStream();; } tais.getNextEntry();   
if(tais==null){ tais=new RarArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais=new StreamArchiveInputStream(in);; } tais.getNextEntry();   
if(tais==null){ tais= new JarArchiveInputStream(in);; } tais.getNextEntry();   
if(tais==null){ tais=new SimpleArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais=new FileInputStream(in);; } tais.getNextEntry();   
if(tais==null){ tais= ; } tais.getNextEntry();   
if(tais==null){ tais= TarArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais= new TarArchiveInputStream() { }; } tais.getNextEntry();   
if(tais==null){ tais=new DummyArchiveInputStream();; } tais.getNextEntry();   
if(tais==null){ tais=new CpioArchiveInputStream(in);; } tais.getNextEntry();   
if(tais==null){ tais=TAIS; } tais.getNextEntry();   
if(tais==null){ tais= tar; } tais.getNextEntry();   
if(tais==null){ tais=new TarsArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais=openArchive(); } tais.getNextEntry();   
if(tais==null){ tais=new CpioArchiverInputStream; } tais.getNextEntry();   
if(tais==null){ tais=new TarArchiveInputStreamImpl; } tais.getNextEntry();   
if(tais==null){ tais=new TarInputStream(in);; } tais.getNextEntry();   
if(tais==null){ tais=getArchiveInputStream(); } tais.getNextEntry();   
if(tais==null){ tais=new TarArchiveInputStream(stream);; } tais.getNextEntry();   
if(tais==null){ tais=factory; } tais.getNextEntry();   
if(tais==null){ tais=nextEntry();; } tais.getNextEntry();   
if(tais==null){ tais=new ZipArchiveInputStream(in);}; } tais.getNextEntry();   
if(tais==null){ tais=pool; } tais.getNextEntry();   
if(tais==null){ tais=new StreamArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais=new TestArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais=os; } tais.getNextEntry();   
if(tais==null){ tais= new ArchiveInputStream(); } tais.getNextEntry();   
if(tais==null){ tais=new SimpleTarArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais=dataSource; } tais.getNextEntry();   
if(tais==null){ tais=ai; } tais.getNextEntry();   
if(tais==null){ tais=new ObjectInputStream(in);; } tais.getNextEntry();   
if(tais==null){ tais=newArchiveInputStream();; } tais.getNextEntry();   
if(tais==null){ tais=new ZipArchiveInputStream();}; } tais.getNextEntry();   
if(tais==null){ tais=ArchiveInputStream createArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais=new EmptyArchiveInputStream();; } tais.getNextEntry();   
if(tais==null){ tais=TarArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais=new DefaultArchiveInputStream(); } tais.getNextEntry();   
if(tais==null){ tais=new NoopArchiveInputStream();; } tais.getNextEntry();   
if(tais==null){ tais=defaultArchiver; } tais.getNextEntry();   
if(tais==null){ tais=tarReader; } tais.getNextEntry();   
if(tais==null){ tais=new TarInputStream; } tais.getNextEntry();   
if(tais==null){ tais=openArchiver; } tais.getNextEntry();   
if(tais==null){ tais=this;; } tais.getNextEntry();   
if(tais==null){ tais=newTarArchiveInputStream(); } tais.getNextEntry();   
if(tais==null){ tais=new ZipArchiver; } tais.getNextEntry();   
if(tais==null){ tais=new NoopArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais=tarFileInputStream; } tais.getNextEntry();   
if(tais==null){ tais=new Object();; } tais.getNextEntry();   
if(tais==null){ tais=new InputStream() {; } tais.getNextEntry();   
if(tais==null){ tais=new TarInputStream();; } tais.getNextEntry();   
if(tais==null){ tais=jar archive; } tais.getNextEntry();   
if(tais==null){ tais=tar.Archiver; } tais.getNextEntry();   
if(tais==null){ tais= new TarArchiveInputStream() {; } tais.getNextEntry();   
if(tais==null){ tais=null; return null; } tais.getNextEntry();   
if(tais==null){ tais=NewArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais= new JarArchiveInputStream();; } tais.getNextEntry();   
if(tais==null){ tais=ArchiveInputStream archiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais=new RarArchiveInputStream();; } tais.getNextEntry();   
if(tais==null){ tais=new SimpleTarArchiveInputStream();; } tais.getNextEntry();   
if(tais==null){ tais=tar.gz; } tais.getNextEntry();   
if(tais==null){ tais=jarArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais=Empty archive; } tais.getNextEntry();   
if(tais==null){ tais=new TagArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais=this.getNextEntry();; } tais.getNextEntry();   
if(tais==null){ tais=new TomcatArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais=jars; } tais.getNextEntry();   
if(tais==null){ tais=new DefaultTarArchiveInputStream();; } tais.getNextEntry();   
if(tais==null){ tais= createArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais= new TarArchiveInputStream(in); } tais.getNextEntry();   
if(tais==null){ tais=TarArchiver; } tais.getNextEntry();   
if(tais==null){ tais=new JarArchiveInputStream();}; } tais.getNextEntry();   
if(tais==null){ tais=tar.xz; } tais.getNextEntry();   
if(tais==null){ tais= new ArchiveInputStream(in);; } tais.getNextEntry();   
if(tais==null){ tais=null; },; } tais.getNextEntry();   
if(tais==null){ tais=new DummyArchiveInputStream; } tais.getNextEntry();   
if(tais==null){ tais=new TarArchiveInputStream(-1);; } tais.getNextEntry();   
if(tais==null){ tais= new ZipArchiveInputStream() {; } tais.getNextEntry();   
if(tais==null){ tais=new InputStream; } tais.getNextEntry();   
if(tais==null){ tais=createArchiveInputStream(in); } tais.getNextEntry();   
if(tais==null){ tais=this.getNextEntry(); }; } tais.getNextEntry();   
if(tais==null){ tais=new ArchiveInputStream(){; } tais.getNextEntry();   
if(tais==null){ tais=new IOException; } tais.getNextEntry();   
if(tais==null){ tais=archives; } tais.getNextEntry();   
if(tais==null){ tais=new InputStream(); } tais.getNextEntry();   
if(tais==null){ tais=new AtomicArchiveInputStream; } tais.getNextEntry();   
