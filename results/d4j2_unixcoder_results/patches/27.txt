 return el;  
 return null;  
 return tag;  
 tag = null;  
 tag;  
 return;  
 ;  
 el = tag;  
 el = null;  
 return startTag;  
 tag = startTag;  
 return el;  
 el;  
 el = startTag;  
 return this;  
 el = el;  
 return true;  
 remove;  
 //return el;  
 endTag;  
 tag = tag;  
 return false;  
 --;  
 selfClosing = true;  
 tag =;  
 el =;  
 };  
 return element;  
 endTag = el;  
 ++count;  
 tokeniser;  
 delete;  
 ++;  
 element;  
 startTag;  
 tagName;  
 return tokeniser;  
 add;  
 push;  
 null;  
 //    return el;  
 startTag = null;  
 tagName = null;  
 close;  
 el = endTag;  
 return  el;  
 break;  
 tag = undefined;  
 return null;  
 // return el;  
 return startTag.content;  
 addElement;  
 return empty;  
 addSelfClosing;  
 del;  
 returnel;  
 return new Element;  
 //;  
 node;  
 reset;  
 return undefined;  
 tag.remove();;  
 element = el;  
 return html;  
 comment;  
  return el;  
 endTag = startTag;  
 return tagName;  
 append;  
 tags;  
 tag = endTag;  
 ++depth;  
 flush;  
 addEndTag;  
 return node;  
 endTag = tag;  
 return nil;  
 return tag.value;  
 tag = el;  
 delete tag;  
 //tag;  
 el = this;  
  return el;  
 tagName = tag;  
 return attr;  
 el += startTag;  
 root = el;  
 ++tag;  
 return tag;  
 this;  
 addEmpty;  
 return;  
 returns el;  
 AST#return_statement#Leftreturn el;  
 tag = this;  
 yield;  
 removeSelfClosing;  
  return el;  
 appendEndTag;  
 return   el;  
 node = el;  
 return tag.tag;  
 return ele;  
 tokeniser = null;  
 tokeniser.reset;  
 return tag.element;  
 return endTag;  
 throw;  
 removeSelfClosingTag;  
 return startTag.value;  
 return tag.selfClosing;  
 addSelfClosingTag;  
 throw new Error;  
 return root;  
 ++tagCount;  
 deleteTag;  
 parent;  
 return tag.content;  
 ++pos;  
 closeTag;  
 tokenize;  
 html;  
 setSelfClosing;  
 tagiser;  
 el = new Element;  
 tokeniser = tag;  
 currentElement = el;  
 tags = null;  
 tokens;  
 return el;;  
 //return el;  
 tag.reset();;  
 //  return el;  
 //TODO;  
 return $;  
 entity;  
 el=tag;  
 el = undefined;  
 return entity;  
 removeTag;  
 pop;  
 ++i;  
 mark;  
;  
 deleteSelfClosing;  
 return "";  
 indent;  
 return tags;  
 //return null;  
 emit;  
 stack;  
 trigger;  
 return selfClosing;  
 return startTag.children;  
 insertEmpty;  
 tag = tagName;  
 ok;  
 element = null;  
 return e;  
 selfClosing = false;  
return el;  
 return self;  
 tag.markClosed;  
 return marked;  
 return elt;  
 endTag = null;  
 //tag = null;  
 //return tag;  
 tag=startTag;  
 element = tag;  
 // return el;  
 e;  
 component;  
 insertEndTag;  
 delete el;  
 return emptyElement;  
 parent = el;  
 ++tagIndex;  
 addStartTag;  
 text;  
 selfClosing;  
 return EMPTY;  
 ...;  
 newline;  
 el = false;  
 return elem;  
 root;  
 return dom;  
 selfClosing = true;  
 return xml;  
 elm = el;  
 skip;  
 return startTag.selfClosing;  
 end;  
 prefix;  
 return startTag.name;  
 ++ count;  
   return el;  
 continue;  
 tag.close();;  
 throw new RuntimeException;  
 removeEmpty;  
 ++size;  
 removeStartTag;  
 debug;  
 throw new AssertionError;  
 return };  
 startTag = tag;  
 result = el;  
 endElement;  
 return newElement;  
 return el.tag;  
 ++tagCounter;  
 endTag = true;  
 deleteToken;  
 addToken;  
 //      return el;  
 tag=null;  
 //   return el;  
 return tag.name;  
 //     return el;  
 return tag.tagName;  
 startTag.remove();;  
 return selfClosingTag;  
 throw new Exception;  
 triggerSelfClosing;  
 return tag.parent;  
 el = empty;  
 markSelfClosing;  
 //        return el;  
 resetTokeniser;  
 //    return null;  
 throw new IllegalStateException;  
 tag.clear();;  
 return el.parent;  
 return el.selfClosing;  
 return tag.el;  
 return startTag.attributes;  
 return tag.root;  
 el = tokeniser;  
 //tag = startTag;  
 throw new IllegalStateException();;  
 addSelfClosingFlag;  
 appendChild(el);;  
 generateSelfClosingTag;  
 addElement(el);;  
 tokeniser.next;  
 tagiser.reset;  
 tokeniser.advance;  
;  
 return el; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 return el; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tag = null; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tag = startTag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 return null; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tag = tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 el = tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 el = tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 return; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 --; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 return tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tag = startTag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 return null; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 ; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 ; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 el = startTag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 return tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 //tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 el = null; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 el = startTag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 el = null; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 return el; }; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tag = null; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 break; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tag = tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 return; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 ++; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
return el; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 ++count; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 //return el; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 startTag = null; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 //TODO; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 //tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
  return el; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 continue; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 // tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
   return el; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 el; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 //return el; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 null; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 }; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 //; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 startTag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tag =; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tagName; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tag.remove();; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 remove; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tag = endTag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 ++count; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 el; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 el.selfClosing = true; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 ++depth; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tokeniser; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 element; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 return startTag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 el = el; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 element; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 // TODO; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 null; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 // return el; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 delete; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 startTag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 //else; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 return this; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 continue; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 selfClosing = true; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 //continue; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
  //tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 break; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 ++depth; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 // continue; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 }; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tag.reset();; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tag = this; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 //    return el; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tokeniser; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tag = undefined; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 return true; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 endTag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 return startTag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 reset; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tag=startTag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
  //return el; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 // ok; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 //nothing; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 delete; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
return; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 return false; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 remove; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
tag = null; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 startTag = tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
  ; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tags; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 startTag = null; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
    return el; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tag = tag.parent; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 return true; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tag = tagName; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 //TODO; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 Tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 return this; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 del; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 el = this; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 //tag = null; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tags; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 node; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 // ignored; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tag.clear();; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 --; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 //nothing to do; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 el =; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
  // return el; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 el = endTag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 comment; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tagName = null; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 ++pos; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 el =; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 ++pos; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 //tag = startTag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 ++tagCount; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
             return el; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 el = el; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 node; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 TAG; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 ++tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 el = endTag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 element = el; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 //ok; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 return  el; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 xxx; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 this; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 //startTag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 //if; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 del; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 // do nothing; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tag = startTag.tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tag = tag.tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 selfClosing = true; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 //do nothing; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 // todo; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
  }; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 html; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 return false; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tagName = tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 currentElement = el; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 // return el; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 endTag = startTag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 el = this; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 ++i; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 // XXX; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
  el = startTag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
tag = startTag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 delete tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 // FIXME; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tokeniser = tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 add; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 element = tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 ++tagIndex; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
//tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 push; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 // else; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 undefined; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tag =; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 ++tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 //continue; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 endElement; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 ++ count; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
         return el; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 Tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
     return el; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tag = endTag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 root = el; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 return el; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 //reset; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 TAG; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 ++tagCount; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 entity; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 el=tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
  tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
  // tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 //tag = tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tag = el; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 el = new Element; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tokeniser = tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 close; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 // Tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 parent; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 return el<mask1> return el; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 //todo; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 //XXX; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 element = el; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 global; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 //tag = tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 dummy; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 ++length; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tokeniser = null; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
  el = tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 return el;; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
tag = tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 Tag tag = tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tag=null; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 el.tag = tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
  el = null; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 //return null; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 el.parent = this; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tags = null; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 startTag = tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 element = tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tag =startTag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 //return tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 ++tagIndex; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
  //TODO; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 ++tags; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 startTag.remove();; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
  tag = null; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 //  return el; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tag.reset; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 //tag = startTag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 //tag is known; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 //tag = null; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tag.close();; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 //noinspection ConstantConditions; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 return tokeniser; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
  // TODO; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 ++currentDepth; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 //import; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 endTag = tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 e.g; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 //noinspection unchecked; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 el=null; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 ++currentNestingLevel; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
  tag = startTag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 endTag = el; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tag = startTag;; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 el = startTag.content; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 removeSelfClosingTag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tag=tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 el = tag.element; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tokeniser.reset; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 tag = startTag.parent; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 //     return el; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 //	return el; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 return el; }; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 //  tag; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 return tokeniser; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
 el = new Element; if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isKnownTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isUnknownTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.getSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.hasSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.selfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isEmpty()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.hasChildren()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isValid()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.selfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isCompound()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isClosed()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.getValue()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isEndTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isOptional()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isKnownEndTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isRoot()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isInternal()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isKnown()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.hasAttribute()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isOpeningTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isUnclosed()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isOk()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isInTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isReadOnly()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isNotSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isElement()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isBlank()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.hasValue()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isValidTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isCloseTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isUnknown()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isNull()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isOpening()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isTagClosed()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosed()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isNamed()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isInSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isComment()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelected()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isExternal()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isRootTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isOpen()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.setSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isVoid()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isEndElement()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.allowsSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isAnonymous()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isWellKnownTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.getAttribute()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isselfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.hasAttributes()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isTagOpen()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isAccepted()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isTagClose()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isDefined()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSpecial()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.getContent()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isKnownClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isClose()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isStatic()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isTagName()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isRequired()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isEntity()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isKeyword()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isNamedTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isTagIgnored()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.getIsSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClose()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isMarked()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isCompoundTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isClosed()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isKnownAttribute()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isTagged()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isInternalTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isKnownContent()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.getParent()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isAttribute()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isInvalid()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.getTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isWhitespace()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isHidden()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isBroken()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isDeprecated()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.canClose()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isIgnored()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isKnownTagName()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.hasAttr()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isElementSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isStartTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.getValue().isEmpty()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isInComment()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isInList()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isChild()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.equalsSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isOpenTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isDocument()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isCustom()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isPresent()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.getId()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isKnownElement()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isContent()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSpecialTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.getTagName()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isTagClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isKnownChild()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isTagEmpty()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.supportsSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.getAttributes().isEmpty()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSimpleTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.selfClose()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSpace()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.hasTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.hasChild()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.equals()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isValidSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.knownTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isEnabled()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isInstance()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isAutoClose()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isKnownType()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isRawTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.getKnownTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isLocal()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isTagAllowed()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.getName().isEmpty()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.hasContent()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isNamespace()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isDeleted()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isVoidTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isAnonymousTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.getChildCount()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.hasClass()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isReference()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isInBody()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.getChildren()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.hasContent()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isXmlTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isParsed()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isNormalTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.getNamespace()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.value.isEmpty()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSetTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isCustomTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isElementClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSpecified()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.getName()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isOptionalTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isIgnoredTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isNothing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.notSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isNullable()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isToken()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isKnownNode()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isEmptyTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfclosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isDefaultClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isFullyClosed()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isOpenTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isPrivate()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isOpened()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isRegistered()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isElement()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isDefaultClose()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isClass()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isHiddenTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isAvailable()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.getKind()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isAbstract()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.getLocalName()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.hasParent()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isClosingTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isUnknownEndTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.getHasChildren()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSetSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isKnownEntity()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.hasCloseTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.getTag().isEmpty()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isInClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfOpening()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isInline()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isForbidden()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isRemoved()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.getContent().isEmpty()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.findSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isLexicalTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSimple()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isNew()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isFunction()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isAnyTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isName()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.equalsTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isFinal()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isTagSpecial()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isOtherTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.hasSpace()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isKnownClose()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isTagAttribute()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isInnerTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isReserved()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isInClosed()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.allowSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.containsSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isNonClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isNested()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isDefaultCloseTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.hasText()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isBrokenBroken()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isKnownParent()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isComputed()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isTagExcluded()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isDirective()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.checkSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isParent()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isKnownValue()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isFullyQualified()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.removeSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isCritical()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isTagUnknown()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isInCloseTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isInherited()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isTagElement()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isBad()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isKnownName()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isEnding()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isOpen()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isInvalid()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isLocalTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isDefault()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isReservedTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isLexical()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isKnownText()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isAncestor()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isExplicitTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isDeclared()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.hasOpenTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isInherit()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isPseudoTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.getTagType()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isDecl()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isKeepEmpty()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isKnownAttr()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isKnownNamespace()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isKnownWord()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.hasKnownTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isParentTag()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isKnownTags()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing()) tokeniser.markSelfClosing();   
if (tag.isSelfClosing()) tokeniser.reset();   
if (tag.isSelfClosing()) tokeniser.setSelfClosing();   
if (tag.isSelfClosing()) tokeniser.acknowledgeTag();   
if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingTag();   
if (tag.isSelfClosing()) tokeniser.resetSelfClosing();   
if (tag.isSelfClosing()) tokeniser.selfClosing();   
if (tag.isSelfClosing()) tokeniser.markSelfClosingFlag();   
if (tag.isSelfClosing()) tokeniser.addSelfClosingTag();   
if (tag.isSelfClosing()) tokeniser.selfClosingFlag();   
if (tag.isSelfClosing()) tokeniser.addSelfClosing();   
if (tag.isSelfClosing()) tokeniser.resetSelfClosingFlag();   
if (tag.isSelfClosing()) tokeniser.setSelfClosingFlag();   
if (tag.isSelfClosing()) tokeniser.tagClosed();   
if (tag.isSelfClosing()) tokeniser.emitSelfClosing();   
if (tag.isSelfClosing()) tokeniser.emitSelfClosingTag();   
if (tag.isSelfClosing()) tokeniser.tagOpen();   
if (tag.isSelfClosing()) tokeniser.markSelfClosingTag();   
if (tag.isSelfClosing()) tokeniser.tagClose();   
if (tag.isSelfClosing()) tokeniser.emit();   
if (tag.isSelfClosing()) tokeniser.resetTag();   
if (tag.isSelfClosing()) tokeniser.accept();   
if (tag.isSelfClosing()) tokeniser.allowSelfClosing();   
if (tag.isSelfClosing()) tokeniser.addSelfClosingFlag();   
if (tag.isSelfClosing()) tokeniser.openTag();   
if (tag.isSelfClosing()) tokeniser.startTag();   
if (tag.isSelfClosing()) tokeniser.processSelfClosingTag();   
if (tag.isSelfClosing()) tokeniser.removeSelfClosingTag();   
if (tag.isSelfClosing()) tokeniser.closeTag();   
if (tag.isSelfClosing()) tokeniser.addAttribute();   
if (tag.isSelfClosing()) tokeniser.selfClosing();   
if (tag.isSelfClosing()) tokeniser.resetState();   
if (tag.isSelfClosing()) tokeniser.rejectSelfClosingTag();   
if (tag.isSelfClosing()) tokeniser.advance();   
if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosing();   
if (tag.isSelfClosing()) tokeniser.selfClose();   
if (tag.isSelfClosing()) tokeniser.next();   
if (tag.isSelfClosing()) tokeniser.markTagClosed();   
if (tag.isSelfClosing()) tokeniser.isSelfClosing();   
if (tag.isSelfClosing()) tokeniser.markTagAsSelfClosing();   
if (tag.isSelfClosing()) tokeniser.ok();   
if (tag.isSelfClosing()) tokeniser.eat();   
if (tag.isSelfClosing()) tokeniser.clearSelfClosingFlag();   
if (tag.isSelfClosing()) tokeniser.markClosed();   
if (tag.isSelfClosing()) tokeniser.mark();   
if (tag.isSelfClosing()) tokeniser.readTag();   
if (tag.isSelfClosing()) tokeniser.markOpenTag();   
if (tag.isSelfClosing()) tokeniser.setKnownTag();   
if (tag.isSelfClosing()) tokeniser.consume();   
if (tag.isSelfClosing()) tokeniser.clearSelfClosing();   
if (tag.isSelfClosing()) tokeniser.ignoreSelfClosing();   
if (tag.isSelfClosing()) tokeniser.addTag();   
if (tag.isSelfClosing()) tokeniser.markAsSelfClosing();   
if (tag.isSelfClosing()) tokeniser.tag();   
if (tag.isSelfClosing()) tokeniser.removeSelfClosing();   
if (tag.isSelfClosing()) tokeniser.nextToken();   
if (tag.isSelfClosing()) tokeniser.resetTokeniser();   
if (tag.isSelfClosing()) tokeniser.acceptSelfClosing();   
if (tag.isSelfClosing()) tokeniser.setValue();   
if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlags();   
if (tag.isSelfClosing()) tokeniser.processSelfClosing();   
if (tag.isSelfClosing()) tokeniser.checkSelfClosing();   
if (tag.isSelfClosing()) tokeniser.registerTag();   
if (tag.isSelfClosing()) tokeniser.pushSelfClosingTag();   
if (tag.isSelfClosing()) tokeniser.checkSelfClosingFlag();   
if (tag.isSelfClosing()) tokeniser.markEnd();   
if (tag.isSelfClosing()) tokeniser.nextTag();   
if (tag.isSelfClosing()) tokeniser.addValue();   
if (tag.isSelfClosing()) tokeniser.finish();   
if (tag.isSelfClosing()) tokeniser.handleSelfClosingTag();   
if (tag.isSelfClosing()) tokeniser.skip();   
if (tag.isSelfClosing()) tokeniser.insertElement();   
if (tag.isSelfClosing()) tokeniser.markTag();   
if (tag.isSelfClosing()) tokeniser.finishTag();   
if (tag.isSelfClosing()) tokeniser.acceptSelfClosingTag();   
if (tag.isSelfClosing()) tokeniser.getSelfClosingFlag();   
if (tag.isSelfClosing()) tokeniser.acknowledgeTagName();   
if (tag.isSelfClosing()) tokeniser.handleSelfClosing();   
if (tag.isSelfClosing()) tokeniser.acknowledgeClosingFlag();   
if (tag.isSelfClosing()) tokeniser.pushSelfClosing();   
if (tag.isSelfClosing()) tokeniser.tagOpened();   
if (tag.isSelfClosing()) tokeniser.addSelfClosingTags();   
if (tag.isSelfClosing()) tokeniser.commit();   
if (tag.isSelfClosing()) tokeniser.unmarkSelfClosingFlag();   
if (tag.isSelfClosing()) tokeniser.analyze();   
if (tag.isSelfClosing()) tokeniser.ready();   
if (tag.isSelfClosing()) tokeniser.pushTag();   
if (tag.isSelfClosing()) tokeniser.resetSelfClosingTag();   
if (tag.isSelfClosing()) tokeniser.ignoreSelfClosingTag();   
if (tag.isSelfClosing()) tokeniser.endTag();   
if (tag.isSelfClosing()) tokeniser.selfClosingTag();   
if (tag.isSelfClosing()) tokeniser.skipChildren();   
if (tag.isSelfClosing()) tokeniser.addNode();   
if (tag.isSelfClosing()) tokeniser.setIsSelfClosing();   
if (tag.isSelfClosing()) tokeniser.markEmpty();   
if (tag.isSelfClosing()) tokeniser.selfCloseTag();   
if (tag.isSelfClosing()) tokeniser.acknowledgeselfClosingFlag();   
if (tag.isSelfClosing()) tokeniser.addToken();   
if (tag.isSelfClosing()) tokeniser.openSelfClosingTag();   
if (tag.isSelfClosing()) tokeniser.rejectSelfClosing();   
if (tag.isSelfClosing()) tokeniser.reset();();   
if (tag.isSelfClosing()) tokeniser.eatSelfClosing();   
if (tag.isSelfClosing()) tokeniser.addEndTag();   
if (tag.isSelfClosing()) tokeniser.read();   
if (tag.isSelfClosing()) tokeniser.markEndOfTag();   
if (tag.isSelfClosing()) tokeniser.emitTag();   
if (tag.isSelfClosing()) tokeniser.insertSelfClosing();   
if (tag.isSelfClosing()) tokeniser.indent();   
if (tag.isSelfClosing()) tokeniser.readTagName();   
if (tag.isSelfClosing()) tokeniser.unread();   
if (tag.isSelfClosing()) tokeniser.acceptTag();   
if (tag.isSelfClosing()) tokeniser.acceptEmpty();   
if (tag.isSelfClosing()) tokeniser.consumeTag();   
if (tag.isSelfClosing()) tokeniser.addSelfClosingElement();   
if (tag.isSelfClosing()) tokeniser.startTag();   
if (tag.isSelfClosing()) tokeniser.tokenise();   
if (tag.isSelfClosing()) tokeniser.add();   
if (tag.isSelfClosing()) tokeniser.markSelfClosed();   
if (tag.isSelfClosing()) tokeniser.readStartTag();   
if (tag.isSelfClosing()) tokeniser.declareSelfClosing();   
if (tag.isSelfClosing()) tokeniser.beep();   
if (tag.isSelfClosing()) tokeniser.handleTag();   
if (tag.isSelfClosing()) tokeniser.eatTag();   
if (tag.isSelfClosing()) tokeniser.flush();   
if (tag.isSelfClosing()) tokeniser.markKnownTag();   
if (tag.isSelfClosing()) tokeniser.resetAttributes();   
if (tag.isSelfClosing()) tokeniser.startToken();   
if (tag.isSelfClosing()) tokeniser.error();   
if (tag.isSelfClosing()) tokeniser.value();   
if (tag.isSelfClosing()) tokeniser.push();   
if (tag.isSelfClosing()) tokeniser.checkTag();   
if (tag.isSelfClosing()) tokeniser.emitEmpty();   
if (tag.isSelfClosing()) tokeniser.skipWhitespace();   
if (tag.isSelfClosing()) tokeniser.markOpen();   
if (tag.isSelfClosing()) tokeniser.allowSelfClosingTag();   
if (tag.isSelfClosing()) tokeniser.isSelfClosingFlag();   
if (tag.isSelfClosing()) tokeniser.readSelfClosingTag();   
if (tag.isSelfClosing()) tokeniser.openSelfClosing();   
if (tag.isSelfClosing()) tokeniser.getSelfClosing();   
if (tag.isSelfClosing()) tokeniser.remove();   
if (tag.isSelfClosing()) tokeniser.markTagOpen();   
if (tag.isSelfClosing()) tokeniser.pop();   
if (tag.isSelfClosing()) tokeniser.finishToken();   
if (tag.isSelfClosing()) tokeniser.skipSelfClosing();   
if (tag.isSelfClosing()) tokeniser.forget();   
if (tag.isSelfClosing()) tokeniser.acknowledgeEndTag();   
if (tag.isSelfClosing()) tokeniser.markUnknownTag();   
if (tag.isSelfClosing()) tokeniser.forgetSelfClosingTag();   
if (tag.isSelfClosing()) tokeniser.startSelfClosingTag();   
if (tag.isSelfClosing()) tokeniser.registerSelfClosingTag();   
if (tag.isSelfClosing()) tokeniser.clearTag();   
if (tag.isSelfClosing()) tokeniser.emitSelfClosingFlag();   
if (tag.isSelfClosing()) tokeniser.tokeniser();   
if (tag.isSelfClosing()) tokeniser.tick();   
if (tag.isSelfClosing()) tokeniser.resetSelfClosingState();   
if (tag.isSelfClosing()) tokeniser.addChild();   
if (tag.isSelfClosing()) tokeniser.readTagAttributes();   
if (tag.isSelfClosing()) tokeniser.addSelfClosingToken();   
if (tag.isSelfClosing()) tokeniser.end();   
if (tag.isSelfClosing()) tokeniser.enforceSelfClosing();   
if (tag.isSelfClosing()) tokeniser.emitEndTag();   
if (tag.isSelfClosing()) tokeniser.tagClosing();   
if (tag.isSelfClosing()) tokeniser.setTag();   
if (tag.isSelfClosing()) tokeniser.updateSelfClosingFlag();   
if (tag.isSelfClosing()) tokeniser.markClosedTag();   
if (tag.isSelfClosing()) tokeniser.ignore();   
if (tag.isSelfClosing()) tokeniser.reject();   
if (tag.isSelfClosing()) tokeniser.updateSelfClosing();   
if (tag.isSelfClosing()) tokeniser.addElement();   
if (tag.isSelfClosing()) tokeniser.allowSelfClosingTags();   
if (tag.isSelfClosing()) tokeniser.pos();   
if (tag.isSelfClosing()) tokeniser.checkSelfClosingTag();   
if (tag.isSelfClosing()) tokeniser.writeSelfClosingTag();   
if (tag.isSelfClosing()) tokeniser.markEnclosingElement();   
if (tag.isSelfClosing()) tokeniser.analyzeTag();   
if (tag.isSelfClosing()) tokeniser.acknowledgeUnknownTag();   
if (tag.isSelfClosing()) tokeniser.rememberSelfClosing();   
if (tag.isSelfClosing()) tokeniser.index();   
if (tag.isSelfClosing()) tokeniser.processTag();   
if (tag.isSelfClosing()) tokeniser.unknownTag();   
if (tag.isSelfClosing()) tokeniser.markEnclosingTag();   
if (tag.isSelfClosing()) tokeniser.removeTag();   
if (tag.isSelfClosing()) tokeniser.debug();   
if (tag.isSelfClosing()) tokeniser.checkTagName();   
if (tag.isSelfClosing()) tokeniser.addAttributes();   
if (tag.isSelfClosing()) tokeniser.resetToken();   
if (tag.isSelfClosing()) tokeniser.createSelfClosingTag();   
if (tag.isSelfClosing()) tokeniser.readTag();   
if (tag.isSelfClosing()) tokeniser.forgetSelfClosing();   
if (tag.isSelfClosing()) tokeniser.markClosingTag();   
if (tag.isSelfClosing()) tokeniser.parseTag();   
if (tag.isSelfClosing()) tokeniser.announceSelfClosingFlag();   
if (tag.isSelfClosing()) tokeniser.addClass();   
if (tag.isSelfClosing()) tokeniser.parseSelfClosingTag();   
if (tag.isSelfClosing()) tokeniser.autoClose();   
if (tag.isSelfClosing()) tokeniser.unreadWhitespace();   
if (tag.isSelfClosing()) tokeniser.init();   
if (tag.isSelfClosing()) tokeniser.rememberSelfClosingFlag();   
if (tag.isSelfClosing()) tokeniser.acknowledgeOpenTag();   
if (tag.isSelfClosing()) tokeniser.insertSelfClosingTag();   
if (tag.isSelfClosing()) tokeniser.startPos();   
if (tag.isSelfClosing()) tokeniser.addChildren();   
if (tag.isSelfClosing()) tokeniser.createTag();   
if (tag.isSelfClosing()) tokeniser.readToken();   
if (tag.isSelfClosing()) tokeniser.start();   
if (tag.isSelfClosing()) tokeniser.complete();   
if (tag.isSelfClosing()) tokeniser.requireTag();   
if (tag.isSelfClosing()) tokeniser.skipSelfClosingTag();   
if (tag.isSelfClosing()) tokeniser.tagReady();   
if (tag.isSelfClosing()) tokeniser.markIncomplete();   
if (tag.isSelfClosing()) tokeniser.decide();   
if (tag.isSelfClosing()) tokeniser.fail();   
if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingAttribute();   
if (tag.isSelfClosing()) tokeniser.tagEnd();   
if (tag.isSelfClosing()) tokeniser.startSelfClosing();   
if (tag.isSelfClosing()) tokeniser.setPosition();   
if (tag.isSelfClosing()) tokeniser.close();   
if (tag.isSelfClosing()) tokeniser.writeEndElement();   
if (tag.isSelfClosing()) tokeniser.readWhitespace();   
if (tag.isSelfClosing()) tokeniser.acknowledgeKnownTag();   
if (tag.isSelfClosing()) tokeniser.markBogus();   
if (tag.isSelfClosing()) tokeniser.register();   
if (tag.isSelfClosing()) tokeniser.forgetSelfClosingFlag();   
if (tag.isSelfClosing()) tokeniser.acceptSelfClosingFlag();   
if (tag.isSelfClosing()) tokeniser.acceptEndElement();   
if (tag.isSelfClosing()) tokeniser.markBroken();   
if (tag.isSelfClosing()) tokeniser.tagStart();   
if (tag.isSelfClosing()) tokeniser.recover();   
if (tag.isSelfClosing()) tokeniser.generateSelfClosingTag();   
if (tag.isSelfClosing()) tokeniser.addEndElement();   
if (tag.isSelfClosing()) tokeniser.unmarkSelfClosing();   
if (tag.isSelfClosing()) tokeniser.completeTag();   
if (tag.isSelfClosing()) tokeniser.declareSelfClosingTag();   
if (tag.isSelfClosing()) tokeniser.removeSelfClosingFlag();   
if (tag.isSelfClosing()) tokeniser.indicateSelfClosingFlag();   
if (tag.isSelfClosing()) tokeniser.skipSelfClosingTags();   
if (tag.isSelfClosing()) tokeniser.addStartTag();   
if (tag.isSelfClosing()) tokeniser.setUnknownTag();   
if (tag.isSelfClosing()) tokeniser.addSelfClosingNode();   
if (tag.isSelfClosing()) tokeniser.emptyTag();   
if (tag.isSelfClosing()) tokeniser.skipToken();   
if (tag.isSelfClosing()) tokeniser.markTagged();   
if (tag.isSelfClosing()) tokeniser.AcknowledgeSelfClosingFlag();   
if (tag.isSelfClosing()) tokeniser.cleanUp();   
if (tag.isSelfClosing()) tokeniser.selfClosed();   
if (tag.isSelfClosing()) tokeniser.setSelfClosingTag();   
if (tag.isSelfClosing()) tokeniser.ACKNOWLEDGE();   
if (tag.isSelfClosing()) tokeniser.markEndTag();   
if (tag.isSelfClosing()) tokeniser.insertSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (tag.isKnownTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (tag.isKnownTag() { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isKnownTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} })) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} if (tag.isKnownTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isKnownTag() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isKnownTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else (if (tag.isKnownTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else { if (tag.isKnownTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {})) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (tag.isUnknownTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else ( )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isKnownTag() { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else if (tag.isKnownTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (tag.isKnownTag() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else { if (tag.isKnownTag() { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isKnownTag() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isUnknownTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isSelfClosing() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else { ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (tag.isKnownTag() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isKnownTag() { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else { ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (tag.isKnownTag() { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isKnownTag()) { (()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (!tag.isKnownTag() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} if (tag.isKnownTag() { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { })) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} if (tag.isKnownTag()) { (()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}  ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else (()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isKnownTag())) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isSelfClosing()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { (()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} if (tag.isSelfClosing() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (!tag.isSelfClosing() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else ({)) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} if (tag.isSelfClosing()) { ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} if (tag.isUnknownTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} (else)) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else{ if (tag.isKnownTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else if (tag.isKnownTag() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (tag.isKnownTag() { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else {)) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} if (tag.isKnownTag() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isSelfClosing() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} if (tag.isKnownTag()) { ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else{ if (tag.isKnownTag() { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isUnknownTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else (if (tag.isKnownTag() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (tag.isUnknownTag() { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { })) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else if (tag.isKnownTag() { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isUnknownTag() { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (!tag.isKnownTag() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} if (tag.isSelfClosing()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} if (!tag.isSelfClosing() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else{ ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else (if (tag.isKnownTag())) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isKnownTag()) { ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} if (tag.isSelfClosing()) { (()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isKnownTag())) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else{ ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (!tag.isKnownTag() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (!tag.isKnownTag())) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (tag.isKnownTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else { if (tag.isUnknownTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isSelfClosing()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isKnownTag()) { ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else (if (tag.isKnownTag()))) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (!tag.isKnownTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} if (tag.isSelfClosing()) { ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else if (tag.isUnknownTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isKnownTag()) { (()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (!tag.isSelfClosing() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else { if (tag.isKnownTag() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} if (tag.isKnownTag()) { ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isKnownTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else (if (tag.isKnownTag()) {)) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isKnownTag() { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else insertNode(el)) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isSelfClosing()) { (()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isKnownTag() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else if (tag.isSelfClosing() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (tag.isSelfClosing() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else (if (tag.isKnownTag)) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else (if (tag.isUnknownTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else if (tag.isKnownTag()) { (()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (tag.isKnownTag)) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (!tag.isKnownTag() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (tag.isKnownTag())) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else {)) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else if (!tag.isKnownTag() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isSelfClosing()) { (()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isUnknownTag()) { (()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else {})) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else)) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else (if (!tag.isKnownTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else if (tag.isKnownTag())) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { ((Element) el)) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isKnownTag() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (tag.isKnownTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { }})) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (!tag.isKnownTag())) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else (if (tag.isKnownTag()) )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { })) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (tag.isKnownTag()) {)) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else (tag.isKnownTag() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else if (tag.isSelfClosing()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (tag.isKnownTag()) { ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (tag.isSelfClosing() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isUnknownTag() { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} if (tag.isSelfClosing()) ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (tag.isKnownTag()) {)) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (tag.isKnownTag())) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { })) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isUnknownTag() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isKnownTag() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isSelfClosing()) { ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (tag.isKnownTag() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} if (!tag.isKnownTag() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isSelfClosing()) { ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}(;)) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (tag.isTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} if (tag.isKnownTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else if (!tag.isSelfClosing() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { ((Element)) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} if (tag.isUnknownTag()) { (()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (tag.isKnownTag() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isUnknownTag()) { ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (tag.isSelfClosing()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else { })) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} if (tag.isUnknownTag()) { ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isSelfClosing()) { ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isKnownTag()) ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (tag.isKnownTag()) ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (tag.isTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else{)) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (!tag.isSelfClosing())) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else {)) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} })) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isKnownTag()) { ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (!tag.isKnownTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} if (tag.isUnknownTag() { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (!tag.isKnownTag()) { (()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}  })) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isKnownTag()) { ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (tag.isKnownTag() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else ( )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else (if (!tag.isKnownTag())) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} if (tag.isKnownTag())) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (tag.isKnownTag())) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else (if (!tag.isKnownTag()))) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else { (()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (!tag.isKnownTag())) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else (if (tag.isSelfClosing()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} if (tag.isSelfClosing())) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else{ if (tag.isUnknownTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isSelfClosing()) { ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else { if (tag.isKnownTag() { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else ( ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { (()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else (if (tag.isSelfClosing() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (!tag.isKnownTag())) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} if (tag.isUnknownTag()) { ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else if (tag.isTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (!tag.isSelfClosing() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (tag.isKnownTag() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (!tag.isKnownTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (!(tag instanceof Tag)) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if ((tag.isKnownTag()))) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else (if (!tag.isKnownTag() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (tag.isKnownTag())) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isSelfClosing())) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else if (tag.isUnknownTag() { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else (if (tag.isKnownTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isTag()) { (()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isKnownTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else { if (tag.isUnknownTag() { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if ((tag == null)) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else (if (tag.isKnownTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else if (tag.isKnownTag()) { ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isUnknownTag()) { ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else if (!tag.isKnownTag())) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} if (!tag.isSelfClosing())) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isSelfClosing()) ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else( )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isKnownTag)) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (tag.isKnownTag()) )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else (if (tag.isSelfClosing())) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (tag.isKnownTag()) {})) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { ((Element)el)) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}(else)) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (!tag.isSelfClosing())) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else if (tag.isKnownTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else ({)) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else {  })) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (!tag.isKnownTag()) { ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else (tag.isKnownTag())) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (!(tag instanceof Element)) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else (tag.isKnownTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (tag.isSelfClosing() { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} if (tag.isTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else if (!tag.isKnownTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else if (tag.isKnownTag() { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else (if (!tag.isSelfClosing())) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (tag.isKnownTag()) )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else{ if (tag.isKnownTag() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} if (tag.isKnownTag() { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else { if (!tag.isKnownTag() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if ((tag.isKnownTag()) )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else (if (!tag.isKnownTag)) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} if (tag.isTag()) { ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isSelfClosing() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else if (tag.isKnownTag()) { ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else (tag.isKnownTag() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (tag.isSelfClosing())) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} if (tag.isKnownTag()) ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isKnownTag() { (()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else (()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else if (tag.isSelfClosing()) { (()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isKnownTag)) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isSelfClosing() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isKnownTag() { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (tag.isKnownTag() {)) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else (if (!tag.isKnownTag()) {)) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else if (tag.isUnknownTag()) { (()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else {}})) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { <mask3> })) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else { })) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} if (!tag.isKnownTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (tag.isUnknownTag()) { ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else{ ()) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else { if (tag.isKnownTag() {)) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {}else if (tag.isKnownTag() )) tokeniser.acknowledgeSelfClosingFlag();   
)) tokeniser.acknowledgeSelfClosingFlag(); {} else (if (tag.isTag()) { )) tokeniser.acknowledgeSelfClosingFlag();   
); {} ();   
); {} );   
); {} });   
); {} insertNode(el);   
); {} else { ();   
); {} else { );   
); {} else { );   
); {} return el; });   
); {} else { ();   
); {} else insertNode(el);   
); {} return el;);   
); {});   
); {} ();   
); {} else insertNode(el);   
); {} return (el);   
); {}  ();   
); {} return el);   
); {} );   
); {}else { );   
); {}();   
); {} else ();   
); {}else { ();   
); {} insertNode(tag);   
); {} else { insertNode(el);   
); {} return el; );   
); {} },);   
); {} };);   
); {} else { ();   
); {} else insertNode(tag);   
); {}(tag);   
); {} }});   
); {} appendNode(el);   
); {}  insertNode(el);   
); {} append(el);   
); {} (el);   
); {} return(el);   
); {} <mask3> );   
); {} else { insertNode(el);   
); {} else { ();   
); {} (tag);   
); {} return insertNode(el);   
); {} ;);   
); {} push(el);   
); {} insertElement(el);   
); {} else { ;);   
); {}else{ );   
); {}  ();   
); {} else { };);   
); {} else ();   
); {} });   
); {} else ();   
); {} else insertNode(tag);   
); {} addElement(el);   
); {} ;);   
); {}else{ ();   
); {} else { };);   
); {} else { ; });   
); {}  });   
); {} else { insertNode(el);   
); {}(el);   
); {} return new Element(tag);   
); {} add(el);   
); {} return $(el);   
); {} else {);   
); {} else ();   
); {}  );   
); {} (tag);   
); {} removeNode(el);   
); {} else insertNode(null);   
); {} appendChild(el);   
); {} insertEmpty(startTag);   
); {} }.);   
); {} else{ ();   
); {} else { ;);   
); {} deleteNode(el);   
); {} else { });   
); {} else { ; });   
); {} else);   
); {} else { (el);   
); {} insertAfter(el);   
); {}   );   
); {} insertTag(el);   
); {}else insertNode(el);   
); {} else { ; });   
); {} insertEmpty(tag);   
); {} addNode(el);   
); {}else ();   
); {} else insertNode(el);   
); {} else { insertNode(tag);   
); {}  );   
); {} else { });   
); {} else { }});   
); {} }(startTag);   
); {} (el);   
); {} element(el);   
); {} return null; });   
); {} return el; },);   
); {}else ();   
); {}  return el;);   
); {} else { ; });   
); {} else{ );   
); {} insert(el);   
); {} remove(el);   
); {} else { (););   
); {} else {);   
); {}  return el; });   
); {} //else { );   
); {}else { insertNode(el);   
); {} setNode(el);   
); {} return el(null);   
); {} insertNode(null);   
); {} else insertNode(null);   
); {}else { ();   
); {} // });   
); {} else { <mask3> );   
); {}});   
); {}(;);   
); {} //);   
); {} else { (); });   
); {} endTag(el);   
); {} return el(tag);   
); {}$);   
); {} end);   
); {} indent(el);   
); {} return (el);   
); {} endif);   
); {} text(el);   
); {} node(el);   
); {} })(startTag);   
); {} else { <mask3> });   
); {} else{ insertNode(el);   
); {}.);   
); {} (default);   
); {} else { (el);   
); {} insertEndTag(el);   
); {}else { insertNode(el);   
); {}(_);   
); {} ( );   
); {} return element(el);   
); {} else insertTag(el);   
); {} }(tag);   
); {}}});   
); {} else { ;();   
); {} comment(el);   
); {} else insertTag(tag);   
); {} else { (); });   
); {}else { };);   
); {} insertTag(tag);   
); {}else();   
); {}  return (el);   
); {} while (true);   
); {} else { }});   
); {} else insert(el);   
); {} (element);   
); {} delete(el);   
); {} addNode(el);   
); {} addAttributes(el);   
); {} (0);   
); {} (end);   
); {} tag.insertNode(el);   
); {} return el; });   
); {} replace(el);   
); {} else (el);   
); {}(element);   
); {} (else);   
); {} else { insertElement(el);   
); {} init(el);   
); {} emitEmpty(el);   
); {} appendTag(el);   
); {} node.appendChild(el);   
); {} tag(el);   
); {} insertComment(el);   
); {}else { ;);   
); {} else { (););   
); {} (null);   
); {} else { setNode(el);   
); {} appendElement(el);   
); {} else insertChild(el);   
); {} tag.setAttributes(el);   
); {} return el; }(startTag);   
); {} <mask3> return el;);   
); {} return el; ();   
); {} else { insertNode(tag);   
); {} return createElement(el);   
); {} setSelfClosing(true);   
); {} @param startTag);   
); {} return el.(Element);   
); {} addEndTag(el);   
); {} else insertNode(tag);   
); {} else { append(el);   
); {} addTag(el);   
); {} else insertEndTag(tag);   
); {} insertElement(el);   
); {}else { ; });   
); {} else insertNode(el);   
); {} else { text(el);   
); {} else { (tag);   
); {} newElement(el);   
); {} else { return (el);   
); {} setSelfClosing(false);   
); {} else { ((Element) el);   
); {} else {  );   
); {} else { push(el);   
); {} ((Element) el);   
); {} else { appendNode(el);   
); {} //else insertNode(el);   
); {} insertChild(el);   
); {}  insertNode(tag);   
); {} else { insertNode(null);   
); {} else { ( ;);   
); {} else { (); });   
); {}  return el; );   
); {} return el;  });   
); {} else { //);   
); {} else { (0);   
); {} //else { ();   
); {} replaceNode(el);   
); {} else { ; ();   
); {} else { insertNode(tag);   
); {} return el; };);   
); {} else {  ();   
); {} else { (); };);   
); {} return createElement(tag);   
); {} else { })(startTag);   
); {}else { ; });   
); {} else { ; };);   
); {} else { return (el);   
); {} return emptyElement(el);   
); {} else { <mask3> });   
); {} else { //();   
); {} else { add(el);   
); {} else { <mask1> );   
); {} else { ( );   
); {} else { <mask2> );   
); {} else { <mask1> });   
); {} else { (void);   
); {} else insertTag(tag);   
); {} insertNode(el, null);   
); {} else { text(tag);   
); {} else { ((Element)el);   
); {} else { (); );   
); {} return el; }(tag);   
); {} else { ();   
); {} else { (); {});   
); {} insertNode(tag, null);   
); {} else insertNode(null);   
); {} else{ insertNode(tag);   
); {} else { ; );   
); {} else { <mask3> };);   
); {} else { alert(tag);   
if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (el.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tokeniser.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (startTag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tagName.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if ( tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (endTag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (this.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (attr.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (node.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (element.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (e.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (parent.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tags.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if ( !tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.parent.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (baseUri.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (null != tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (ent.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (Tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (value.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tagname.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (component.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (data.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (null == tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (text.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (!tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (entry.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.value.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (selfClosing.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tt.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (state.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tok.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tokentype.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (elem.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (elm.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (entity.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (id.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (trigger.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (xml.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (TAG.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (false && tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (rule.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (mark.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (dtd.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (prefix.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (dom.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if ( tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (attrib.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (not tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (AST#unary_expression#Left!tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (selfClosing.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (t.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.child.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if ( el.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (root.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (arg.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (plugin.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (sibling.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if ( startTag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (attribute.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (item.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (pair.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (label.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (TagToken.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (val.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.tagName.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (false) tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (info.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (handler.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (entireTag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.children.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (parser.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (block.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (appended.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (child.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (comment.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (not.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (etag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag == startTag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (html.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (method.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (model.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.selfClosing.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (currentToken.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (et.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (em.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (frame.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (knowTag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if ( ! tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (slot.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (el.parent.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (extender.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (el.tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (atom.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (xmlTag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (key.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.attributes.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (flag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (word.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (reset.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (settings.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (atomix.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (true.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (selfClosingTag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (ext.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (type.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if ( tokeniser.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (pre.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (entire.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (v.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (true && tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tree.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (openTag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (attributes.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag .isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (list.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (group.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (attrs.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (debug.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tokenType.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (image.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (widget.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag != startTag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (name.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (marker.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (protocol.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (lang.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (thisTag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (notTag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (ref.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (triggerTag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (setTag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (style.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (icon.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.content.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (stack.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tokenizer.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (typeof tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (content.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (buffer.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (link.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (options.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (knownTag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tx.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (empty.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.element.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (evt.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (env.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (ul.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (target.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (this.tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (el.selfClosing.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (author.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (utils.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (null == el.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (span.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (ctx.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (adapter.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (startTagToken.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (file.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (thing.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (AST#member_expression#Lefttag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (Token.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (elt.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (htmlTag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (prev.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (markTag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (ok.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (dir.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (field.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (edge.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (AST#method_invocation#Lefttag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (attrName.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (atomik.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tmp.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (doc.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (true) tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (selfClosingTag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (config.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (script.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tagged.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (stream.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (stat.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (object.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (firstChild.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tokiser.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (opt.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (atomTag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag != tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (body.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tokens.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (//tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (false == tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (part.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (x.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (args.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (fieldset.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (k.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag == tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (option.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (ele.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (  tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (owner.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (img.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (er.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (editor.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tagiser.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (basicTag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (subtag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (closeTag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.tags.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag = tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (eTag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (arg1.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (0 == tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (isKnownTag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (startTag.parent.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (entertag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.node.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (0 != tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (el.element.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (false || tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag == this.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (startTag.attributes.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (el.content.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.kind.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.localName.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.attrs.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (enters.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (el.node.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (el != tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (el.firstChild.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag..isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (cardinality.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag && tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.firstChild.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (el.tagName.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (emmet.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (AST#binary_expression#Lefttag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.root.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (startTag.tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.owner.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (entrez.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (selfClosing && tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (el<mask5>}.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (el.children.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (el<mask1>tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())   tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  tagiser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())    tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())     tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())      tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())        tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  return tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())             tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())         tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  { tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())   tagiser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  tagiser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())          tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())       tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())            tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing()) 	tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  tag.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  	tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())           tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  return tag.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  node.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  //tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  tokenizer.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())              tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  // tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())                 tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  tokenString.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  tokiser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  tokens.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  { tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  parser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing()) .acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  this.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())   //tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())   // tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  return el;.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())   	tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  element.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())                     tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  it.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())    tagiser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())               tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  attribute.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  startTagiser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())   return tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  getTokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())               tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  rule.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())           tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())       tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  //tagiser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  Tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  startTag.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())     	tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  itemiser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())     tagiser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  nodeiser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  	    tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())                tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  lexer.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  commentiser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  scanner.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())                         tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())                             tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())    //tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())    // tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  return el.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())      tagiser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  el.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  $tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  id.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  parent.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  state.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  //tag.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())   node.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())    tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())   tag.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  parameteriser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  tagiser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  reader.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  value.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing()) Tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  marker.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())        tagiser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())    return tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  !tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  return tag;.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  	tagiser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  	  tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  editor.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  (tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  tt.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  component.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing()) 	tagiser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())            tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())      tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())                tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  setTokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  debug.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  return tagiser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing()) 			tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  helper.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())             tagiser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  handler.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())                          tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  newTokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  tree.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  tagger.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing()) 	    tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())   tokens.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  symbolizer.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  doc.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  { tagiser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  plugin.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())   	tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())      //tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  ;.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  sequencer.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  event.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())                   tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  tk.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  image.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  _tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  //tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  tagName.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())                                 tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  endTag.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())     tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  text.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  entity.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  advance.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  tok.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  selfClosing.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())          tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  .acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  {tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  tokenType.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  this.tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  atomiser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing()) 		tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  pos.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())   //tagiser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())      // tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())              tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())                            tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing()) 	  tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())                        tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  slot.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  }.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  generator.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())     return tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  knownTag.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  advertiser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  utils.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())   tokenizer.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  flag.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())       tagiser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  nextToken.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  this tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())   return tag.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  field.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())         tagiser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  characteriser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())         tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  feature.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  the tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  tag.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  block.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())   parser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  Tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  elementiser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())   element.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())   ;.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  emitter.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  widget.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  //tagiser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  tags.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  teaser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  return tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  paramiser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  return node.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  option.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  mark.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  	tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  buffer.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  user.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  stream.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  entityiser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  document.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  timer.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  authoriser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  blocker.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  writer.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  data.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())   Tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())                                     tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())      return tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  attr.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  keniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  object.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  // tag.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())                  tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())          tagiser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())   this.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  util.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  builder.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  markTag.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())        //tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  tokentype.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  	   tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())   tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())   	  tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  return null;.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  element.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())     //tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  		  tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  	      tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  return startTag.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  setTag.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  parseTag.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  selfClosingTokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  selfClosingTag.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  node.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  setSelfClosing.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  .acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())   	tagiser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  seperator.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  no tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())        // tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  element.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  !tag.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  return element.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  markSelfClosing.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())     // tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  return;.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  return element;.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  // tagiser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())   { tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  // tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())    tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())   {.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())   nodeiser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  return  tokeniser.acknowledgeSelfClosingFlag();   
if (tag.isSelfClosing())  break;.acknowledgeSelfClosingFlag();   
if(tag==null){return  null;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  el;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return ;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return null;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  false;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  null;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  el;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return el;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return ; };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  null; };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  new Element;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  element;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  tag;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  undefined;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return ;};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return ;};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  ;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  true;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  el; };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return };;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  empty;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  void;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  nil;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return false;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  startTag;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  null;};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  NULL;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return el;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  EMPTY;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  Element;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  null;};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  false;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  newElement;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  new Element();;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  "";;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  node;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return }};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return El;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  this;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return }else;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  null};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  -1;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  new Element();} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return   ;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  false; };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  html;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  document;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return } else;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return tag;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  0;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return null;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  new element;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  "";};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  new EmptyElement;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return Element;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  ;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  ;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  true;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  el;};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  emptyElement;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  tokeniser;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  createElement;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return [];} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  newElement();;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return } else {;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  elem;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return element;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  doc;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return   el;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return />;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  new Empty;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  "";} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return NULL;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  String;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  parent;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return [];;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return ;}};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  tagName;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  new empty;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  e;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return true;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  Ellipsis;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  elt;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  root;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  {};;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return   null;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  ele;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  endTag;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return } else;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  baseUri;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  text;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return new Element;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return "";;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return "";};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return "/>;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return ;  };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  component;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  xml;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return ;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return null; };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  element;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  slot;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return el; };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  -;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  &nbsp;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  &nbsp;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return Tag;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  self;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  Element.NULL;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  [];;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  '';;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return addElement;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  $;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  entity;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return empty;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  false;};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return document;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return undefined;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  E;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  null ;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return nil;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return startTag;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  Tag.NULL;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  true; };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  alert;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  type;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  attr;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return newElement;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  nil;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return *;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return false;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return    el;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return    };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return EndTag;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  null };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return (el);;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return 0;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return   };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  newElement();} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return null;};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return "";} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  Tag;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  '';};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  tag;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  elm;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return ;} return el;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return ();;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return StartTag;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  }};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  ;};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return } return el;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  new Tag;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  empty element;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  false;};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  Empty;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return _null;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  el};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  window;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return ;} else;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  elements;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return :;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return }return el;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return null};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  [];} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return -;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  null};;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return 空;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  str;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  null };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return |null;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return tagName;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return   false;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return node;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return -1;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return    null;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return }else {;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  undef;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  id;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  };;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  ET;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  inline;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return El;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return ; };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  undefined;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  new emptyElement;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  Object;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  new empty element;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  ""; };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return {};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  rootNode;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  null ;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  comment;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  createEmpty;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return null;};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  empty;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  Html;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  XML;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  tags;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  string;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  nil; };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  EmptyElement;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  value;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  object;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  nothing;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  child;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  ele;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  attributes;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  el};;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return _;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return ; ;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return ;}};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  el;};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  TAG;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  null}else;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  createElement();;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  ELEMENT;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  makeEmpty;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return [];};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  end;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  None;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  addEmpty;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  startTag;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  block;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return     ;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  silently;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return ; } ;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  newEmpty;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  element; };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  createElement();} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  new Document;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  null; ;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  new NullElement;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  new Empty();;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return new Element();;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  $empty;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return      el;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  document.documentElement;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return     el;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  new Node;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return false; };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return } ;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return }else{;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return (null);;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  0;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  Element.EMPTY;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return el;};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){return  undefined; };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=null; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=new Tag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=tag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Tag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=startTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=this; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=createTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=new Element; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag= null; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=newTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=createElement; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=defaultTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=root; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=emptyTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag= new Tag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=tagName; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=NULL; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=undefined; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=empty; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=addElement; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Empty; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=new Tag(); } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=factory; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=UNDEFINED; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=StartTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag= startTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=init; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Element; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=TAG; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=element; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Base; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag= tag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=default; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Tag.UNKNOWN; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=tokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=new tag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=document; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=EMPTY; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=StartElement; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=parent; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=openTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=el; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=NewTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=getTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=startElement; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=makeTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=newElement; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=initTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=tagFactory; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Undefined; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=setTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Undef; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=BaseTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=getDefaultTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Tag.NULL; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=DefaultTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Default; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Tag.ROOT; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag= this; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=doc; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Tag.Unknown; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=settings; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=EmptyTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=new; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=unknownTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=xml; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag= Tag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=nil; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=new UnknownTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=baseTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=EndTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=reset; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=rootTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=DEFAULT; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=NullTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag= createElement; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=ROOT; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=createUnknownTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=UndefinedTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=UnknownTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=currentTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=addTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Factory; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag= new Element; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=NewElement; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=false; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=new DefaultTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=firstChild; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Document; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=next; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=0; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=head; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Anonymous; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Tag.NONE; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=start; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=add; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=marker; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=getRootTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=node; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Root; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=undef; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=dom; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Tag.EMPTY; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=XML; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=tag1; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag= Undef; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=current; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=new EmptyTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag= createTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=e; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=parseTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Null; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=DEFAULT_TAG; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Entity; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag= empty; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Token; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=getNextTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=createDefaultTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Object; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=dummy; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=DOM; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=tagDefault; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=New; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=buildTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=mainTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag= undefined; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=attr; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Void; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=new TagImpl; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=createNewTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Tag.SELF; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=entity; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=rootNode; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=TAG_UNKNOWN; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=create; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=AnonymousTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=UNKNOWN; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=findTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Symbol; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=new Tag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=attrs; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=VoidTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=UndefTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=true; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=document.createElement; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=openElements; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=tagByName; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=self; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag= new Tag(); } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=nextTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag= EMPTY; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=top; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=resetTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=tt; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=startTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=rootElement; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=xxx; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=attributes; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Tag.empty; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=addAttribute; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=NULL_TAG; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=newInstance; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=TagName; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag= element; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=emptyElement; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=main; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=atom; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=tok; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=createKnownTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=new SimpleElement; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Tag.UNDEFINED; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=BaseElement; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=createTagName; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Doc; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=tagTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=newNode; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=tags; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag= root; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=name; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=tagImpl; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=addNewTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=getTagName; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=global; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=settings.tag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag= Empty; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=tag.parent; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=dtd; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=new Empty; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=unknown; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=a; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=base; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag= emptyTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=X; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=defaultTagName; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=i; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=UI; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag= defaultTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag= Root; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=createEmptyTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag= tagName; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=frameset; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=entry; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=m; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Node; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=setKnownTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=1; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=initial; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=html; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag= NULL; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=NEW; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=elem; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag= tokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=insertEmpty; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=dummyTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=BASE; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=tag.tag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=text; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Me; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Window; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=tag0; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=addNew; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Jsoup; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Model; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=t; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=EmptyElement; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=new RootTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=selfClosingTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=baseUri; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=nullTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=tagNew; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=generateTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Token.SELF; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=new Element(); } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=TagImpl; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=SelfClosingTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=TAG_UNDEFINED; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=createEmpty; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=setUnknownTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=addEmpty; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag= Tag.UNKNOWN; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=new BasicTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Token.UNKNOWN; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=new Root; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Tag.DEFAULT; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=TAG_ROOT; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Tag.ANY; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=makeNewTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=Tag.VOID; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tag==null){ tag=addSelfClosing; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  null;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  el;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return ;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  false;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  el;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return ; };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return el;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  null;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return null;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  tag;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  element;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  new Element;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  undefined;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  null; };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return ;};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  true;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  ;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return ;};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  nil;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  void;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  el; };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  empty;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  startTag;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return };;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  false;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return false;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  NULL;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return el;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  Element;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return   ;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  "";;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  EMPTY;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  tokeniser;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  this;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  node;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  newElement;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return El;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  -1;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  new Element();;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  ;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  html;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  false; };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  document;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return }};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return   el;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  ;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  0;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return tag;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  null;};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  new Element();} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  new element;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return }else;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  null;};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return } else;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  emptyElement;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return   null;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return ;  };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  new EmptyElement;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  true;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return Element;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  null};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  ele;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return   };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  elem;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return } else {;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  Ellipsis;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return ;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return [];;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  {};;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  tagName;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  component;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  '';;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  element;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  elt;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  el;};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  new Empty;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  endTag;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  parent;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  String;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  self;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  doc;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  newElement();;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  [];;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  slot;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return    };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return />;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  entity;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  createElement;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  new empty;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return ;}};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return ; ;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  Tag;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return null;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  e;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return [];} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return true;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  root;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  tag;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  $;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return -;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return element;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return "";;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return   false;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return -1;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  attr;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  xml;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  text;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  "";};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return (el);;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  E;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  baseUri;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return ();;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return :;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  alert;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return ; };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return NULL;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return StartTag;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  ;};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return Tag;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  type;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return undefined;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  window;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return ; } ;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  null ;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return EndTag;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return startTag;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  true; };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return nil;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  "";} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  elm;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return *;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return    el;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  undef;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  new Tag;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return new Element;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return } else;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return ;} return el;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  TAG;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  false;};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return el; };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  id;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  Object;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return .;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  object;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  };;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  tags;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  ele;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  nothing;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  str;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  &nbsp;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  inline;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return ;AST#return_statement#Right;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  elements;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  &nbsp;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return EL;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  &el;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  None;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  nil;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return 0;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  end;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return document;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  empty element;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  el};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  buffer;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  undefined;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  }};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return false;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  new empty element;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return ;   };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return }else {;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return     ;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  value;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  element; };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return empty;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return 空;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  child;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return ;} else;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  comment;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  Empty;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  immediate;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  silently;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return El;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return      el;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  !el;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  appender;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return ; ;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return (null);;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  label;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  XML;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  super;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  wrapper;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  block;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  el; ;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  newElement();} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  er;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  unknown;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  ET;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return _;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return newElement;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  startTag;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  empty;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return "/>;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  ELEMENT;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  null ;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  error;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  new emptyElement;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  Html;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return     el;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  string;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  none;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return 	el;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return _null;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  data;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  helper;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return !el;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  EmptyElement;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return /;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return |null;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  attributes;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return addElement;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return    null;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  dom;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  1;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return 	;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return ;}};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  null };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return } ;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  '';};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return   element;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return   el;;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  new Empty();;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return "";};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  false;};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  new Document;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  Tag.EMPTY;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return       };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  new Node;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return ;AST#return_statement#Right};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  Tag.NULL;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  el;};} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  $empty;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return ; } };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  null; ;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  Element.NULL;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return null; };} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  newEmpty;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){return  tag.tag;} if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new Tokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=tag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=null; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=Tag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=newTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new Tag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=createTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= new Tokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=tokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new DefaultTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new Parser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new Element; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new TagTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=Tokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=this; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= tag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new Tokeniser(); } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new Tokenizer; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= null; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=factory; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=defaultTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=startTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new tokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new TagScanner; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new XMLTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new Lexer; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new XmlTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= new Tag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=TAG; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new SimpleTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new StandardTokenizer; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= tokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= createTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= Tag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=Factory; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= new Element; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=tagName; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=xml; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= new Tokeniser(); } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new TagIt; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= new Parser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new HtmlTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new TagList; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new ParserTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=getTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=tag.tokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new HtmlTokenizer; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new Tag(); }; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new TagTokenizer; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new StandardTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=newTokenizer; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=getTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new InternalTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=makeTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= this; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new Parser(); }; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=newElement; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= new DefaultTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new HTMLPurifier; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new TokenIterator; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new InternalTokenizer; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=init; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=TagIt; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=default; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=document; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new NullTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= new Tokenizer; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new TagParser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new TagIterator; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=StartTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new Object; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=createElement; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new XmlTokenizer; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=tokenizer; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new Tagiser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new Grammar; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=create; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=reset; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new Tagger; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=newTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= new TagTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=newTagToken; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=DefaultTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new Tag(); } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new StringReader; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= new Lexer; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=createTokenizer; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new DefaultTagToken; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= new Parser(); }; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new SimpleTokenizer; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=parent; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=doc; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new Document; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= factory; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=createTokeniser(); } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= newTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= new StandardTokenizer; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new nullTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= new Tag(); }; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new WordTokenizer; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new TokeniserImpl; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=Tag.getInstance; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new SimpleXMLElement; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=createDefaultTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=Default; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=NewTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new EmptyTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new DefaultTokenizer; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=openTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=next; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=el; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= new SimpleTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new Tokens; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=eat; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=New; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new TagManager; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new StringTokenizer; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=start; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new Entity; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=setTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new Element(); }; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= new TagScanner; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=NULL; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=tokenType; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=undefined; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new Element(); } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new Default; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new tag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=true; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= new tokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=newTokeniser(); } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=XML; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=node; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=TagTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new StartTagToken; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new XMLTokenizer; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new SimpleElement; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=false; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new Xml; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=g; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=element; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=getTagTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=empty; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=DEFAULT; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new Tidy; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new element; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new HTMLTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new selfClosing; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=newDefaultTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=parser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=Empty; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=open; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new NoTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new Tree; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new Reader; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new Tokeniser();; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=e; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new XmlPullParser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= Tokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new Parser(); } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new HashMap; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=Document; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new TagImpl; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=html; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new XMLElement; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=i; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= defaultTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= new TagIt; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= new TokenIterator; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new Tokenizer(); }; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new Scanner; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=tags; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= new XMLTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new TagSet; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= new HtmlTokenizer; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= tag.tokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= new XmlTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new ElementTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new TagInfo; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new ArrayList; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new Tags; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new TokenScanner; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new Tokenizer(); } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new Sequence; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=tokeniserFactory; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new TagId; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new selfClosingTokenizer; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= new TagList; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new ParseTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=tag.getTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new TagValue; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new ParsingTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new BasicTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new DocumentTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new ElementScanner; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=createTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new TagFinder; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new TagLexer; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new UnknownTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= new Tag(); } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= new ParserTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= new HtmlTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new SAXTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= new TagIterator; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new selfClosingTagToken; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new MyTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new DOMTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= new StandardTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new DocumentScanner; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new PlainTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= new Tokenizer(); }; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new StartElement; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= new InternalTokenizer; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= new InternalTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new SequenceTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new StringTokenizer; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new AttributeList; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= new TagTokenizer; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new ITokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=Tokeniser.NULL; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new ErrorTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new CommonTokenStream; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new ObjectTokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new selfClosingScanner; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=  new Tokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new selfClosingTag; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new _Tokeniser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new Object(); }; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= new Grammar; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new TagType; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= new Element(); } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new XMLElem; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new TagI; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= createTokeniser(); } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new TagReader; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new TagTokens; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new TagInit; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=TokeniserFactory; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new PennTree; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= new Tokenizer(); } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new Indicator; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=Tokeniser.create; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new Tokeniser(){; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=DEFAULT_TOKENIZER; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=Tag.create; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser= new TagParser; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new TagDefault; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=Tokeniser.getInstance; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(tokeniser==null){ tokeniser=new TOML; } if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag();   
if(debug){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tokeniser){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(false){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(selfClosing){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(true){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(DEBUG){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(settings){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tag){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tag.isSelfClosing()){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tokeniser!=null){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(isSelfClosing){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tokeniser != null){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(selfClosing){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tag.isKnownTag()){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(parent){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(strict){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tag.isSelfClosing){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tag.selfClosing){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tokeniser==null){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(null){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(isSelfClosing()){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(node){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(logger){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(el){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(xml){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(allowSelfClosing){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(options){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(value){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(log){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if( tokeniser){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(autoClose){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tagName){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(this){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(prefix){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(debugMode){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tag!=null){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(verbose){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(el!=null){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(settings!=null){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(selfClosingTag){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tags){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(indent){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(inline){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(element){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(empty){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(settings != null){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(callback){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if( false){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(baseUri){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(handler){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if( true){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tag==null){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(selfClosingFlag){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(settings.selfClosing){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tag != null){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(knownTag){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(el==null){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(text){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(selfClosingTag){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tokeniser.isSelfClosing){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tokeniser == null){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tag.isKnownTag){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(ignoreSelfClosing){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(isSelfClosing(tag)){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(isEmpty){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(reset){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(isSelfClosingTag){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(root){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(setSelfClosing){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(1){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(settings.selfClosing){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(isSelfClosingFlag){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(attributes){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(init){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(baseUri != null){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tokeniser.selfClosing){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(comment){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if( debug){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(known){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(id){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(state){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(ok){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(startTag){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(normalize){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(includeSelfClosing){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(data){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tag.setSelfClosing){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(startTag.selfClosing){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tokens){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(baseUri!=null){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(trace){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(keepEmpty){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(addSelfClosing){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if( isSelfClosing()){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(value!=null){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(checkSelfClosing){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if( !selfClosing){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tokeniser.debug){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(info){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tag.selfClosing){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tokeniser.selfClosing){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(content){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(selfClosingTags){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(el != null){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tagname){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(logger.isDebugEnabled()){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(selfClose){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(enabled){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(e){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tag.isSelfClosing())){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tag == null){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tag.isUnknownTag()){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(child){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(embed){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tokeniser.tokeniser){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(parser){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(validation){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(0){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(external){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if( tag.isSelfClosing()){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(isRootTag){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(anchor){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(hasChildren){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(protocol){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(ready){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tree){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(appended){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(startTag.isSelfClosing()){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(allowed){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(brackets){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if( tag.isKnownTag()){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(settings.allowSelfClosing){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(body){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(frameset){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(setting){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tokeniser.selfClosingFlag){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if( settings){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(inlineTags){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tag.hasSelfClosing()){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(config){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(explicit){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(result){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(value != null){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(encoding){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(Debug){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(silent){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(isKnownTag){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(standalone){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tag.isTag()){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(doc){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(mode){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tag.isKnownTag())){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(rule){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(Boolean){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(allowEmpty){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(args){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(always){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(el.isEmpty()){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(pre){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(context){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(keepSelfClosing){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(block){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(validate){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(checkTagName){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tt){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(filter){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(v){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(el == null){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(allowSelfClosingTags){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(marker){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(flush){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(clean){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(trigger){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(append){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(options.selfClosing){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(raw){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(local){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(openTag){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(global){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(hasSelfClosing){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(knownTags){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(mark){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(ctx){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(parent!=null){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(factory){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(dirty){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(null!=tag){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(merge){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tag.isEmpty()){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(validator){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tokeniser.allowSelfClosing){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(options.selfClosing){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(document){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(test){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(cache){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(ignoreSelfClosingTags){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(attr){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(builder){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(val){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(isOptional){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(html){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(isRoot){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(replacement){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(markSelfClosing){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tag.selfClosing()){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tokeniser!= null){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(settings.debug){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(settings==null){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(keepTags){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(target){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(setSelfClosingFlag){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tag.isTag())){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tokenize){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(warn){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(node != null){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(selfClosingAllowed){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if( selfClosing){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tag.isOpen()){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(value==null){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(selfClosed){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tokeniser !=null){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(checkTag){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(isAnonymous){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(null!=tokeniser){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(triggerSelfClosing){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(null != tokeniser){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tag.isValid()){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(el.isSelfClosing()){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(allowSelfClosingTag){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(emptyTag){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(autoCloseTags){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tag.isOpen){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if( isSelfClosing){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(hasSelfClosingTag){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(supportsSelfClosing){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(ignoreEmpty){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(parentTag){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tag.setSelfClosing()){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(isSelfClosing(tag){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(selfCloseTag){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(settings.isSelfClosing){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(useSelfClosing){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tokeniser!==null){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(tag.selfClosing()){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(thisTag){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(settings.autoSelfClosing){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(rootTag){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(isSelfClosingTag()){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(isComment){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
if(ignoreSelfClosingTag){ if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); {  
