;  
 return offset + length;  
 return length;  
 else;  
  @param value @param buf @param offset @param length @return;  
 return 0;  
 return value;  
  return offset + length;  
  return length;  
 ;  
 returns offset + length;  
 };  
  @param value @param offset @param length @return;  
int length;  
  return value;  
else;  
 return offset;  
 returns length;  
 else { return 0;  
 return length;  
 return -1;  
 return offset + length;  
  return 0;  
  @return;  
 @param value @param buf @param offset @param length @return;  
 return 0;  
int length = length;  
 else { return length;  
 //return offset + length;  
 */;  
 else { return 0;  
  @param value @param buf @param offset @param length @return int;  
 return length + offset;  
  @param value;  
 /*package;  
 export;  
  @param value @return;  
 formatLongBinary(value, buf, offset, length, negative);;  
 int offset = 0;  
 //return length;  
 int length = 0;  
  };  
  @param value @param buf @param offset @param length @param negative @return;  
  private static final long serialVersionUID = 1L;;  
 else { return value;  
 return offset+length;  
  @param value @param buf;  
 long;  
  @param value @param buf @param offset @param length  @return;  
  int length = 0;  
 formatLongBinary(value, buf, offset, length);;  
int length = 0;  
int offset = offset;  
 int length = 0;  
 else return 0;  
 return false;  
  @param value @param buf @return;  
 int length = length;  
 else { return value;  
 else return length;  
  @param value @param offset @param length @param negative @return;  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {     return formatLongBinary(value, buf, offset, length, false);   };  
int offset = 0;  
 return true;  
 else { return -1;  
 else { return length;  
 returns length + offset;  
 @param value @param offset @param length @return;  
  @param value @param buf @param offset @return;  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {         return formatLongBinary(value, buf, offset, length, false);     };  
 byte;  
 -----------------------------------------------------------------------;  
 int offset = 0;  
  return offset;  
 return null;  
 int length;  
  @param value @param buf @param offset @param length @return offset + length;  
 private static final long serialVersionUID = 1L;;  
 return offset + length + 1;  
int offset;  
return offset + length;  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {     return formatLongBinary(value, buf, offset, length, true);   };  
 else {;  
 format long;  
 ++;  
return length;  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {         return formatLongBinary(value, buf, offset, length, true);     };  
     return length;  
 else { return offset + length;  
 return value;  
 returns offset+length;  
  int offset = 0;  
 else;  
 return value + offset;  
  ++;  
@Trivial;  
  return -1;  
 --;  
  @param value @param buf @param offset @param length;  
 returns offset;  
  @return int;  
 return --length;  
  returns offset + length;  
 return -1;  
  @param value @param offset @param length @return int;  
 returns the length;  
 {;  
 else return -1;  
 returns -1;  
 //return value;  
 else { return -1;  
 );  
 returns value;  
  @param value  @return;  
 return offset;  
 return;  
  return length + offset;  
 -------------------------------------------------;  
 */;  
 short;  
 return length;  
.;  
 return length - offset;  
 length;  
@Deprecated;  
  ;  
int len;  
;;  
return 0;  
synchronized;  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length)     {         return formatLongBinary(value, buf, offset, length, false);     };  
 ;;  
public static int formatLongBinary(long value, final byte[] buf, final int offset, final int length) {     return formatLongBinary(value, buf, offset, length, false);   };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {     return formatLongBinary(value, buf, offset, length, 0);   };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {         return formatLongBinary(value, buf, offset, length, 0);     };  
public static int formatLongBinary(long value, final byte[] buf, final int offset, final int length) {         return formatLongBinary(value, buf, offset, length, false);     };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length)     {         return formatLongBinary(value, buf, offset, length, true);     };  
public static int formatLongBinary(long value, final byte[] buf, final int offset, final int length) {     return formatLongBinary(value, buf, offset, length, true);   };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) { 		return formatLongBinary(value, buf, offset, length, false); 	};  
public static int formatLongBinary(long value, final byte[] buf, final int offset, final int length) {         return formatLongBinary(value, buf, offset, length, true);     };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {         return formatLongBinary(value, buf, offset, length, negative);     };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {     return formatLongBinary(value, buf, offset, length, negative);   };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) { 		return formatLongBinary(value, buf, offset, length, true); 	};  
public static int formatLongBinary(final long value, final byte[] buf, final int offset) {         return formatLongBinary(value, buf, offset, length, false);     };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {         return formatLongOctalBytes(value, buf, offset, length, false);     };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset) {     return formatLongBinary(value, buf, offset, length, false);   };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {     return formatLongOctalBytes(value, buf, offset, length, false);   };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) { 	return formatLongBinary(value, buf, offset, length, false);     };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {         return formatLongOctalBytes(value, buf, offset, length, negative);     };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {         return formatLongBinary(value, buf, offset, length, false);     };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {     return formatLongOctalBytes(value, buf, offset, length, negative);   };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset) {         return formatLongBinary(value, buf, offset, length, true);     };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset) {     return formatLongBinary(value, buf, offset, length, true);   };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {         return formatLongBinary(value, buf, offset, length, true);     };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {     return formatLongOctalBytes(value, buf, offset, length);   };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {     return formatLongBinary(value, buf, offset, length, null);   };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) { 	return formatLongBinary(value, buf, offset, length, true);     };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {         return formatLongOctalBytes(value, buf, offset, length, true);     };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {         return formatLongOctalBytes(value, buf, offset, length);     };  
public static int formatLongBinary(long value, final byte[] buf, final int offset, final int length) {     return formatLongBinary(value, buf, offset, length, 0);   };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {         return formatLongBinary(value, buf, offset, length, null);     };  
public int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {     return formatLongBinary(value, buf, offset, length, false);   };  
public static int formatLongBinary(long value, final byte[] buf, final int offset, final int length)     {         return formatLongBinary(value, buf, offset, length, false);     };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length)     {         return formatLongBinary(value, buf, offset, length, 0);     };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {     return formatLongOctalBytes(value, buf, offset, length, true);   };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {         if (length < 9) {             return 0;  
public static int formatLongBinary(final long value, final byte[] buf,       final int offset, final int length) {     return formatLongBinary(value, buf, offset, length, false);   };  
public static final int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {         return formatLongBinary(value, buf, offset, length, false);     };  
public static int formatLongBinary(final long value, final byte[] buf,             final int offset, final int length) {         return formatLongBinary(value, buf, offset, length, false);     };  
public static int formatLongOctalOrBinaryBytes(final long value, final byte[] buf, final int offset, final int length) {     return formatLongBinary(value, buf, offset, length, false);   };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset,             final int length) {         return formatLongBinary(value, buf, offset, length, false);     };  
public static int formatLongBinary(long value, final byte[] buf, final int offset, final int length) {         return formatLongBinary(value, buf, offset, length, 0);     };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset,       final int length) {     return formatLongBinary(value, buf, offset, length, false);   };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {     return formatLongBinary(value, buf, offset, length, length);   };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {     return formatLongBinary(value, buf, offset, length);   };  
public int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {     return formatLongBinary(value, buf, offset, length, true);   };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) { 		return formatLongBinary(value, buf, offset, length, 0); 	};  
public static int formatLongOctalOrBinaryBytes(final long value, final byte[] buf, final int offset, final int length) {         return formatLongBinary(value, buf, offset, length, false);     };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) 	{ 		return formatLongBinary(value, buf, offset, length, false); 	};  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {     return formatLongBinary(value, buf, offset, length, -1);   };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {     return formatLongBinary(value, buf, offset, length, length, false);   };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) throws IOException {     return formatLongBinary(value, buf, offset, length, false);   };  
public static int formatLongBinary(long value, final byte[] buf, final int offset, final int length)     {         return formatLongBinary(value, buf, offset, length, true);     };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) { 	return formatLongBinary(value, buf, offset, length, false); };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {     return formatLongOctalBytes(value, buf, offset, length, 0);   };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length)   {     return formatLongBinary(value, buf, offset, length, false);   };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length)             throws IOException {         return formatLongBinary(value, buf, offset, length, false);     };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {         return formatLongOctalBytes(value, buf, offset, length, 0);     };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {         return formatLongBinary(value, buf, offset, length, length, false);     };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {     if (length < 9) {       return 0;  
static public int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {         return formatLongBinary(value, buf, offset, length, false);     };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {         return formatLongBinary(value, buf, offset, length, -1);     };  
public static int formatLongBinary(final long value, final byte[] buf,       final int offset, final int length) {     return formatLongBinary(value, buf, offset, length, true);   };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {         return formatLongBinary(value, buf, offset, length, length);     };  
public static int formatLongOctalOrBinaryBytes(final long value, final byte[] buf, final int offset, final int length) {         return formatLongOctalBytes(value, buf, offset, length, false);     };  
public static int formatLongBinary(long value, final byte[] buf, final int offset, final int length) {     return formatLongBinary(value, buf, offset, length, negative);   };  
public static int formatLongOctalOrBinaryBytes(final long value, final byte[] buf, final int offset, final int length) {     return formatLongOctalBytes(value, buf, offset, length, false);   };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {         return formatLongBinary(value, buf, offset, length);     };  
public static final int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {         return formatLongBinary(value, buf, offset, length, true);     };  
public static int formatLongBinary(final long value, final byte[] buf,             final int offset, final int length) {         return formatLongBinary(value, buf, offset, length, true);     };  
public static int formatLongBinary(long value, final byte[] buf, final int offset, final int length) {         return formatLongBinary(value, buf, offset, length, negative);     };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length)    {       return formatLongBinary(value, buf, offset, length, false);    };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset,             final int length) {         return formatLongBinary(value, buf, offset, length, true);     };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length)     {         return formatLongOctalBytes(value, buf, offset, length, false);     };  
static public int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {     return formatLongBinary(value, buf, offset, length, false);   };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset,       final int length) {     return formatLongBinary(value, buf, offset, length, true);   };  
public static int formatLongOctalOrBinary(final long value, final byte[] buf, final int offset, final int length) {     return formatLongBinary(value, buf, offset, length, false);   };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {     return formatLongOctalOrBinaryBytes(value, buf, offset, length, false);   };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) { 	return formatLongBinary(value, buf, offset, length, true); };  
static public int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {         return formatLongBinary(value, buf, offset, length, true);     };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length)     {         return formatLongBinary(value, buf, offset, length, negative);     };  
public static int formatLongOctalOrBinary(final long value, final byte[] buf, final int offset, final int length) {         return formatLongBinary(value, buf, offset, length, false);     };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {         return formatLongOctalOrBinaryBytes(value, buf, offset, length, false);     };  
public static int formatLongBinary(long value, final byte[] buf, final int offset, final int length) {     return formatLongOctalBytes(value, buf, offset, length, false);   };  
@Override     public int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {         return formatLongBinary(value, buf, offset, length, false);     };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) 	{ 		return formatLongBinary(value, buf, offset, length, true); 	};  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) { 		return formatLongBinary(value, buf, offset, length, negative); 	};  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length)   {     return formatLongBinary(value, buf, offset, length, true);   };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) throws IOException {     return formatLongBinary(value, buf, offset, length, true);   };  
public static int formatLongOctalOrBinaryBytes(final long value, final byte[] buf, final int offset, final int length) {         return formatLongOctalBytes(value, buf, offset, length, true);     };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {         buf[offset] = (byte) value;         return offset + length;     };  
static public int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {     return formatLongBinary(value, buf, offset, length, true);   };  
public static int formatLongOctalOrBinaryBytes(final long value, final byte[] buf, final int offset, final int length) {     return formatLongBinary(value, buf, offset, length, true);   };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {     return formatLongBinary(value, buf, offset, length, 0, true);   };  
public static int formatLongOctalOrBinaryBytes(final long value, final byte[] buf, final int offset, final int length) {     return formatLongOctalBytes(value, buf, offset, length, true);   };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {         return formatLongBinary(value, buf, offset, length, false, false);     };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {         return formatLongBinary(value, buf, offset, length, 0, true);     };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {     return formatLongBinary(value, buf, offset, length, false, false);   };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length)             throws IOException {         return formatLongBinary(value, buf, offset, length, true);     };  
public static int formatLongOctalOrBinaryBytes(final long value, final byte[] buf, final int offset, final int length) {         return formatLongBinary(value, buf, offset, length, true);     };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {     return formatLongOctalOrBinaryBytes(value, buf, offset, length, 0);   };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {     return formatLongOctalOrBinaryBytes(value, buf, offset, length, true);   };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) { 		return formatLongOctalBytes(value, buf, offset, length, false); 	};  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) { 	return formatLongBinary(value, buf, offset, length, 0);     };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length)    {       return formatLongBinary(value, buf, offset, length, true);    };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length)     {         return formatLongOctalBytes(value, buf, offset, length, negative);     };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {         return formatLongOctalOrBinaryBytes(value, buf, offset, length, true);     };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {         return formatLongOctalOrBinaryBytes(value, buf, offset, length, 0);     };  
@Override     public int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) {         return formatLongBinary(value, buf, offset, length, true);     };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length) { 		return formatLongOctalBytes(value, buf, offset, length, negative); 	};  
public static int formatLongOctalOrBinary(final long value, final byte[] buf, final int offset, final int length) {     return formatLongOctalOrBinary(value, buf, offset, length, false);   };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length)     {         return formatLongOctalBytes(value, buf, offset, length, true);     };  
public static int formatLongOctalOrBinary(final long value, final byte[] buf, final int offset, final int length) {         return formatLongOctalOrBinary(value, buf, offset, length, false);     };  
public static int formatLongBinary(final long value, final byte[] buf, final int offset, final int length)         throws IOException     {         return formatLongBinary(value, buf, offset, length, false);     };  
public static int formatLongOctalOrBinary(final long value, final byte[] buf, final int offset, final int length) {         return formatLongOctalBytes(value, buf, offset, length, false);     };  
public static int formatLongOctalOrBinary(final long value, final byte[] buf, final int offset, final int length) {     return formatLongOctalOrBinary(value, buf, offset, length, true);   };  
public static int formatLongOctalOrBinary(final long value, final byte[] buf, final int offset, final int length) {         return formatLongOctalOrBinary(value, buf, offset, length, true);     };  
public static int formatLongOctalOrBinary(final long value, final byte[] buf, final int offset, final int length) {     return formatLongOctalBytes(value, buf, offset, length, false);   };  
public static int formatLongOctalOrBinaryBytes(final long value, final byte[] buf, final int offset, final int length) {     return formatLongOctalBytes(value, buf, offset, length, 0);   };  
public static int formatLongOctalOrBinaryBytes(final long value, final byte[] buf, final int offset, final int length) {         return formatLongOctalBytes(value, buf, offset, length, negative);     };  
 else; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else {; formatBigIntegerBinary(value, buf, offset, length, negative);   
; formatBigIntegerBinary(value, buf, offset, length, negative);   
else; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
 ; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
 return 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return length; formatBigIntegerBinary(value, buf, offset, length, negative);   
 return length; formatBigIntegerBinary(value, buf, offset, length, negative);   
 return offset + length; formatBigIntegerBinary(value, buf, offset, length, negative);   
  return 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
 return value; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return length; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return value; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return value; formatBigIntegerBinary(value, buf, offset, length, negative);   
 return 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return offset + length; formatBigIntegerBinary(value, buf, offset, length, negative);   
 return -1; formatBigIntegerBinary(value, buf, offset, length, negative);   
  return length; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else ; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return -1; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else return 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return -1; formatBigIntegerBinary(value, buf, offset, length, negative);   
  return offset + length; formatBigIntegerBinary(value, buf, offset, length, negative);   
  return value; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else return 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else return length; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { ; formatBigIntegerBinary(value, buf, offset, length, negative);   
 return offset; formatBigIntegerBinary(value, buf, offset, length, negative);   
 ; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return offset + length; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else return length; formatBigIntegerBinary(value, buf, offset, length, negative);   
 */; formatBigIntegerBinary(value, buf, offset, length, negative);   
 return length; formatBigIntegerBinary(value, buf, offset, length, negative);   
 int offset = 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
 }; formatBigIntegerBinary(value, buf, offset, length, negative);   
  int offset = 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
 for; formatBigIntegerBinary(value, buf, offset, length, negative);   
 Otherwise; formatBigIntegerBinary(value, buf, offset, length, negative);   
 returns 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
 return offset + length; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { ++offset; formatBigIntegerBinary(value, buf, offset, length, negative);   
  return -1; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return offset; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else {}; formatBigIntegerBinary(value, buf, offset, length, negative);   
 returns length; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { int offset = 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
 return null; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return 0xff; formatBigIntegerBinary(value, buf, offset, length, negative);   
  @param value; formatBigIntegerBinary(value, buf, offset, length, negative);   
 otherwise; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return null; formatBigIntegerBinary(value, buf, offset, length, negative);   
 return false; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return null; formatBigIntegerBinary(value, buf, offset, length, negative);   
 */; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else  ; formatBigIntegerBinary(value, buf, offset, length, negative);   
  ; formatBigIntegerBinary(value, buf, offset, length, negative);   
  ; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { }; formatBigIntegerBinary(value, buf, offset, length, negative);   
  int length = 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
 return value; formatBigIntegerBinary(value, buf, offset, length, negative);   
  return offset; formatBigIntegerBinary(value, buf, offset, length, negative);   
 return; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { ++offset; formatBigIntegerBinary(value, buf, offset, length, negative);   
 int length = 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return false; formatBigIntegerBinary(value, buf, offset, length, negative);   
  @return; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else return -1; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return 0xff; formatBigIntegerBinary(value, buf, offset, length, negative);   
 /*package; formatBigIntegerBinary(value, buf, offset, length, negative);   
 returns offset + length; formatBigIntegerBinary(value, buf, offset, length, negative);   
  }; formatBigIntegerBinary(value, buf, offset, length, negative);   
 export; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else return value; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return false; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return 0 }; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return length }; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else {  return 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else:; formatBigIntegerBinary(value, buf, offset, length, negative);   
 int offset = 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return offset; formatBigIntegerBinary(value, buf, offset, length, negative);   
  for; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return 1; formatBigIntegerBinary(value, buf, offset, length, negative);   
 returns -1; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else length; formatBigIntegerBinary(value, buf, offset, length, negative);   
 //return offset + length; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else return -1; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return; formatBigIntegerBinary(value, buf, offset, length, negative);   
 return offset+length; formatBigIntegerBinary(value, buf, offset, length, negative);   
 ;; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else return false; formatBigIntegerBinary(value, buf, offset, length, negative);   
 return -1; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else{; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { ++ offset; formatBigIntegerBinary(value, buf, offset, length, negative);   
 return 1; formatBigIntegerBinary(value, buf, offset, length, negative);   
 returns value; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { int length = length; formatBigIntegerBinary(value, buf, offset, length, negative);   
 //return 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
 //return length; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { int offset = offset; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else {; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else null; formatBigIntegerBinary(value, buf, offset, length, negative);   
  return; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { // negative; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else return null; formatBigIntegerBinary(value, buf, offset, length, negative);   
 internal; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { ... }; formatBigIntegerBinary(value, buf, offset, length, negative);   
 return length + offset; formatBigIntegerBinary(value, buf, offset, length, negative);   
 <mask5>; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else {  return length; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else return offset + length; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return value }; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return 1; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return 0xFF; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else ; formatBigIntegerBinary(value, buf, offset, length, negative);   
 }; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return 8; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return 0x80; formatBigIntegerBinary(value, buf, offset, length, negative);   
 return true; formatBigIntegerBinary(value, buf, offset, length, negative);   
int length; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else return; formatBigIntegerBinary(value, buf, offset, length, negative);   
 @param value; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else  ; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { ...; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else return offset + length; formatBigIntegerBinary(value, buf, offset, length, negative);   
  return null; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return 0xFF; formatBigIntegerBinary(value, buf, offset, length, negative);   
 return offset; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else ++offset; formatBigIntegerBinary(value, buf, offset, length, negative);   
else{; formatBigIntegerBinary(value, buf, offset, length, negative);   
 //return value; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return 0x80; formatBigIntegerBinary(value, buf, offset, length, negative);   
 returns; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return 8; formatBigIntegerBinary(value, buf, offset, length, negative);   
  --; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { --; formatBigIntegerBinary(value, buf, offset, length, negative);   
 byte; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else {; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else {   }; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else<mask5>; formatBigIntegerBinary(value, buf, offset, length, negative);   
 otherwise; formatBigIntegerBinary(value, buf, offset, length, negative);   
  long value = 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
  /*package; formatBigIntegerBinary(value, buf, offset, length, negative);   
 	else; formatBigIntegerBinary(value, buf, offset, length, negative);   
 int offset = offset + length; formatBigIntegerBinary(value, buf, offset, length, negative);   
 implementation; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { int length = 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { }; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return offset + length }; formatBigIntegerBinary(value, buf, offset, length, negative);   
 return; formatBigIntegerBinary(value, buf, offset, length, negative);   
      else; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else return value; formatBigIntegerBinary(value, buf, offset, length, negative);   
     else; formatBigIntegerBinary(value, buf, offset, length, negative);   
 end; formatBigIntegerBinary(value, buf, offset, length, negative);   
 long value = 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
  return false; formatBigIntegerBinary(value, buf, offset, length, negative);   
 int length = length; formatBigIntegerBinary(value, buf, offset, length, negative);   
 int offset = offset; formatBigIntegerBinary(value, buf, offset, length, negative);   
 ///; formatBigIntegerBinary(value, buf, offset, length, negative);   
 ); formatBigIntegerBinary(value, buf, offset, length, negative);   
@Trivial; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else short; formatBigIntegerBinary(value, buf, offset, length, negative);   
  else; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return 0; }; formatBigIntegerBinary(value, buf, offset, length, negative);   
  ++; formatBigIntegerBinary(value, buf, offset, length, negative);   
 return 8; formatBigIntegerBinary(value, buf, offset, length, negative);   
 return offset + length + 1; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else {return 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
else {; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else --; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
 :; formatBigIntegerBinary(value, buf, offset, length, negative);   
 ; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else   ; formatBigIntegerBinary(value, buf, offset, length, negative);   
 method; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { int pos = offset; formatBigIntegerBinary(value, buf, offset, length, negative);   
 Long; formatBigIntegerBinary(value, buf, offset, length, negative);   
  internal; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return length + 1; formatBigIntegerBinary(value, buf, offset, length, negative);   
 return value + offset; formatBigIntegerBinary(value, buf, offset, length, negative);   
  else; formatBigIntegerBinary(value, buf, offset, length, negative);   
 int length; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { // else; formatBigIntegerBinary(value, buf, offset, length, negative);   
 int length = 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
return 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
 ...; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else return 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return 0xffff; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return length; }; formatBigIntegerBinary(value, buf, offset, length, negative);   
 {; formatBigIntegerBinary(value, buf, offset, length, negative);   
 ); formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return false; }; formatBigIntegerBinary(value, buf, offset, length, negative);   
 returns null; formatBigIntegerBinary(value, buf, offset, length, negative);   
  returns length; formatBigIntegerBinary(value, buf, offset, length, negative);   
 finally; formatBigIntegerBinary(value, buf, offset, length, negative);   
 final int length = 8; formatBigIntegerBinary(value, buf, offset, length, negative);   
 return --length; formatBigIntegerBinary(value, buf, offset, length, negative);   
  ; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else  return 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return true; formatBigIntegerBinary(value, buf, offset, length, negative);   
 return 0xff; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { int i = 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { --length; formatBigIntegerBinary(value, buf, offset, length, negative);   
int length = length; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return size; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { -- length; formatBigIntegerBinary(value, buf, offset, length, negative);   
  returns 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return null }; formatBigIntegerBinary(value, buf, offset, length, negative);   
 var negative = false; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return null; }; formatBigIntegerBinary(value, buf, offset, length, negative);   
  return length + offset; formatBigIntegerBinary(value, buf, offset, length, negative);   
 long value = 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { for; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return length * 8; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { length = 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
  returns offset + length; formatBigIntegerBinary(value, buf, offset, length, negative);   
 int length = length; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return 4; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return 0x00; formatBigIntegerBinary(value, buf, offset, length, negative);   
  return offset+length; formatBigIntegerBinary(value, buf, offset, length, negative);   
 return length - offset; formatBigIntegerBinary(value, buf, offset, length, negative);   
 return length + 1; formatBigIntegerBinary(value, buf, offset, length, negative);   
 int pos = offset + length; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return offset+length; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return value; }; formatBigIntegerBinary(value, buf, offset, length, negative);   
  ; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else {  return value; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { offset += length; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
 returns length + offset; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { offset += 4; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { int count = 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return --length; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return length + 4; formatBigIntegerBinary(value, buf, offset, length, negative);   
  int size = 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { offset = 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
 --; formatBigIntegerBinary(value, buf, offset, length, negative);   
  int len = 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { return 0x00; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else int length = length; formatBigIntegerBinary(value, buf, offset, length, negative);   
return; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { int size = 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
 int pos = offset; formatBigIntegerBinary(value, buf, offset, length, negative);   
  formatLongBinary; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { int offset = 0; formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { formatLongBinary(value, buf, offset, length, negative);   
 else formatLongBinary(value, buf, offset, length, negative);   
 formatLongBinary(value, buf, offset, length, negative);   
public static int formatLongBinary(value, buf, offset, length, negative);   
  formatLongBinary(value, buf, offset, length, negative);   
 else { return formatLongBinary(value, buf, offset, length, negative);   
else{ formatLongBinary(value, buf, offset, length, negative);   
else { formatLongBinary(value, buf, offset, length, negative);   
 return formatLongBinary(value, buf, offset, length, negative);   
(value, buf, offset, length, negative);   
 else { formatLongBinary(value, buf, offset, length, negative);   
 else formatLongBinary(value, buf, offset, length, negative);   
 formatBigIntegerBinary(value, buf, offset, length, negative);   
private static int formatLongBinary(value, buf, offset, length, negative);   
function formatLongBinary(value, buf, offset, length, negative);   
static public int formatLongBinary(value, buf, offset, length, negative);   
 public static int formatLongBinary(value, buf, offset, length, negative);   
static int formatLongBinary(value, buf, offset, length, negative);   
else formatLongBinary(value, buf, offset, length, negative);   
 //formatLongBinary(value, buf, offset, length, negative);   
 else formatLongBinary(value, buf, offset, length, negative);   
 else { formatShortBinary(value, buf, offset, length, negative);   
public static int formatBigIntegerBinary(value, buf, offset, length, negative);   
 else formatBinary(value, buf, offset, length, negative);   
 return formatLongBinary(value, buf, offset, length, negative);   
 else { formatHexBinary(value, buf, offset, length, negative);   
 formatLongOctalBytes(value, buf, offset, length, negative);   
 else  { formatLongBinary(value, buf, offset, length, negative);   
public static final int formatLongBinary(value, buf, offset, length, negative);   
private int formatLongBinary(value, buf, offset, length, negative);   
 else { return formatLongBinary(value, buf, offset, length, negative);   
 else {  formatLongBinary(value, buf, offset, length, negative);   
 else { formatIntBinary(value, buf, offset, length, negative);   
else formatLongBinary(value, buf, offset, length, negative);   
 else formatLongOctalBytes(value, buf, offset, length, negative);   
  formatBigIntegerBinary(value, buf, offset, length, negative);   
public int formatLongBinary(value, buf, offset, length, negative);   
 else return formatLongBinary(value, buf, offset, length, negative);   
 else{ formatLongBinary(value, buf, offset, length, negative);   
 formatBinary(value, buf, offset, length, negative);   
 formatIntegerBinary(value, buf, offset, length, negative);   
else { formatLongBinary(value, buf, offset, length, negative);   
  return formatLongBinary(value, buf, offset, length, negative);   
 else formatBigIntegerBinary(value, buf, offset, length, negative);   
 (value, buf, offset, length, negative);   
 else {}(value, buf, offset, length, negative);   
protected static int formatLongBinary(value, buf, offset, length, negative);   
 else { formatBinary(value, buf, offset, length, negative);   
 else  formatLongBinary(value, buf, offset, length, negative);   
 else formatShortBinary(value, buf, offset, length, negative);   
 else { formatLongBinary(value, buf, offset, length, negative);   
 else { formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { formatLongBinary(value, buf, offset, length, negative);   
 else { formatIntegerBinary(value, buf, offset, length, negative);   
protected int formatLongBinary(value, buf, offset, length, negative);   
  formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { formatLongBinaryBinary(value, buf, offset, length, negative);   
else{ formatLongBinary(value, buf, offset, length, negative);   
 formatShortBinary(value, buf, offset, length, negative);   
 public static void formatLongBinary(value, buf, offset, length, negative);   
 else { formatIntegerBytes(value, buf, offset, length, negative);   
 formatLongOctalBinary(value, buf, offset, length, negative);   
 formatBigInteger(value, buf, offset, length, negative);   
func formatLongBinary(value, buf, offset, length, negative);   
 else { formatDoubleBinary(value, buf, offset, length, negative);   
 else short(value, buf, offset, length, negative);   
 else { formatLongText(value, buf, offset, length, negative);   
 else formatByte(value, buf, offset, length, negative);   
 else formatLongBinaryBinary(value, buf, offset, length, negative);   
static final int formatLongBinary(value, buf, offset, length, negative);   
elseformatLongBinary(value, buf, offset, length, negative);   
 else formatIntBinary(value, buf, offset, length, negative);   
 else(value, buf, offset, length, negative);   
 formatIntegerBytes(value, buf, offset, length, negative);   
void formatLongBinary(value, buf, offset, length, negative);   
 formatHexBinary(value, buf, offset, length, negative);   
public final int formatLongBinary(value, buf, offset, length, negative);   
  formatLongOctalBytes(value, buf, offset, length, negative);   
 else, formatLongBinary(value, buf, offset, length, negative);   
 else formatIntegerBytes(value, buf, offset, length, negative);   
 }(value, buf, offset, length, negative);   
 else formatBytes(value, buf, offset, length, negative);   
  //formatLongBinary(value, buf, offset, length, negative);   
 else formatHexBinary(value, buf, offset, length, negative);   
public static long formatLongBinary(value, buf, offset, length, negative);   
 else { formatLongBytes(value, buf, offset, length, negative);   
int formatLongBinary(value, buf, offset, length, negative);   
  formatLongBinary(value, buf, offset, length, negative);   
 return formatLongOctalBytes(value, buf, offset, length, negative);   
 //formatBigIntegerBinary(value, buf, offset, length, negative);   
 public static long formatLongBinary(value, buf, offset, length, negative);   
 /* formatLongBinary(value, buf, offset, length, negative);   
 formatDecimalBinary(value, buf, offset, length, negative);   
 else(value, buf, offset, length, negative);   
static private int formatLongBinary(value, buf, offset, length, negative);   
 else { formatHexBytes(value, buf, offset, length, negative);   
 else {(value, buf, offset, length, negative);   
 else { formatByte(value, buf, offset, length, negative);   
 int formatLongBinary(value, buf, offset, length, negative);   
 int formatLongBinary(value, buf, offset, length, negative);   
 else { formatLongBinaryBytes(value, buf, offset, length, negative);   
 { formatLongBinary(value, buf, offset, length, negative);   
 formatIntBinary(value, buf, offset, length, negative);   
 formatByte(value, buf, offset, length, negative);   
return formatLongBinary(value, buf, offset, length, negative);   
 function formatLongBinary(value, buf, offset, length, negative);   
 else { formatStringBinary(value, buf, offset, length, negative);   
 else formatLongText(value, buf, offset, length, negative);   
 else formatBinaryBytes(value, buf, offset, length, negative);   
 else { //formatLongBinary(value, buf, offset, length, negative);   
 else    { formatLongBinary(value, buf, offset, length, negative);   
 formatInteger(value, buf, offset, length, negative);   
 public int formatLongBinary(value, buf, offset, length, negative);   
 else formatIntegerBinary(value, buf, offset, length, negative);   
 else { formatUnsignedBinary(value, buf, offset, length, negative);   
 else { formatLongIntegerBytes(value, buf, offset, length, negative);   
 formatDoubleBinary(value, buf, offset, length, negative);   
 else FormatLongBinary(value, buf, offset, length, negative);   
static int formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { formatLongByte(value, buf, offset, length, negative);   
 function formatLongBinary(value, buf, offset, length, negative);   
 else { formatDecimalBinary(value, buf, offset, length, negative);   
 else formatLongBinaryBytes(value, buf, offset, length, negative);   
 else { formatBytes(value, buf, offset, length, negative);   
function formatBigIntegerBinary(value, buf, offset, length, negative);   
 formatBytes(value, buf, offset, length, negative);   
else{formatLongBinary(value, buf, offset, length, negative);   
 formatBigIntegerBytes(value, buf, offset, length, negative);   
 else { formatLongHex(value, buf, offset, length, negative);   
public void formatLongBinary(value, buf, offset, length, negative);   
public static int formatIntegerBinary(value, buf, offset, length, negative);   
 formatUnsignedBinary(value, buf, offset, length, negative);   
 else { formatULongBinary(value, buf, offset, length, negative);   
static public int formatBigIntegerBinary(value, buf, offset, length, negative);   
protected final int formatLongBinary(value, buf, offset, length, negative);   
else(value, buf, offset, length, negative);   
final int formatLongBinary(value, buf, offset, length, negative);   
public static void formatLongBinary(value, buf, offset, length, negative);   
 else {       formatLongBinary(value, buf, offset, length, negative);   
 public static boolean formatLongBinary(value, buf, offset, length, negative);   
 else { append(value, buf, offset, length, negative);   
 else { formatBinaryBytes(value, buf, offset, length, negative);   
 else {formatLongBinary(value, buf, offset, length, negative);   
 else { formatBinaryBinary(value, buf, offset, length, negative);   
 func formatLongBinary(value, buf, offset, length, negative);   
 else format longBinary(value, buf, offset, length, negative);   
 else { formatLongInteger(value, buf, offset, length, negative);   
 private static int formatLongBinary(value, buf, offset, length, negative);   
  formatBinary(value, buf, offset, length, negative);   
 else { formatByteBinary(value, buf, offset, length, negative);   
 else { formatLongHexBinary(value, buf, offset, length, negative);   
private static int formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { formatUIntBinary(value, buf, offset, length, negative);   
 else formatLongBinary(value, buf, offset, length, negative);   
 public static byte formatLongBinary(value, buf, offset, length, negative);   
 else formatBinaryBinary(value, buf, offset, length, negative);   
 else { formatUintBinary(value, buf, offset, length, negative);   
 elseformatLongBinary(value, buf, offset, length, negative);   
 else { formatLongOctetBytes(value, buf, offset, length, negative);   
 format longBinary(value, buf, offset, length, negative);   
 else { formatBinBinary(value, buf, offset, length, negative);   
 else { formatLongLongBinary(value, buf, offset, length, negative);   
 else { formatLongOctalBytes(value, buf, offset, length, negative);   
 else {      formatLongBinary(value, buf, offset, length, negative);   
 else { formatLongOctal(value, buf, offset, length, negative);   
 else formatDoubleBinary(value, buf, offset, length, negative);   
 else formatDecimalBinary(value, buf, offset, length, negative);   
 else formatDecimalBytes(value, buf, offset, length, negative);   
 public static int formatLongBinary(value, buf, offset, length, negative);   
 else formatInt(value, buf, offset, length, negative);   
 else int formatLongBinary(value, buf, offset, length, negative);   
 formatLongOctal(value, buf, offset, length, negative);   
 else formatLongBytes(value, buf, offset, length, negative);   
 formatNumberBinary(value, buf, offset, length, negative);   
 else   { formatLongBinary(value, buf, offset, length, negative);   
 else formatLongOctal(value, buf, offset, length, negative);   
private void formatLongBinary(value, buf, offset, length, negative);   
  formatLongOctalBinary(value, buf, offset, length, negative);   
 // formatLongBinary(value, buf, offset, length, negative);   
 formatLongBytes(value, buf, offset, length, negative);   
else{ return formatLongBinary(value, buf, offset, length, negative);   
 else formatInteger(value, buf, offset, length, negative);   
 else { for(value, buf, offset, length, negative);   
 else { return formatShortBinary(value, buf, offset, length, negative);   
 else { formatLongIntegerBinary(value, buf, offset, length, negative);   
public static int formatLongBinaryBinary(value, buf, offset, length, negative);   
 else { formatLongBinaryBinary(value, buf, offset, length, negative);   
 else formatStringBinary(value, buf, offset, length, negative);   
public static final long formatLongBinary(value, buf, offset, length, negative);   
  formatIntegerBinary(value, buf, offset, length, negative);   
 else { formatIntBytes(value, buf, offset, length, negative);   
 Format BigInteger(value, buf, offset, length, negative);   
 else switch(value, buf, offset, length, negative);   
 else formatString(value, buf, offset, length, negative);   
 else { formatLongIntBinary(value, buf, offset, length, negative);   
else { return formatLongBinary(value, buf, offset, length, negative);   
 else { formatLongBinary(value, buf, offset, length, negative);   
void formatBigIntegerBinary(value, buf, offset, length, negative);   
 else format LongBinary(value, buf, offset, length, negative);   
else  { formatLongBinary(value, buf, offset, length, negative);   
 formatLongText(value, buf, offset, length, negative);   
else{  formatLongBinary(value, buf, offset, length, negative);   
 else formatLongHex(value, buf, offset, length, negative);   
private static final int formatLongBinary(value, buf, offset, length, negative);   
 elseformatLongBinary(value, buf, offset, length, negative);   
 else { formatShortBinary(value, buf, offset, length, negative);   
  int formatLongBinary(value, buf, offset, length, negative);   
else  formatLongBinary(value, buf, offset, length, negative);   
 else formatBigInteger(value, buf, offset, length, negative);   
 else formatByteBinary(value, buf, offset, length, negative);   
 else formatLongOctalBinary(value, buf, offset, length, negative);   
 else { FormatLongBinary(value, buf, offset, length, negative);   
 else { formatLongBin(value, buf, offset, length, negative);   
 else append(value, buf, offset, length, negative);   
else{ formatShortBinary(value, buf, offset, length, negative);   
public final static int formatLongBinary(value, buf, offset, length, negative);   
 else { formatInteger(value, buf, offset, length, negative);   
 else formatNumberBinary(value, buf, offset, length, negative);   
 else { formatDecimalBytes(value, buf, offset, length, negative);   
 else formatUIntBinary(value, buf, offset, length, negative);   
 else formatHexBytes(value, buf, offset, length, negative);   
 formatStringBinary(value, buf, offset, length, negative);   
 formatBigBinary(value, buf, offset, length, negative);   
 else formatIntBytes(value, buf, offset, length, negative);   
 else { formatLongTextBinary(value, buf, offset, length, negative);   
public int formatBigIntegerBinary(value, buf, offset, length, negative);   
else {  formatLongBinary(value, buf, offset, length, negative);   
else { formatShortBinary(value, buf, offset, length, negative);   
 else.(value, buf, offset, length, negative);   
 else { return formatIntBinary(value, buf, offset, length, negative);   
  //formatBigIntegerBinary(value, buf, offset, length, negative);   
 else { formatLongLongBinary(value, buf, offset, length, negative);   
public static int formatBinary(value, buf, offset, length, negative);   
public static boolean formatLongBinary(value, buf, offset, length, negative);   
 else formatLongOctalBytes(value, buf, offset, length, negative);   
 else { formatLongHexBytes(value, buf, offset, length, negative);   
 else {  formatLongBinary(value, buf, offset, length, negative);   
public static int formatLongBytes(value, buf, offset, length, negative);   
else{(value, buf, offset, length, negative);   
 else { return formatHexBinary(value, buf, offset, length, negative);   
 else {   formatLongBinary(value, buf, offset, length, negative);   
 else { writeLongBinary(value, buf, offset, length, negative);   
  public int formatLongBinary(value, buf, offset, length, negative);   
 else { formatLongBinaryBytes(value, buf, offset, length, negative);   
 else { formatOctalBytes(value, buf, offset, length, negative);   
private final int formatLongBinary(value, buf, offset, length, negative);   
 else { return formatBinary(value, buf, offset, length, negative);   
else{ formatHexBinary(value, buf, offset, length, negative);   
 else { formatLongUnsignedBinary(value, buf, offset, length, negative);   
 else if(value, buf, offset, length, negative);   
formatBigIntegerBinary(value, buf, offset, length, negative);   
formatBigIntegerBinary(value, buf, buf, offset, length, negative);   
formatBigIntegerBinary(0, buf, buf, offset, length, negative);   
formatBigIntegerBinary(value, offset, buf, offset, length, negative);   
formatBigIntegerBinary(value, buf, offset, buf, offset, length, negative);   
formatBigIntegerBinary(long value, buf, offset, length, negative);   
formatBigIntegerBinary( value, buf, offset, length, negative);   
formatBigIntegerBinary(value<mask5>value, buf, offset, length, negative);   
formatBigIntegerBinary(length, buf, offset, length, negative);   
formatBigIntegerBinary(value, null, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0, buf, offset, length, negative);   
formatBigIntegerBinary(0, buf, offset, length, negative);   
formatBigIntegerBinary(0x80, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0), buf, offset, length, negative);   
formatBigIntegerBinary(int value, buf, offset, length, negative);   
formatBigIntegerBinary(0x00, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0, 8, buf, offset, length, negative);   
formatBigIntegerBinary(value, null), buf, offset, length, negative);   
formatBigIntegerBinary(long, buf, offset, length, negative);   
formatBigIntegerBinary(0xff, buf, offset, length, negative);   
formatBigIntegerBinary(0L, buf, buf, offset, length, negative);   
formatBigIntegerBinary(value), buf, offset, length, negative);   
formatBigIntegerBinary(length), buf, offset, length, negative);   
formatBigIntegerBinary(value, 0);, buf, offset, length, negative);   
formatBigIntegerBinary(0, 0, buf, offset, length, negative);   
formatBigIntegerBinary(0), buf, offset, length, negative);   
formatBigIntegerBinary( value, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0, 9, buf, offset, length, negative);   
formatBigIntegerBinary(length, buf, buf, offset, length, negative);   
formatBigIntegerBinary(0x80000000, buf, offset, length, negative);   
formatBigIntegerBinary(long, buf, buf, offset, length, negative);   
formatBigIntegerBinary(0x80, buf, buf, offset, length, negative);   
formatBigIntegerBinary(Long.MIN_VALUE, buf, offset, length, negative);   
formatBigIntegerBinary(0, buf, offset, buf, offset, length, negative);   
formatBigIntegerBinary(0x00, buf, buf, offset, length, negative);   
formatBigIntegerBinary(int value, buf, buf, offset, length, negative);   
formatBigIntegerBinary(0,buf, buf, offset, length, negative);   
formatBigIntegerBinary(value, 4, buf, offset, length, negative);   
formatBigIntegerBinary(value, length), buf, offset, length, negative);   
formatBigIntegerBinary(1, buf, buf, offset, length, negative);   
formatBigIntegerBinary(value, offset), buf, offset, length, negative);   
formatBigIntegerBinary(0xff, buf, buf, offset, length, negative);   
formatBigIntegerBinary(0x01, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0, buf, buf, offset, length, negative);   
formatBigIntegerBinary(1, buf, offset, length, negative);   
formatBigIntegerBinary(1L, buf, buf, offset, length, negative);   
formatBigIntegerBinary(byte[] value, buf, offset, length, negative);   
formatBigIntegerBinary(length, 0), buf, offset, length, negative);   
formatBigIntegerBinary(value, 8, buf, offset, length, negative);   
formatBigIntegerBinary(value, null);, buf, offset, length, negative);   
formatBigIntegerBinary(value, buffer, buf, offset, length, negative);   
formatBigIntegerBinary(Long.MAX_VALUE, buf, offset, length, negative);   
formatBigIntegerBinary(0, buf);, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0, length, buf, offset, length, negative);   
formatBigIntegerBinary(0x0, buf, offset, length, negative);   
formatBigIntegerBinary(10, buf, buf, offset, length, negative);   
formatBigIntegerBinary(maxAsOctalChar, buf, offset, length, negative);   
formatBigIntegerBinary(0xff), buf, offset, length, negative);   
formatBigIntegerBinary(value, 8), buf, offset, length, negative);   
formatBigIntegerBinary(0, 0), buf, offset, length, negative);   
formatBigIntegerBinary(value, false, buf, offset, length, negative);   
formatBigIntegerBinary(Integer, buf, offset, length, negative);   
formatBigIntegerBinary(0xFFFFFFFF, buf, offset, length, negative);   
formatBigIntegerBinary(value, 10);, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0, 1, buf, offset, length, negative);   
formatBigIntegerBinary(Long, buf, offset, length, negative);   
formatBigIntegerBinary(value, byte[] buf, buf, offset, length, negative);   
formatBigIntegerBinary(null, buf, offset, length, negative);   
formatBigIntegerBinary(0x01, buf, buf, offset, length, negative);   
formatBigIntegerBinary(value, pos, buf, offset, length, negative);   
formatBigIntegerBinary(int, buf, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0, 4, buf, offset, length, negative);   
formatBigIntegerBinary(value, true, buf, offset, length, negative);   
formatBigIntegerBinary(long value, buf, buf, offset, length, negative);   
formatBigIntegerBinary(0x7fffffff, buf, offset, length, negative);   
formatBigIntegerBinary(0x00000000, buf, offset, length, negative);   
formatBigIntegerBinary(0x10, buf, offset, length, negative);   
formatBigIntegerBinary(255, buf, offset, length, negative);   
formatBigIntegerBinary(0, 4, buf, offset, length, negative);   
formatBigIntegerBinary(0xFF, buf, offset, length, negative);   
formatBigIntegerBinary(0, length), buf, offset, length, negative);   
formatBigIntegerBinary(Long value, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0, 7, buf, offset, length, negative);   
formatBigIntegerBinary(BigInteger value, buf, offset, length, negative);   
formatBigIntegerBinary(value, 4), buf, offset, length, negative);   
formatBigIntegerBinary(0, 8, buf, offset, length, negative);   
formatBigIntegerBinary(value,, buf, offset, length, negative);   
formatBigIntegerBinary(0x7f, buf, offset, length, negative);   
formatBigIntegerBinary(value, 10, buf, offset, length, negative);   
formatBigIntegerBinary(0x20, buf, offset, length, negative);   
formatBigIntegerBinary(0l, buf, buf, offset, length, negative);   
formatBigIntegerBinary(0x02, buf, offset, length, negative);   
formatBigIntegerBinary(0, length);, buf, offset, length, negative);   
formatBigIntegerBinary(0, 8), buf, offset, length, negative);   
formatBigIntegerBinary(value, 10), buf, offset, length, negative);   
formatBigIntegerBinary(0x8000, buf, offset, length, negative);   
formatBigIntegerBinary(0, 0, 0, buf, offset, length, negative);   
formatBigIntegerBinary(double value, buf, offset, length, negative);   
formatBigIntegerBinary(value);, buf, offset, length, negative);   
formatBigIntegerBinary(0);, buf, offset, length, negative);   
formatBigIntegerBinary(value, short, buf, offset, length, negative);   
formatBigIntegerBinary(0x100000000, buf, offset, length, negative);   
formatBigIntegerBinary(value, tmp, buf, offset, length, negative);   
formatBigIntegerBinary(0x0000, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0, 0, buf, offset, length, negative);   
formatBigIntegerBinary(0xFFFFFFFF, buf, buf, offset, length, negative);   
formatBigIntegerBinary(length, 0);, buf, offset, length, negative);   
formatBigIntegerBinary(0b, buf, offset, length, negative);   
formatBigIntegerBinary(value, 5, buf, offset, length, negative);   
formatBigIntegerBinary(0xAB, buf, offset, length, negative);   
formatBigIntegerBinary(0, length, buf, offset, length, negative);   
formatBigIntegerBinary(binary, buf, offset, length, negative);   
formatBigIntegerBinary(0xFFFFFFFFL, buf, offset, length, negative);   
formatBigIntegerBinary(0x7FFFFFFF, buf, offset, length, negative);   
formatBigIntegerBinary(64, buf, offset, length, negative);   
formatBigIntegerBinary(value, 7, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0xff), buf, offset, length, negative);   
formatBigIntegerBinary(val, buf, offset, length, negative);   
formatBigIntegerBinary(value<mask6>value, buf, offset, length, negative);   
formatBigIntegerBinary(value, offsets, buf, offset, length, negative);   
formatBigIntegerBinary(0, 8);, buf, offset, length, negative);   
formatBigIntegerBinary(0b100000000, buf, offset, length, negative);   
formatBigIntegerBinary(value, length, buf, offset, length, negative);   
formatBigIntegerBinary(length, 0, buf, offset, length, negative);   
formatBigIntegerBinary(value, offset);, buf, offset, length, negative);   
formatBigIntegerBinary(8, buf, buf, offset, length, negative);   
formatBigIntegerBinary(bytes, buf, offset, length, negative);   
formatBigIntegerBinary(value, bytes, buf, offset, length, negative);   
formatBigIntegerBinary(uint64 value, buf, offset, length, negative);   
formatBigIntegerBinary(0x30, buf, offset, length, negative);   
formatBigIntegerBinary(values, buf, offset, length, negative);   
formatBigIntegerBinary(0xFF, buf, buf, offset, length, negative);   
formatBigIntegerBinary(0x100, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0x80, buf, offset, length, negative);   
formatBigIntegerBinary(0x04, buf, buf, offset, length, negative);   
formatBigIntegerBinary(int, byte[]), buf, offset, length, negative);   
formatBigIntegerBinary(0x0a, buf, offset, length, negative);   
formatBigIntegerBinary(0x04, buf, offset, length, negative);   
formatBigIntegerBinary(0, buf), buf, offset, length, negative);   
formatBigIntegerBinary(0, buffer, buf, offset, length, negative);   
formatBigIntegerBinary(value, 1), buf, offset, length, negative);   
formatBigIntegerBinary(byte value, buf, offset, length, negative);   
formatBigIntegerBinary(value, offset, length, buf, offset, length, negative);   
formatBigIntegerBinary(0x36, buf, offset, length, negative);   
formatBigIntegerBinary(0, null, buf, offset, length, negative);   
formatBigIntegerBinary(0x10, buf, buf, offset, length, negative);   
formatBigIntegerBinary( value, buf, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0,, buf, offset, length, negative);   
formatBigIntegerBinary(value, tmpBytes, buf, offset, length, negative);   
formatBigIntegerBinary(number, buf, offset, length, negative);   
formatBigIntegerBinary(uint64, buf, offset, length, negative);   
formatBigIntegerBinary(long, buf, offset, buf, offset, length, negative);   
formatBigIntegerBinary(0x02, buf, buf, offset, length, negative);   
formatBigIntegerBinary(Long.MAXVALUE, buf, offset, length, negative);   
formatBigIntegerBinary(this value, buf, offset, length, negative);   
formatBigIntegerBinary(0, 0);, buf, offset, length, negative);   
formatBigIntegerBinary(value, length);, buf, offset, length, negative);   
formatBigIntegerBinary(key, buf, offset, length, negative);   
formatBigIntegerBinary(int value, int offset, buf, offset, length, negative);   
formatBigIntegerBinary(0xffffffff, buf, offset, length, negative);   
formatBigIntegerBinary(size, buf, offset, length, negative);   
formatBigIntegerBinary(0x1000, buf, offset, length, negative);   
formatBigIntegerBinary(0x81, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0, 6, buf, offset, length, negative);   
formatBigIntegerBinary(2, buf, buf, offset, length, negative);   
formatBigIntegerBinary(0x7F, buf, offset, length, negative);   
formatBigIntegerBinary(0x0F, buf, offset, length, negative);   
formatBigIntegerBinary(length, null);, buf, offset, length, negative);   
formatBigIntegerBinary(3, buf, buf, offset, length, negative);   
formatBigIntegerBinary(0xFFFFFFFF & value, buf, offset, length, negative);   
formatBigIntegerBinary(value, false), buf, offset, length, negative);   
formatBigIntegerBinary(this, buf, offset, length, negative);   
formatBigIntegerBinary(bytes, offset, buf, offset, length, negative);   
formatBigIntegerBinary(value,buf, buf, offset, length, negative);   
formatBigIntegerBinary(length, null), buf, offset, length, negative);   
formatBigIntegerBinary(value, 12, buf, offset, length, negative);   
formatBigIntegerBinary(0long, buf, offset, length, negative);   
formatBigIntegerBinary(value, 9, buf, offset, length, negative);   
formatBigIntegerBinary(value, bytes), buf, offset, length, negative);   
formatBigIntegerBinary(value, 8);, buf, offset, length, negative);   
formatBigIntegerBinary(long<mask5>value, buf, offset, length, negative);   
formatBigIntegerBinary(0, value, buf, offset, length, negative);   
formatBigIntegerBinary(data, buf, offset, length, negative);   
formatBigIntegerBinary(0,0, buf, offset, length, negative);   
formatBigIntegerBinary(length, 8), buf, offset, length, negative);   
formatBigIntegerBinary(this.value, buf, offset, length, negative);   
formatBigIntegerBinary(0x08, buf, offset, length, negative);   
formatBigIntegerBinary(size, value, buf, offset, length, negative);   
formatBigIntegerBinary(0l, buf, offset, length, negative);   
formatBigIntegerBinary(null), buf, offset, length, negative);   
formatBigIntegerBinary(unsigned int, buf, offset, length, negative);   
formatBigIntegerBinary(final long value, buf, offset, length, negative);   
formatBigIntegerBinary(0, null);, buf, offset, length, negative);   
formatBigIntegerBinary(0x00000000, buf, buf, offset, length, negative);   
formatBigIntegerBinary(value, 12), buf, offset, length, negative);   
formatBigIntegerBinary(object, buf, offset, length, negative);   
formatBigIntegerBinary(100, buf, offset, length, negative);   
formatBigIntegerBinary(0,, buf, offset, length, negative);   
formatBigIntegerBinary(0x03, buf, offset, length, negative);   
formatBigIntegerBinary(0, 9);, buf, offset, length, negative);   
formatBigIntegerBinary(1), buf, offset, length, negative);   
formatBigIntegerBinary(0, 4), buf, offset, length, negative);   
formatBigIntegerBinary(Value, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0, 10, buf, offset, length, negative);   
formatBigIntegerBinary(length, buf), buf, offset, length, negative);   
formatBigIntegerBinary(size, buf, buf, offset, length, negative);   
formatBigIntegerBinary(0x0, buf, buf, offset, length, negative);   
formatBigIntegerBinary(6, buf, offset, length, negative);   
formatBigIntegerBinary(length, null, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0, 12, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0x00, buf, offset, length, negative);   
formatBigIntegerBinary(0, 10);, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0xff, buf, offset, length, negative);   
formatBigIntegerBinary(value, false);, buf, offset, length, negative);   
formatBigIntegerBinary(0x80 | value, buf, offset, length, negative);   
formatBigIntegerBinary(value, 1);, buf, offset, length, negative);   
formatBigIntegerBinary(length, 4), buf, offset, length, negative);   
formatBigIntegerBinary(value, bytes, offset, buf, offset, length, negative);   
formatBigIntegerBinary(0x8000000000000000L, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0, 11, buf, offset, length, negative);   
formatBigIntegerBinary(0x0A, buf, offset, length, negative);   
formatBigIntegerBinary(0, 10), buf, offset, length, negative);   
formatBigIntegerBinary(0x80000000, buf, buf, offset, length, negative);   
formatBigIntegerBinary(buffer, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0, 3, buf, offset, length, negative);   
formatBigIntegerBinary(0x0000, buf, buf, offset, length, negative);   
formatBigIntegerBinary(type, buf, offset, length, negative);   
formatBigIntegerBinary(0x0f, buf, offset, length, negative);   
formatBigIntegerBinary(0xFFFFFFFFL, buf, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0, 5, buf, offset, length, negative);   
formatBigIntegerBinary(integer, buf, offset, length, negative);   
formatBigIntegerBinary(65536, buf, offset, length, negative);   
formatBigIntegerBinary(0x00FFFFFF, buf, offset, length, negative);   
formatBigIntegerBinary(value, offset, 9, buf, offset, length, negative);   
formatBigIntegerBinary(length, 10), buf, offset, length, negative);   
formatBigIntegerBinary(0xffffffffffffffff, buf, offset, length, negative);   
formatBigIntegerBinary(0x0100000000000000, buf, offset, length, negative);   
formatBigIntegerBinary(0x30, buf, buf, offset, length, negative);   
formatBigIntegerBinary(value, buf), buf, offset, length, negative);   
formatBigIntegerBinary(x, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0xffff), buf, offset, length, negative);   
formatBigIntegerBinary(value, 5);, buf, offset, length, negative);   
formatBigIntegerBinary(value, 3), buf, offset, length, negative);   
formatBigIntegerBinary(value, 4);, buf, offset, length, negative);   
formatBigIntegerBinary(long, byte[]), buf, offset, length, negative);   
formatBigIntegerBinary( value, buf, buf, offset, length, negative);   
formatBigIntegerBinary(10, buf, offset, length, negative);   
formatBigIntegerBinary(short, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0xff);, buf, offset, length, negative);   
formatBigIntegerBinary(0x20, buf, buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, length);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask5> buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length), offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length);, offset, length, negative);   
formatBigIntegerBinary(value, buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset), offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset + length);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, length); }, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset); }, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length, negative);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length); }, offset, length, negative);   
formatBigIntegerBinary(value,  byte[] buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length); return offset, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length) {, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, 9);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, length); , offset, length, negative);   
formatBigIntegerBinary(value,  buffer, offset, length), offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length) { buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, length)., offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length, negative), offset, length, negative);   
formatBigIntegerBinary(value,  buf, buf, offset, length, negative);   
formatBigIntegerBinary(value,  buffer, offset, length);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length); buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1>buf, offset, length);, offset, length, negative);   
formatBigIntegerBinary(value,  buffer, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length)., offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length); }, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, 4), offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buffer, offset, length);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, 0, length);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, 0, length);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length);  }, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask5> buf, offset, length);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, 4);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, 8), offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length, true);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset+length);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset<mask2> buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, length);}, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset + 4);, offset, length, negative);   
formatBigIntegerBinary(value,  0, buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, length), offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask5> buf, offset, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset); return, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, 4);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset) { return buf, offset, length, negative);   
formatBigIntegerBinary(value,  null, 0);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length, 0);, offset, length, negative);   
formatBigIntegerBinary(value,  buffer, offset, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset); }, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset + length);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, 8);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length); returns offset, offset, length, negative);   
formatBigIntegerBinary(value,  buffer<mask1> buf, offset, length);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, buf, offset);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length); return buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length); */, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask6> buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, 0, length), offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length)  }, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length, false);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, 9), offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, 8);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset); }, offset, length, negative);   
formatBigIntegerBinary(value,  buf, buf, offset), offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, length); , offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask5>buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length) { }, offset, length, negative);   
formatBigIntegerBinary(value,  buf, buf, offset, length), offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> 0, length); }, offset, length, negative);   
formatBigIntegerBinary(value,  tmp, buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, buf, offset, length);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, len);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length) {, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, len), offset, length, negative);   
formatBigIntegerBinary(value,  buffer, offset, length, negative);, offset, length, negative);   
formatBigIntegerBinary(value,  null), offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset + length), offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset + 1);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, buf, offset, offset, length, negative);   
formatBigIntegerBinary(value,  null);, offset, length, negative);   
formatBigIntegerBinary(value,  bytes, offset, length), offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length)  -----------------------------------------------------------------------, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset);  formatBigIntegerBinary, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length)  --, offset, length, negative);   
formatBigIntegerBinary(value,  val, buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset);  }, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, maxAsOctalChar, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset<mask5> buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset) { buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, 9);, offset, length, negative);   
formatBigIntegerBinary(value,  null, 0), offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length) , offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset + 8);, offset, length, negative);   
formatBigIntegerBinary(value,  length, buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length, true), offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, size), offset, length, negative);   
formatBigIntegerBinary(value,  buf, 0, offset, length, negative);   
formatBigIntegerBinary(value,  null, offset, length), offset, length, negative);   
formatBigIntegerBinary(value,  buffer<mask5> buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf), offset, length, negative);   
formatBigIntegerBinary(value,  null, offset, length);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length, positive);, offset, length, negative);   
formatBigIntegerBinary(value,   buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length){ buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset+length);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset) {, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, 12);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length, false), offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset) { }, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length); /*package, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length, null);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset);  }, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, 10);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset<mask15> buf, offset, length, negative);   
formatBigIntegerBinary(value,  buffer, offset), offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length) { return buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length, 0), offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset)., offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, 3);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset);  formatLongBinary, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, 1), offset, length, negative);   
formatBigIntegerBinary(value,  null, null);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length){ return buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, 6);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset), offset, length, negative);   
formatBigIntegerBinary(value,  buf, 0, offset);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, 10), offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, 10);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset , length);, offset, length, negative);   
formatBigIntegerBinary(value,  buff, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, 7);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, 1);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, 3);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length); //int, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset + 4, offset, length, negative);   
formatBigIntegerBinary(value,  buff, offset, length), offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset,length);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length) {}, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, 0), offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, len);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, 12), offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length) formats a long, offset, length, negative);   
formatBigIntegerBinary(value,  nullBuf, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, length);   , offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf[offset]];, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, 6), offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length); , offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, 16), offset, length, negative);   
formatBigIntegerBinary(value,  buffer, buf, offset, length), offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, size);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, length); },, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset); buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length)  ..., offset, length, negative);   
formatBigIntegerBinary(value,  buf, 0, offset), offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask14> buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, 0);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf<mask2> buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length); formatLong, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask2> buf, offset, length, negative);   
formatBigIntegerBinary(value,  value, buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length);}, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, length);;, offset, length, negative);   
formatBigIntegerBinary(value,  buf[], offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset ), offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset+length), offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask3> buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, 0);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, 0), offset, length, negative);   
formatBigIntegerBinary(value,  offset, buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset);  }, offset, length, negative);   
formatBigIntegerBinary(value,  buf, buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset , offset, length, negative);   
formatBigIntegerBinary(value,  null, null, null);, offset, length, negative);   
formatBigIntegerBinary(value,  byte[] buf, offset, offset, length, negative);   
formatBigIntegerBinary(value,  null, null), offset, length, negative);   
formatBigIntegerBinary(value,  "", 0);, offset, length, negative);   
formatBigIntegerBinary(value,  buf[offset], buf, offset, length, negative);   
formatBigIntegerBinary(value,  null, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, 4, offset, length, negative);   
formatBigIntegerBinary(value,  buf);, offset, length, negative);   
formatBigIntegerBinary(value,  null, offset);, offset, length, negative);   
formatBigIntegerBinary(value,  0, length), offset, length, negative);   
formatBigIntegerBinary(value,  length), offset, length, negative);   
formatBigIntegerBinary(value,  bytes, offset, offset, length, negative);   
formatBigIntegerBinary(value,  null, offset), offset, length, negative);   
formatBigIntegerBinary(value,  buffer, buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offsets, offset, length, negative);   
formatBigIntegerBinary(value,  null, false);, offset, length, negative);   
formatBigIntegerBinary(value,  binary, buf, offset, length, negative);   
formatBigIntegerBinary(value,  buffer, offset);, offset, length, negative);   
formatBigIntegerBinary(value,  byte[]), offset, length, negative);   
formatBigIntegerBinary(value,  bytes, offset), offset, length, negative);   
formatBigIntegerBinary(value,  tmpBytes, offset, length, negative);   
formatBigIntegerBinary(value,  ByteBuffer buf, offset, length, negative);   
formatBigIntegerBinary(value,  null, 1);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask18> buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, length), offset, length, negative);   
formatBigIntegerBinary(value,  null, -1);, offset, length, negative);   
formatBigIntegerBinary(value,  new byte[], offset, length, negative);   
formatBigIntegerBinary(value,  buf,, offset, length, negative);   
formatBigIntegerBinary(value,  nullbuf, offset, length, negative);   
formatBigIntegerBinary(value,  len, buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset );, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask5> buffer, offset, length, negative);   
formatBigIntegerBinary(value,  []byte, offset, length, negative);   
formatBigIntegerBinary(value,  null, 8);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> ", offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> ', offset, length, negative);   
formatBigIntegerBinary(value,  pool, offset, length, negative);   
formatBigIntegerBinary(value,  null, length), offset, length, negative);   
formatBigIntegerBinary(value,  pos, buf, offset, length, negative);   
formatBigIntegerBinary(value,  data, buf, offset, length, negative);   
formatBigIntegerBinary(value,  tmpBuf, offset, length, negative);   
formatBigIntegerBinary(value,  buffer), offset, length, negative);   
formatBigIntegerBinary(value,  0, 8), offset, length, negative);   
formatBigIntegerBinary(value, buf<mask5> buf, offset, length, negative);   
formatBigIntegerBinary(value,  body, offset, length, negative);   
formatBigIntegerBinary(value,  buff, offset, offset, length, negative);   
formatBigIntegerBinary(value,  0, 0, offset, length, negative);   
formatBigIntegerBinary(value,  0);, offset, length, negative);   
formatBigIntegerBinary(value,  values, offset, length, negative);   
formatBigIntegerBinary(value,  []buf, offset, length, negative);   
formatBigIntegerBinary(value,  values, buf, offset, length, negative);   
formatBigIntegerBinary(value,  short, offset, length, negative);   
formatBigIntegerBinary(value,  root, buf, offset, length, negative);   
formatBigIntegerBinary(value,  0), offset, length, negative);   
formatBigIntegerBinary(value,  temp, buf, offset, length, negative);   
formatBigIntegerBinary(value,  null, buf, offset, length, negative);   
formatBigIntegerBinary(value,  bytes), offset, length, negative);   
formatBigIntegerBinary(value,  byte []buf, offset, length, negative);   
formatBigIntegerBinary(value,  nullCheck, offset, length, negative);   
formatBigIntegerBinary(value,  null buf, offset, length, negative);   
formatBigIntegerBinary(value,  bufSize), offset, length, negative);   
formatBigIntegerBinary(value,    buf, offset, length, negative);   
formatBigIntegerBinary(value,  tmpbuf, offset, length, negative);   
formatBigIntegerBinary(value,  bufSize, offset, length, negative);   
formatBigIntegerBinary(value,  b, offset, length, negative);   
formatBigIntegerBinary(value,  ByteBuffer, offset, length, negative);   
formatBigIntegerBinary(value,  blob, offset, length, negative);   
formatBigIntegerBinary(value,  mask, offset, length, negative);   
formatBigIntegerBinary(value,  append, offset, length, negative);   
formatBigIntegerBinary(value,  tmp, offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask5> offset, length, negative);   
formatBigIntegerBinary(value, buf,  buf, offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length), length, negative);   
formatBigIntegerBinary(value, buf,  buffer, offset, length, negative);   
formatBigIntegerBinary(value, buf,  0, offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, length); }, length, negative);   
formatBigIntegerBinary(value, buf,  0, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length, negative);, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length);, length, negative);   
formatBigIntegerBinary(value, buf, offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, length, negative);, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, length);, length, negative);   
formatBigIntegerBinary(value, buf,  0, length), length, negative);   
formatBigIntegerBinary(value, buf,  offset, length, negative), length, negative);   
formatBigIntegerBinary(value, buf,  offset, maxAsOctalChar), length, negative);   
formatBigIntegerBinary(value, buf,  offset, maxAsOctalChar, length, negative);   
formatBigIntegerBinary(value, buf,  offset, offset + length), length, negative);   
formatBigIntegerBinary(value, buf,  offset, length) { return offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset, offset, length, negative);   
formatBigIntegerBinary(value, buf,  0, length);, length, negative);   
formatBigIntegerBinary(value, buf,  offset, offset+length), length, negative);   
formatBigIntegerBinary(value, buf,  0, length, length, negative);   
formatBigIntegerBinary(value, buf,  offsets, length, negative);   
formatBigIntegerBinary(value, buf,  offset, maxAsOctalChar);, length, negative);   
formatBigIntegerBinary(value, buf,  0, 4, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset + 4, length);, length, negative);   
formatBigIntegerBinary(value, buf,  0, 8), length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, length, false);, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length, true);, length, negative);   
formatBigIntegerBinary(value, buf,  index, offset, length, negative);   
formatBigIntegerBinary(value, buf,  0, 8, length, negative);   
formatBigIntegerBinary(value, buf,  0, offset, length), length, negative);   
formatBigIntegerBinary(value, buf,  offset, 4, length, negative);   
formatBigIntegerBinary(value, buf,  off, offset, length, negative);   
formatBigIntegerBinary(value, buf,  length, length, negative);   
formatBigIntegerBinary(value, buf,  0, 8);, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset + 8, length);, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length) { }, length, negative);   
formatBigIntegerBinary(value, buf,  offset, 8), length, negative);   
formatBigIntegerBinary(value, buf,  0, 0, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length, false);, length, negative);   
formatBigIntegerBinary(value, buf,  offset, 4), length, negative);   
formatBigIntegerBinary(value, buf,  offset, length)., length, negative);   
formatBigIntegerBinary(value, buf,  offset, len, length, negative);   
formatBigIntegerBinary(value, buf,  offset, offset + length, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, length, true);, length, negative);   
formatBigIntegerBinary(value, buf,  -1, length, negative);   
formatBigIntegerBinary(value, buf,  0, 4), length, negative);   
formatBigIntegerBinary(value, buf,  offset, 8, length, negative);   
formatBigIntegerBinary(value, buf,  offset, 9, length, negative);   
formatBigIntegerBinary(value, buf,  offset, offset + length);, length, negative);   
formatBigIntegerBinary(value, buf,  ++offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset + length; }, length, negative);   
formatBigIntegerBinary(value, buf,  0, length, negative);, length, negative);   
formatBigIntegerBinary(value, buf,  pos, length, negative);   
formatBigIntegerBinary(value, buf,  0,, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, length) { , length, negative);   
formatBigIntegerBinary(value, buf,  0, offset), length, negative);   
formatBigIntegerBinary(value, buf,  offset + 4, length, negative);   
formatBigIntegerBinary(value, buf,  0, 1, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length)  return offset, length, negative);   
formatBigIntegerBinary(value, buf,  byte[] buf, offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset, len), length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset + length, length);, length, negative);   
formatBigIntegerBinary(value, buf,  0, buf.length - offset, length, negative);   
formatBigIntegerBinary(value, buf,  0, 1), length, negative);   
formatBigIntegerBinary(value, buf,  0, buf, offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length) {, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, length, length, negative);   
formatBigIntegerBinary(value, buf,  offset, 0, length, negative);   
formatBigIntegerBinary(value, buf,  offset, 0, length), length, negative);   
formatBigIntegerBinary(value, buf,  offset, 0), length, negative);   
formatBigIntegerBinary(value, buf,  offset, offset+length, length, negative);   
formatBigIntegerBinary(value, buf,  int offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset, offset+length);, length, negative);   
formatBigIntegerBinary(value, buf,  0, 0), length, negative);   
formatBigIntegerBinary(value, buf,  offset, length, 0), length, negative);   
formatBigIntegerBinary(value, buf,  offset, length, 0);, length, negative);   
formatBigIntegerBinary(value, buf,  offs, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset + 1, length);, length, negative);   
formatBigIntegerBinary(value, buf,  index, length, negative);   
formatBigIntegerBinary(value, buf,  0), length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, length)., length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset<mask2> offset, length, negative);   
formatBigIntegerBinary(value, buf,  start, offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length, false), length, negative);   
formatBigIntegerBinary(value, buf,  o, offset, length, negative);   
formatBigIntegerBinary(value, buf,  0, offset, length);, length, negative);   
formatBigIntegerBinary(value, buf,  offset + length, offset, length, negative);   
formatBigIntegerBinary(value, buf,  0, 2, length, negative);   
formatBigIntegerBinary(value, buf,  start, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length, true), length, negative);   
formatBigIntegerBinary(value, buf,  0, buf.length);, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, int length);, length, negative);   
formatBigIntegerBinary(value, buf,  buffer, offset, length), length, negative);   
formatBigIntegerBinary(value, buf,  pos, length), length, negative);   
formatBigIntegerBinary(value, buf,  offset + length), length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask6> offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset + 2, length);, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, length, null);, length, negative);   
formatBigIntegerBinary(value, buf,  0, offset + length), length, negative);   
formatBigIntegerBinary(value, buf,  0, buf.length, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length, positive);, length, negative);   
formatBigIntegerBinary(value, buf,  offset, 9), length, negative);   
formatBigIntegerBinary(value, buf,  offset, length, null);, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length); }, length, negative);   
formatBigIntegerBinary(value, buf,  idx, offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset, limit, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask3> offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, length); }, length, negative);   
formatBigIntegerBinary(value, buf,  0);, length, negative);   
formatBigIntegerBinary(value, buf,  offset + length, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset + 9, length);, length, negative);   
formatBigIntegerBinary(value, buf,  0, 4);, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask14> offset, length, negative);   
formatBigIntegerBinary(value, buf,  0, len, length, negative);   
formatBigIntegerBinary(value, buf,  index, length), length, negative);   
formatBigIntegerBinary(value, buf,  0, len), length, negative);   
formatBigIntegerBinary(value, buf,  offset, 1), length, negative);   
formatBigIntegerBinary(value, buf,  offset, length)  --, length, negative);   
formatBigIntegerBinary(value, buf,  0, 1);, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length, negative); }, length, negative);   
formatBigIntegerBinary(value, buf,  0, true);, length, negative);   
formatBigIntegerBinary(value, buf,  maxAsOctalChar, offset, length, negative);   
formatBigIntegerBinary(value, buf,  maxAsOctalChar, length, negative);   
formatBigIntegerBinary(value, buf,  0, offset + length);, length, negative);   
formatBigIntegerBinary(value, buf,  0, len);, length, negative);   
formatBigIntegerBinary(value, buf,  index, offset, length), length, negative);   
formatBigIntegerBinary(value, buf,  offset, length)  returns offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, length); return, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset,<mask2> offset, length, negative);   
formatBigIntegerBinary(value, buf,  0, 8, false);, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, length, 0);, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, final int length);, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, length, negative);   
formatBigIntegerBinary(value, buf,  buff, offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset + 3, length);, length, negative);   
formatBigIntegerBinary(value, buf,  final int offset, length, negative);   
formatBigIntegerBinary(value, buf,  off, length, length, negative);   
formatBigIntegerBinary(value, buf,  0, 3, length, negative);   
formatBigIntegerBinary(value, buf,  off, length), length, negative);   
formatBigIntegerBinary(value, buf,  offset, length) -----------------------------------------------------------------------, length, negative);   
formatBigIntegerBinary(value, buf,  0, length, false);, length, negative);   
formatBigIntegerBinary(value, buf,  offset, 16), length, negative);   
formatBigIntegerBinary(value, buf,  offset, length) ..., length, negative);   
formatBigIntegerBinary(value, buf,  pos, length);, length, negative);   
formatBigIntegerBinary(value, buf,  offset + length, offset + length);, length, negative);   
formatBigIntegerBinary(value, buf,  0, offset);, length, negative);   
formatBigIntegerBinary(value, buf,  pos, length, negative);, length, negative);   
formatBigIntegerBinary(value, buf,  offset + length);, length, negative);   
formatBigIntegerBinary(value, buf,  8, length, negative);   
formatBigIntegerBinary(value, buf,  0, 9);, length, negative);   
formatBigIntegerBinary(value, buf,  table, offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset, 3), length, negative);   
formatBigIntegerBinary(value, buf,  0, buf.length), length, negative);   
formatBigIntegerBinary(value, buf,  0, length, true);, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length)  -----------------------------------------------------------------------, length, negative);   
formatBigIntegerBinary(value, buf,  length, offset, length, negative);   
formatBigIntegerBinary(value, buf,  value, offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, length; }, length, negative);   
formatBigIntegerBinary(value, buf,  //offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset + 8, length, negative);   
formatBigIntegerBinary(value, buf,  0, 3);, length, negative);   
formatBigIntegerBinary(value, buf,  0, 2), length, negative);   
formatBigIntegerBinary(value, buf,  offset+4, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset + length, true);, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, length);<mask2> offset, length, negative);   
formatBigIntegerBinary(value, buf,  0, 0, 0), length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset + 6, length);, length, negative);   
formatBigIntegerBinary(value, buf,  offset, 0);, length, negative);   
formatBigIntegerBinary(value, buf,  byte[], offset, length, negative);   
formatBigIntegerBinary(value, buf,  0, length)., length, negative);   
formatBigIntegerBinary(value, buf,  offset, length) { return offset, length, negative);   
formatBigIntegerBinary(value, buf,  file, offset, length, negative);   
formatBigIntegerBinary(value, buf,  0, 5, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length) - offset, length, negative);   
formatBigIntegerBinary(value, buf,  0, 8, true);, length, negative);   
formatBigIntegerBinary(value, buf,  dst, offset, length, negative);   
formatBigIntegerBinary(value, buf,   offset, length, negative);   
formatBigIntegerBinary(value, buf,  0, 16), length, negative);   
formatBigIntegerBinary(value, buf,  0, 12), length, negative);   
formatBigIntegerBinary(value, buf,  cursor, offset, length, negative);   
formatBigIntegerBinary(value, buf,  0, 8, negative);, length, negative);   
formatBigIntegerBinary(value, buf,  offset, size), length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, length); ..., length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset + length, 8);, length, negative);   
formatBigIntegerBinary(value, buf,  0x80, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length, negative)., length, negative);   
formatBigIntegerBinary(value, buf,  0, 7, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length) returns offset + length, length, negative);   
formatBigIntegerBinary(value, buf,  0, 12);, length, negative);   
formatBigIntegerBinary(value, buf,  offset + length, offset + length), length, negative);   
formatBigIntegerBinary(value, buf,  offset++, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask5> 0, length, negative);   
formatBigIntegerBinary(value, buf,  len, offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset);, length, negative);   
formatBigIntegerBinary(value, buf,  buf[offset], offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> buf, offset, length);, length, negative);   
formatBigIntegerBinary(value, buf,  offset, -1, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length)  }, length, negative);   
formatBigIntegerBinary(value, buf,  offset, maxSize, length, negative);   
formatBigIntegerBinary(value, buf,  limit, length, negative);   
formatBigIntegerBinary(value, buf,  (int) offset, length, negative);   
formatBigIntegerBinary(value, buf,  0, false);, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length); //return offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset+length, length);, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset+4, length);, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, length );, length, negative);   
formatBigIntegerBinary(value, buf,  -offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset + length, offset + length, length, negative);   
formatBigIntegerBinary(value, buf,  offset , length, negative);   
formatBigIntegerBinary(value, buf,  index, length, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length) function, length, negative);   
formatBigIntegerBinary(value, buf,  offsets, length, length, negative);   
formatBigIntegerBinary(value, buf,  --offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset+1, length);, length, negative);   
formatBigIntegerBinary(value, buf,  0, 9, length, negative);   
formatBigIntegerBinary(value, buf,  count, length, negative);   
formatBigIntegerBinary(value, buf,  0, offset + length, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length) ;, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, length); */, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length): int, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset + 7, length);, length, negative);   
formatBigIntegerBinary(value, buf,  -1), length, negative);   
formatBigIntegerBinary(value, buf,  startOffset, offset, length, negative);   
formatBigIntegerBinary(value, buf,  _, offset, length, negative);   
formatBigIntegerBinary(value, buf,  length), length, negative);   
formatBigIntegerBinary(value, buf,  offset, length); returns offset, length, negative);   
formatBigIntegerBinary(value, buf,  off, length, negative);   
formatBigIntegerBinary(value, buf,  ..., length, negative);   
formatBigIntegerBinary(value, buf,             offset, length, negative);   
formatBigIntegerBinary(value, buf,  buffer, length, negative);   
formatBigIntegerBinary(value, buf,  ofs, length, negative);   
formatBigIntegerBinary(value, buf,  offset), length, negative);   
formatBigIntegerBinary(value, buf,  4, length, negative);   
formatBigIntegerBinary(value, buf,  end, length, negative);   
formatBigIntegerBinary(value, buf,  len, length, negative);   
formatBigIntegerBinary(value, buf,  1 byte, length, negative);   
formatBigIntegerBinary(value, buf,  // offset, length, negative);   
formatBigIntegerBinary(value, buf,  idx, length, negative);   
formatBigIntegerBinary(value, buf,  options, length, negative);   
formatBigIntegerBinary(value, buf,  base, length, negative);   
formatBigIntegerBinary(value, buf,  table, length, negative);   
formatBigIntegerBinary(value, buf, Offset, length, negative);   
formatBigIntegerBinary(value, buf,  1, length, negative);   
formatBigIntegerBinary(value, buf,  false, length, negative);   
formatBigIntegerBinary(value, buf,  caret, length, negative);   
formatBigIntegerBinary(value, buf, offset,  length, negative);   
formatBigIntegerBinary(value, buf, offset,  8, negative);   
formatBigIntegerBinary(value, buf, offset,  4, negative);   
formatBigIntegerBinary(value, buf, offset,  length, negative);, negative);   
formatBigIntegerBinary(value, buf, offset,  len, negative);   
formatBigIntegerBinary(value, buf, offset,  0, negative);   
formatBigIntegerBinary(value, buf, offset,  length, false, negative);   
formatBigIntegerBinary(value, buf, offset,  offset, length, negative);   
formatBigIntegerBinary(value, buf, offset,  length), negative);   
formatBigIntegerBinary(value, buf, offset,  length, true, negative);   
formatBigIntegerBinary(value, buf, offset,  length, false);, negative);   
formatBigIntegerBinary(value, buf, offset,  length, true);, negative);   
formatBigIntegerBinary(value, buf, offset,  length, negative), negative);   
formatBigIntegerBinary(value, buf, offset,  length, false), negative);   
formatBigIntegerBinary(value, buf, offset,  -1, negative);   
formatBigIntegerBinary(value, buf, offset,  length);, negative);   
formatBigIntegerBinary(value, buf, offset,  length, true), negative);   
formatBigIntegerBinary(value, buf, offset,  offset + length, negative);   
formatBigIntegerBinary(value, buf, offset,  9, negative);   
formatBigIntegerBinary(value, buf, offset, length, negative);   
formatBigIntegerBinary(value, buf, offset,  length, negative, negative);   
formatBigIntegerBinary(value, buf, offset,  int, negative);   
formatBigIntegerBinary(value, buf, offset,  length, null);, negative);   
formatBigIntegerBinary(value, buf, offset,  null, negative);   
formatBigIntegerBinary(value, buf, offset,  maxAsOctalChar, negative);   
formatBigIntegerBinary(value, buf, offset,  true, negative);   
formatBigIntegerBinary(value, buf, offset,  3, negative);   
formatBigIntegerBinary(value, buf, offset,  false, negative);   
formatBigIntegerBinary(value, buf, offset,  length, long, negative);   
formatBigIntegerBinary(value, buf, offset,  6, negative);   
formatBigIntegerBinary(value, buf, offset,  length, 0), negative);   
formatBigIntegerBinary(value, buf, offset,  size, negative);   
formatBigIntegerBinary(value, buf, offset,  length<mask5> length, negative);   
formatBigIntegerBinary(value, buf, offset,  value, negative);   
formatBigIntegerBinary(value, buf, offset,  offset+length, negative);   
formatBigIntegerBinary(value, buf, offset,  7, negative);   
formatBigIntegerBinary(value, buf, offset,  12, negative);   
formatBigIntegerBinary(value, buf, offset,  length, null, negative);   
formatBigIntegerBinary(value, buf, offset,  10, negative);   
formatBigIntegerBinary(value, buf, offset,  2, negative);   
formatBigIntegerBinary(value, buf, offset,  int length, negative);   
formatBigIntegerBinary(value, buf, offset,  0, false, negative);   
formatBigIntegerBinary(value, buf, offset,  1, negative);   
formatBigIntegerBinary(value, buf, offset,  length, 0);, negative);   
formatBigIntegerBinary(value, buf, offset,  0, length, negative);   
formatBigIntegerBinary(value, buf, offset,  length, null), negative);   
formatBigIntegerBinary(value, buf, offset,  1 byte, negative);   
formatBigIntegerBinary(value, buf, offset,  length, 0, negative);   
formatBigIntegerBinary(value, buf, offset,  8, false, negative);   
formatBigIntegerBinary(value, buf, offset,  buf, offset, length, negative);   
formatBigIntegerBinary(value, buf, offset,  16, negative);   
formatBigIntegerBinary(value, buf, offset,  11, negative);   
formatBigIntegerBinary(value, buf, offset,  64, negative);   
formatBigIntegerBinary(value, buf, offset,  *, negative), negative);   
formatBigIntegerBinary(value, buf, offset,  5, negative);   
formatBigIntegerBinary(value, buf, offset,  0, true, negative);   
formatBigIntegerBinary(value, buf, offset,  0, 0, negative);   
formatBigIntegerBinary(value, buf, offset,  length, boolean negative);, negative);   
formatBigIntegerBinary(value, buf, offset,  limit, negative);   
formatBigIntegerBinary(value, buf, offset,  length<mask1> length, negative);   
formatBigIntegerBinary(value, buf, offset,  8, false);, negative);   
formatBigIntegerBinary(value, buf, offset,  8, true, negative);   
formatBigIntegerBinary(value, buf, offset,  36, negative);   
formatBigIntegerBinary(value, buf, offset,  length, negative);   
formatBigIntegerBinary(value, buf, offset,  20, negative);   
formatBigIntegerBinary(value, buf, offset,  buffer, offset, length, negative);   
formatBigIntegerBinary(value, buf, offset,  offset, negative);   
formatBigIntegerBinary(value, buf, offset,  8), negative);   
formatBigIntegerBinary(value, buf, offset,  32, negative);   
formatBigIntegerBinary(value, buf, offset,  length, short, negative);   
formatBigIntegerBinary(value, buf, offset,  length, binary, negative);   
formatBigIntegerBinary(value, buf, offset,  length, length, negative);   
formatBigIntegerBinary(value, buf, offset,  length, 0x80, negative);   
formatBigIntegerBinary(value, buf, offset,  len, negative);, negative);   
formatBigIntegerBinary(value, buf, offset,  40, negative);   
formatBigIntegerBinary(value, buf, offset,  length, binary), negative);   
formatBigIntegerBinary(value, buf, offset,  length, -1, negative);   
formatBigIntegerBinary(value, buf, offset,  length)., negative);   
formatBigIntegerBinary(value, buf, offset,  (int) length, negative);   
formatBigIntegerBinary(value, buf, offset,  80, negative);   
formatBigIntegerBinary(value, buf, offset,  length - 1, negative);   
formatBigIntegerBinary(value, buf, offset,  null);, negative);   
formatBigIntegerBinary(value, buf, offset,  count, negative);   
formatBigIntegerBinary(value, buf, offset,  encoding, negative);   
formatBigIntegerBinary(value, buf, offset,  lenght, negative);   
formatBigIntegerBinary(value, buf, offset,  length, byte, negative);   
formatBigIntegerBinary(value, buf, offset,  null), negative);   
formatBigIntegerBinary(value, buf, offset,  long, negative);   
formatBigIntegerBinary(value, buf, offset,  buffer, negative);   
formatBigIntegerBinary(value, buf, offset,  -length, negative);   
formatBigIntegerBinary(value, buf, offset,  length, 1), negative);   
formatBigIntegerBinary(value, buf, offset,  offset, length), negative);   
formatBigIntegerBinary(value, buf, offset,  length, unsigned), negative);   
formatBigIntegerBinary(value, buf, offset,  255, negative);   
formatBigIntegerBinary(value, buf, offset,  length, positive);, negative);   
formatBigIntegerBinary(value, buf, offset,  position, length, negative);   
formatBigIntegerBinary(value, buf, offset,  3), negative);   
formatBigIntegerBinary(value, buf, offset,  length, true, false, negative);   
formatBigIntegerBinary(value, buf, offset,  8, true);, negative);   
formatBigIntegerBinary(value, buf, offset,  length - 4, negative);   
formatBigIntegerBinary(value, buf, offset,  length, 0, 0, negative);   
formatBigIntegerBinary(value, buf, offset,  8, length, negative);   
formatBigIntegerBinary(value, buf, offset,  length, 8, negative);   
formatBigIntegerBinary(value, buf, offset,  4), negative);   
formatBigIntegerBinary(value, buf, offset,  8, false), negative);   
formatBigIntegerBinary(value, buf, offset,  8, 0, negative);   
formatBigIntegerBinary(value, buf, offset,  0x80, negative);   
formatBigIntegerBinary(value, buf, offset,  len, negative), negative);   
formatBigIntegerBinary(value, buf, offset,  length, 0, false, negative);   
formatBigIntegerBinary(value, buf, offset,  8, negative);, negative);   
formatBigIntegerBinary(value, buf, offset,  length, '-'), negative);   
formatBigIntegerBinary(value, buf, offset,  8*length, negative);   
formatBigIntegerBinary(value, buf, offset,  4 bytes, negative);   
formatBigIntegerBinary(value, buf, offset,  lengths, negative);   
formatBigIntegerBinary(value, buf, offset,  size), negative);   
formatBigIntegerBinary(value, buf, offset,  lenient, negative);   
formatBigIntegerBinary(value, buf, offset,  4, false, negative);   
formatBigIntegerBinary(value, buf, offset,  (int)length, negative);   
formatBigIntegerBinary(value, buf, offset,  len, negative, negative);   
formatBigIntegerBinary(value, buf, offset,  length, 0xff), negative);   
formatBigIntegerBinary(value, buf, offset,  int, boolean, negative);   
formatBigIntegerBinary(value, buf, offset,  LENGTH, negative);   
formatBigIntegerBinary(value, buf, offset,  12 bytes, negative);   
formatBigIntegerBinary(value, buf, offset,  31, negative);   
formatBigIntegerBinary(value, buf, offset,  length, int, negative);   
formatBigIntegerBinary(value, buf, offset,  0, false);, negative);   
formatBigIntegerBinary(value, buf, offset,  length, negative)., negative);   
formatBigIntegerBinary(value, buf, offset,  16), negative);   
formatBigIntegerBinary(value, buf, offset,  length, true, true, negative);   
formatBigIntegerBinary(value, buf, offset,  length, 4, negative);   
formatBigIntegerBinary(value, buf, offset,  24, negative);   
formatBigIntegerBinary(value, buf, offset,  null, false, negative);   
formatBigIntegerBinary(value, buf, offset,  9, false, negative);   
formatBigIntegerBinary(value, buf, offset,  length - 8, negative);   
formatBigIntegerBinary(value, buf, offset,  type, negative);   
formatBigIntegerBinary(value, buf, offset,  8bit, negative);   
formatBigIntegerBinary(value, buf, offset,  64, false, negative);   
formatBigIntegerBinary(value, buf, offset,  0, 1, negative);   
formatBigIntegerBinary(value, buf, offset,  bytes, negative);   
formatBigIntegerBinary(value, buf, offset,  length) { }, negative);   
formatBigIntegerBinary(value, buf, offset,  0, 8, negative);   
formatBigIntegerBinary(value, buf, offset,  width, negative);   
formatBigIntegerBinary(value, buf, offset,  offset + length), negative);   
formatBigIntegerBinary(value, buf, offset,  int offset, int length, negative);   
formatBigIntegerBinary(value, buf, offset,  len, false, negative);   
formatBigIntegerBinary(value, buf, offset,  length - offset, negative);   
formatBigIntegerBinary(value, buf, offset,  buf, offset + length, negative);   
formatBigIntegerBinary(value, buf, offset,  8 bytes, negative);   
formatBigIntegerBinary(value, buf, offset,  byte[]), negative);   
formatBigIntegerBinary(value, buf, offset,  (byte) length, negative);   
formatBigIntegerBinary(value, buf, offset,   length, negative);   
formatBigIntegerBinary(value, buf, offset,  19, negative);   
formatBigIntegerBinary(value, buf, offset,  length, length), negative);   
formatBigIntegerBinary(value, buf, offset,  12), negative);   
formatBigIntegerBinary(value, buf, offset,  length, 8), negative);   
formatBigIntegerBinary(value, buf, offset,  Length, negative);   
formatBigIntegerBinary(value, buf, offset,  length, boolean negative), negative);   
formatBigIntegerBinary(value, buf, offset,  8, true), negative);   
formatBigIntegerBinary(value, buf, offset,  length<mask1> length);, negative);   
formatBigIntegerBinary(value, buf, offset,  len), negative);   
formatBigIntegerBinary(value, buf, offset,  length, 1);, negative);   
formatBigIntegerBinary(value, buf, offset,  buf[offset], length, negative);   
formatBigIntegerBinary(value, buf, offset,  length, 0, true, negative);   
formatBigIntegerBinary(value, buf, offset,  length, boolean negative, negative);   
formatBigIntegerBinary(value, buf, offset,  MAXSIZE, negative);   
formatBigIntegerBinary(value, buf, offset,  offset+length), negative);   
formatBigIntegerBinary(value, buf, offset,  size, negative), negative);   
formatBigIntegerBinary(value, buf, offset,  2^31 - 1, negative);   
formatBigIntegerBinary(value, buf, offset,  2), negative);   
formatBigIntegerBinary(value, buf, offset,  length, isNegative);, negative);   
formatBigIntegerBinary(value, buf, offset,  offset + length, false, negative);   
formatBigIntegerBinary(value, buf, offset,  pos, length, negative);   
formatBigIntegerBinary(value, buf, offset,  offset+length, false, negative);   
formatBigIntegerBinary(value, buf, offset,  9), negative);   
formatBigIntegerBinary(value, buf, offset,  9, false);, negative);   
formatBigIntegerBinary(value, buf, offset,  6), negative);   
formatBigIntegerBinary(value, buf, offset,  10, false, negative);   
formatBigIntegerBinary(value, buf, offset,  length, positive, negative);   
formatBigIntegerBinary(value, buf, offset,  size, length, negative);   
formatBigIntegerBinary(value, buf, offset,  tail, negative);   
formatBigIntegerBinary(value, buf, offset,  length, false, false, negative);   
formatBigIntegerBinary(value, buf, offset,  length - 2, negative);   
formatBigIntegerBinary(value, buf, offset,  null, true, negative);   
formatBigIntegerBinary(value, buf, offset,  length, int), negative);   
formatBigIntegerBinary(value, buf, offset,  offset + length, length, negative);   
formatBigIntegerBinary(value, buf, offset,  length, integer, negative);   
formatBigIntegerBinary(value, buf, offset,  length, 7, negative);   
formatBigIntegerBinary(value, buf, offset,  body, negative);   
formatBigIntegerBinary(value, buf, offset,  length, long), negative);   
formatBigIntegerBinary(value, buf, offset,  15, negative);   
formatBigIntegerBinary(value, buf, offset,  16, false, negative);   
formatBigIntegerBinary(value, buf, offset,  uint64, negative);   
formatBigIntegerBinary(value, buf, offset,  number of bytes, negative);   
formatBigIntegerBinary(value, buf, offset,  length, byte[]), negative);   
formatBigIntegerBinary(value, buf, offset,  4, false);, negative);   
formatBigIntegerBinary(value, buf, offset,  *, negative = false), negative);   
formatBigIntegerBinary(value, buf, offset,  length, 0xffff), negative);   
formatBigIntegerBinary(value, buf, offset,  12, false, negative);   
formatBigIntegerBinary(value, buf, offset,  4, 8, negative);   
formatBigIntegerBinary(value, buf, offset,  3, false);, negative);   
formatBigIntegerBinary(value, buf, offset,  length, 4), negative);   
formatBigIntegerBinary(value, buf, offset,  0, false), negative);   
formatBigIntegerBinary(value, buf, offset,  4, 0, negative);   
formatBigIntegerBinary(value, buf, offset,  pos, negative);   
formatBigIntegerBinary(value, buf, offset,  byte, negative);   
formatBigIntegerBinary(value, buf, offset,  8, 8, negative);   
formatBigIntegerBinary(value, buf, offset,  length, positive), negative);   
formatBigIntegerBinary(value, buf, offset,  9, true, negative);   
formatBigIntegerBinary(value, buf, offset,  12, true, negative);   
formatBigIntegerBinary(value, buf, offset,  length, 0xff, negative);   
formatBigIntegerBinary(value, buf, offset,  0, true);, negative);   
formatBigIntegerBinary(value, buf, offset,  short, negative);   
formatBigIntegerBinary(value, buf, offset,  true, false, negative);   
formatBigIntegerBinary(value, buf, offset,  4, true, negative);   
formatBigIntegerBinary(value, buf, offset,  Math.max, negative);   
formatBigIntegerBinary(value, buf, offset,  length, true, negative);   
formatBigIntegerBinary(value, buf, offset,  16, true, negative);   
formatBigIntegerBinary(value, buf, offset,  length, 9, negative);   
formatBigIntegerBinary(value, buf, offset,  2*length, negative);   
formatBigIntegerBinary(value, buf, offset,  0, 0, 0, negative);   
formatBigIntegerBinary(value, buf, offset,  length, 16), negative);   
formatBigIntegerBinary(value, buf, offset,  (int) value, negative);   
formatBigIntegerBinary(value, buf, offset,  -1, -1, negative);   
formatBigIntegerBinary(value, buf, offset,  0, length), negative);   
formatBigIntegerBinary(value, buf, offset,  8, negative, negative);   
formatBigIntegerBinary(value, buf, offset,  byte[] length, negative);   
formatBigIntegerBinary(value, buf, offset,  offset + length, true, negative);   
formatBigIntegerBinary(value, buf, offset,  (int)value, negative);   
formatBigIntegerBinary(value, buf, offset,  8 * length, negative);   
formatBigIntegerBinary(value, buf, offset,  23, negative);   
formatBigIntegerBinary(value, buf, offset,  null, false);, negative);   
formatBigIntegerBinary(value, buf, offset,  length, short), negative);   
formatBigIntegerBinary(value, buf, offset,  100, negative);   
formatBigIntegerBinary(value, buf, offset,  *, negative=false), negative);   
formatBigIntegerBinary(value, buf, offset,  length, unsigned int, negative);   
formatBigIntegerBinary(value, buf, offset,  length, false, true, negative);   
formatBigIntegerBinary(value, buf, offset,  length, byte), negative);   
formatBigIntegerBinary(value, buf, offset,  offset+length, true, negative);   
formatBigIntegerBinary(value, buf, offset,  size, negative);, negative);   
formatBigIntegerBinary(value, buf, offset,  header, negative);   
formatBigIntegerBinary(value, buf, offset,  10, false);, negative);   
formatBigIntegerBinary(value, buf, offset,  bytes, offset, length, negative);   
formatBigIntegerBinary(value, buf, offset,  length, 64), negative);   
formatBigIntegerBinary(value, buf, offset,  int length, boolean negative, negative);   
formatBigIntegerBinary(value, buf, offset,  0, true), negative);   
formatBigIntegerBinary(value, buf, offset,  64, false);, negative);   
formatBigIntegerBinary(value, buf, offset,  26, negative);   
formatBigIntegerBinary(value, buf, offset,  30, negative);   
formatBigIntegerBinary(value, buf, offset,  name, negative);   
formatBigIntegerBinary(value, buf, offset,  stream, negative);   
formatBigIntegerBinary(value, buf, offset, length,  negative);   
formatBigIntegerBinary(value, buf, offset, length,  false);   
formatBigIntegerBinary(value, buf, offset, length,  true);   
formatBigIntegerBinary(value, buf, offset, length,  0);   
formatBigIntegerBinary(value, buf, offset, length,  positive);   
formatBigIntegerBinary(value, buf, offset, length,  negative););   
formatBigIntegerBinary(value, buf, offset, length,  null);   
formatBigIntegerBinary(value, buf, offset, length,  -1);   
formatBigIntegerBinary(value, buf, offset, length,  length);   
formatBigIntegerBinary(value, buf, offset, length,  long);   
formatBigIntegerBinary(value, buf, offset, length,  positive););   
formatBigIntegerBinary(value, buf, offset, length, negative);   
formatBigIntegerBinary(value, buf, offset, length,  boolean negative);   
formatBigIntegerBinary(value, buf, offset, length,  0x80);   
formatBigIntegerBinary(value, buf, offset, length,  binary);   
formatBigIntegerBinary(value, buf, offset, length,  1);   
formatBigIntegerBinary(value, buf, offset, length,  Negative);   
formatBigIntegerBinary(value, buf, offset, length,  !negative);   
formatBigIntegerBinary(value, buf, offset, length,  negative);   
formatBigIntegerBinary(value, buf, offset, length,  negative));   
formatBigIntegerBinary(value, buf, offset, length,  negative, true);   
formatBigIntegerBinary(value, buf, offset, length,  short);   
formatBigIntegerBinary(value, buf, offset, length,  byte);   
formatBigIntegerBinary(value, buf, offset, length,  0xff);   
formatBigIntegerBinary(value, buf, offset, length,  positive, negative);   
formatBigIntegerBinary(value, buf, offset, length,  true, false);   
formatBigIntegerBinary(value, buf, offset, length,  0, false);   
formatBigIntegerBinary(value, buf, offset, length,  zero);   
formatBigIntegerBinary(value, buf, offset, length,  int);   
formatBigIntegerBinary(value, buf, offset, length,  isNegative);   
formatBigIntegerBinary(value, buf, offset, length,  negative;);   
formatBigIntegerBinary(value, buf, offset, length,  signed);   
formatBigIntegerBinary(value, buf, offset, length,  overflow);   
formatBigIntegerBinary(value, buf, offset, length,  positive integer);   
formatBigIntegerBinary(value, buf, offset, length,  true, true);   
formatBigIntegerBinary(value, buf, offset, length,  negative<mask5> negative);   
formatBigIntegerBinary(value, buf, offset, length,  0, true);   
formatBigIntegerBinary(value, buf, offset, length,  false, false);   
formatBigIntegerBinary(value, buf, offset, length, NEGATIVE);   
formatBigIntegerBinary(value, buf, offset, length,  positive));   
formatBigIntegerBinary(value, buf, offset, length,  negative );   
formatBigIntegerBinary(value, buf, offset, length,  negative, false);   
formatBigIntegerBinary(value, buf, offset, length,  nonnegative);   
formatBigIntegerBinary(value, buf, offset, length,  negative=false);   
formatBigIntegerBinary(value, buf, offset, length,  pos);   
formatBigIntegerBinary(value, buf, offset, length,  zeroPadding);   
formatBigIntegerBinary(value, buf, offset, length,  8);   
formatBigIntegerBinary(value, buf, offset, length,  unsigned int);   
formatBigIntegerBinary(value, buf, offset, length,  false, true);   
formatBigIntegerBinary(value, buf, offset, length,  0xFF);   
formatBigIntegerBinary(value, buf, offset, length,  positive int);   
formatBigIntegerBinary(value, buf, offset, length,  unsigned);   
formatBigIntegerBinary(value, buf, offset, length,  '-'));   
formatBigIntegerBinary(value, buf, offset, length,  0x00);   
formatBigIntegerBinary(value, buf, offset, length,  negative<mask1> negative);   
formatBigIntegerBinary(value, buf, offset, length,  negative<mask5> true);   
formatBigIntegerBinary(value, buf, offset, length,  0xffff);   
formatBigIntegerBinary(value, buf, offset, length,  negatives);   
formatBigIntegerBinary(value, buf, offset, length,  64);   
formatBigIntegerBinary(value, buf, offset, length,  size);   
formatBigIntegerBinary(value, buf, offset, length,  negative = false);   
formatBigIntegerBinary(value, buf, offset, length,  true););   
formatBigIntegerBinary(value, buf, offset, length,  0, 0);   
formatBigIntegerBinary(value, buf, offset, length,  4);   
formatBigIntegerBinary(value, buf, offset, length,  negative<mask1> false);   
formatBigIntegerBinary(value, buf, offset, length,  '-');   
formatBigIntegerBinary(value, buf, offset, length,  0x80000000);   
formatBigIntegerBinary(value, buf, offset, length,  negated);   
formatBigIntegerBinary(value, buf, offset, length, isNegative);   
formatBigIntegerBinary(value, buf, offset, length,  0););   
formatBigIntegerBinary(value, buf, offset, length,  negative = true);   
formatBigIntegerBinary(value, buf, offset, length,  negative<mask1> length);   
formatBigIntegerBinary(value, buf, offset, length,  integer);   
formatBigIntegerBinary(value, buf, offset, length,  non-negative);   
formatBigIntegerBinary(value, buf, offset, length,  length, negative);   
formatBigIntegerBinary(value, buf, offset, length,  1 byte);   
formatBigIntegerBinary(value, buf, offset, length,  flag);   
formatBigIntegerBinary(value, buf, offset, length,  positive or negative);   
formatBigIntegerBinary(value, buf, offset, length,  ++offset);   
formatBigIntegerBinary(value, buf, offset, length,  exclusive);   
formatBigIntegerBinary(value, buf, offset, length,  negative, null);   
formatBigIntegerBinary(value, buf, offset, length,  0, negative);   
formatBigIntegerBinary(value, buf, offset, length,  0x8000);   
formatBigIntegerBinary(value, buf, offset, length,  value);   
formatBigIntegerBinary(value, buf, offset, length,  Long);   
formatBigIntegerBinary(value, buf, offset, length,  positive bool);   
formatBigIntegerBinary(value, buf, offset, length,  negative<mask1> true);   
formatBigIntegerBinary(value, buf, offset, length, false);   
formatBigIntegerBinary(value, buf, offset, length,  strict);   
formatBigIntegerBinary(value, buf, offset, length,  nonNegative);   
formatBigIntegerBinary(value, buf, offset, length,  type);   
formatBigIntegerBinary(value, buf, offset, length,  reverse);   
formatBigIntegerBinary(value, buf, offset, length,  len);   
formatBigIntegerBinary(value, buf, offset, length,  false););   
formatBigIntegerBinary(value, buf, offset, length,  null););   
formatBigIntegerBinary(value, buf, offset, length,  9);   
formatBigIntegerBinary(value, buf, offset, length,  negative=true);   
formatBigIntegerBinary(value, buf, offset, length,  positive boolean);   
formatBigIntegerBinary(value, buf, offset, length,  positive;);   
formatBigIntegerBinary(value, buf, offset, length,  10);   
formatBigIntegerBinary(value, buf, offset, length,  0));   
formatBigIntegerBinary(value, buf, offset, length,  bytes);   
formatBigIntegerBinary(value, buf, offset, length,  0x00000000);   
formatBigIntegerBinary(value, buf, offset, length,  bool negative);   
formatBigIntegerBinary(value, buf, offset, length,  true));   
formatBigIntegerBinary(value, buf, offset, length,  2);   
formatBigIntegerBinary(value, buf, offset, length,  7);   
formatBigIntegerBinary(value, buf, offset, length,  lenient);   
formatBigIntegerBinary(value, buf, offset, length,  negative<mask5> false);   
formatBigIntegerBinary(value, buf, offset, length, true);   
formatBigIntegerBinary(value, buf, offset, length,  positive || negative);   
formatBigIntegerBinary(value, buf, offset, length,  full);   
formatBigIntegerBinary(value, buf, offset, length,  ASCII);   
formatBigIntegerBinary(value, buf, offset, length,  truncated);   
formatBigIntegerBinary(value, buf, offset, length,  16);   
formatBigIntegerBinary(value, buf, offset, length,  3);   
formatBigIntegerBinary(value, buf, offset, length,  bigger);   
formatBigIntegerBinary(value, buf, offset, length,  0x0);   
formatBigIntegerBinary(value, buf, offset, length,  negative bool);   
formatBigIntegerBinary(value, buf, offset, length,  Negative integer);   
formatBigIntegerBinary(value, buf, offset, length,  unsigned integer);   
formatBigIntegerBinary(value, buf, offset, length,  empty);   
formatBigIntegerBinary(value, buf, offset, length,  0xffffffff);   
formatBigIntegerBinary(value, buf, offset, length,  unsigned long);   
formatBigIntegerBinary(value, buf, offset, length,  bigEndian);   
formatBigIntegerBinary(value, buf, offset, length,  position);   
formatBigIntegerBinary(value, buf, offset, length,  minus sign);   
formatBigIntegerBinary(value, buf, offset, length,  reversed);   
formatBigIntegerBinary(value, buf, offset, length,  absolute);   
formatBigIntegerBinary(value, buf, offset, length,  padding);   
formatBigIntegerBinary(value, buf, offset, length,  formatLongBinary);   
formatBigIntegerBinary(value, buf, offset, length,  nil);   
formatBigIntegerBinary(value, buf, offset, length,  0xFFFFFF);   
formatBigIntegerBinary(value, buf, offset, length,  positive|negative);   
formatBigIntegerBinary(value, buf, offset, length,  negative true);   
formatBigIntegerBinary(value, buf, offset, length,  negative<mask1> 1);   
formatBigIntegerBinary(value, buf, offset, length,  negative, length);   
formatBigIntegerBinary(value, buf, offset, length,  0x10);   
formatBigIntegerBinary(value, buf, offset, length,  "-", true);   
formatBigIntegerBinary(value, buf, offset, length,  compressed);   
formatBigIntegerBinary(value, buf, offset, length,  prefix);   
formatBigIntegerBinary(value, buf, offset, length,  32);   
formatBigIntegerBinary(value, buf, offset, length,  0x01);   
formatBigIntegerBinary(value, buf, offset, length,  negative boolean);   
formatBigIntegerBinary(value, buf, offset, length,  negative<mask5> positive);   
formatBigIntegerBinary(value, buf, offset, length,  zeroPad);   
formatBigIntegerBinary(value, buf, offset, length,  this);   
formatBigIntegerBinary(value, buf, offset, length,  "-");   
formatBigIntegerBinary(value, buf, offset, length,  false);   
formatBigIntegerBinary(value, buf, offset, length,  canonical);   
formatBigIntegerBinary(value, buf, offset, length,  large);   
formatBigIntegerBinary(value, buf, offset, length,  raw);   
formatBigIntegerBinary(value, buf, offset, length, Negative);   
formatBigIntegerBinary(value, buf, offset, length,  extended);   
formatBigIntegerBinary(value, buf, offset, length,  length, false);   
formatBigIntegerBinary(value, buf, offset, length,  0x8);   
formatBigIntegerBinary(value, buf, offset, length,  negative).);   
formatBigIntegerBinary(value, buf, offset, length,  flags);   
formatBigIntegerBinary(value, buf, offset, length,  negative.);   
formatBigIntegerBinary(value, buf, offset, length,  true);   
formatBigIntegerBinary(value, buf, offset, length,  extension);   
formatBigIntegerBinary(value, buf, offset, length,  unsigned));   
formatBigIntegerBinary(value, buf, offset, length,  '+'));   
formatBigIntegerBinary(value, buf, offset, length,  double);   
formatBigIntegerBinary(value, buf, offset, length,  bool);   
formatBigIntegerBinary(value, buf, offset, length,  temporary);   
formatBigIntegerBinary(value, buf, offset, length,  overflowPolicy);   
formatBigIntegerBinary(value, buf, offset, length,  truncating);   
formatBigIntegerBinary(value, buf, offset, length, 0);   
formatBigIntegerBinary(value, buf, offset, length,  positiveInteger);   
formatBigIntegerBinary(value, buf, offset, length,  limit);   
formatBigIntegerBinary(value, buf, offset, length,  null));   
formatBigIntegerBinary(value, buf, offset, length,  offset);   
formatBigIntegerBinary(value, buf, offset, length,  40);   
formatBigIntegerBinary(value, buf, offset, length,  positive; negative);   
formatBigIntegerBinary(value, buf, offset, length,  Boolean);   
formatBigIntegerBinary(value, buf, offset, length,  +1);   
formatBigIntegerBinary(value, buf, offset, length,  compact);   
formatBigIntegerBinary(value, buf, offset, length,  false));   
formatBigIntegerBinary(value, buf, offset, length,  0xf);   
formatBigIntegerBinary(value, buf, offset, length,  octal);   
formatBigIntegerBinary(value, buf, offset, length,  LONG);   
formatBigIntegerBinary(value, buf, offset, length,  negative, 0);   
formatBigIntegerBinary(value, buf, offset, length,  length, true);   
formatBigIntegerBinary(value, buf, offset, length,  exponent);   
formatBigIntegerBinary(value, buf, offset, length,  negate);   
formatBigIntegerBinary(value, buf, offset, length,  boolean negative););   
formatBigIntegerBinary(value, buf, offset, length,  "-", false);   
formatBigIntegerBinary(value, buf, offset, length,  decimal);   
formatBigIntegerBinary(value, buf, offset, length,  0, 1);   
formatBigIntegerBinary(value, buf, offset, length,  Negative value);   
formatBigIntegerBinary(value, buf, offset, length,  buffer);   
formatBigIntegerBinary(value, buf, offset, length,  positive flag);   
formatBigIntegerBinary(value, buf, offset, length,  0x02);   
formatBigIntegerBinary(value, buf, offset, length,  leadingZero);   
formatBigIntegerBinary(value, buf, offset, length,  lowerCase);   
formatBigIntegerBinary(value, buf, offset, length,  compression);   
formatBigIntegerBinary(value, buf, offset, length,  small);   
formatBigIntegerBinary(value, buf, offset, length,  '+');   
formatBigIntegerBinary(value, buf, offset, length,  symbolic);   
formatBigIntegerBinary(value, buf, offset, length,  uint8);   
formatBigIntegerBinary(value, buf, offset, length,  negative<mask5> 0);   
formatBigIntegerBinary(value, buf, offset, length,  Negative flag);   
formatBigIntegerBinary(value, buf, offset, length,  absolute value);   
formatBigIntegerBinary(value, buf, offset, length,  negative<mask1> null);   
formatBigIntegerBinary(value, buf, offset, length,  true, negative);   
formatBigIntegerBinary(value, buf, offset, length,  negative, binary);   
formatBigIntegerBinary(value, buf, offset, length,  0x30);   
formatBigIntegerBinary(value, buf, offset, length,  0x04);   
formatBigIntegerBinary(value, buf, offset, length,  maximum length);   
formatBigIntegerBinary(value, buf, offset, length,  0x100);   
formatBigIntegerBinary(value, buf, offset, length,  Negative number);   
formatBigIntegerBinary(value, buf, offset, length,  true|false);   
formatBigIntegerBinary(value, buf, offset, length,  0xFFFFFFFF);   
formatBigIntegerBinary(value, buf, offset, length,  special cases);   
formatBigIntegerBinary(value, buf, offset, length,  0x0000);   
formatBigIntegerBinary(value, buf, offset, length,  negative<mask1> 4);   
formatBigIntegerBinary(value, buf, offset, length,  0b100000000);   
formatBigIntegerBinary(value, buf, offset, length,  negative, zero);   
formatBigIntegerBinary(value, buf, offset, length,  negative, unsigned);   
formatBigIntegerBinary(value, buf, offset, length,  -2);   
formatBigIntegerBinary(value, buf, offset, length,  false, 0);   
formatBigIntegerBinary(value, buf, offset, length,  0x20);   
formatBigIntegerBinary(value, buf, offset, length,  neg));   
formatBigIntegerBinary(value, buf, offset, length,  positive number);   
formatBigIntegerBinary(value, buf, offset, length,  zero padding);   
formatBigIntegerBinary(value, buf, offset, length,  0xff));   
formatBigIntegerBinary(value, buf, offset, length,  negative, long);   
formatBigIntegerBinary(value, buf, offset, length,  null, false);   
formatBigIntegerBinary(value, buf, offset, length,  negative<mask1> ");   
formatBigIntegerBinary(value, buf, offset, length,  non-binary);   
formatBigIntegerBinary(value, buf, offset, length,  negative|true);   
formatBigIntegerBinary(value, buf, offset, length,  negative); });   
formatBigIntegerBinary(value, buf, offset, length,  0, length);   
formatBigIntegerBinary(value, buf, offset, length,  non-zero);   
formatBigIntegerBinary(value, buf, offset, length,  0x1000);   
formatBigIntegerBinary(value, buf, offset, length,  TarConstants);   
formatBigIntegerBinary(value, buf, offset, length,  true, 0);   
formatBigIntegerBinary(value, buf, offset, length,  positive<mask1> negative);   
formatBigIntegerBinary(value, buf, offset, length,  number of bytes);   
formatBigIntegerBinary(value, buf, offset, length,  negative<mask1> 10);   
formatBigIntegerBinary(value, buf, offset, length,  negative<mask1> 7);   
formatBigIntegerBinary(value, buf, offset, length,  negative<mask1> 8);   
formatBigIntegerBinary(value, buf, offset, length,  negative); );   
formatBigIntegerBinary(value, buf, offset, length,  0<mask1> 1);   
formatBigIntegerBinary(value, buf, offset, length,  positive<mask1> false);   
formatBigIntegerBinary(value, buf, offset, length,  0<mask1> false);   
formatBigIntegerBinary(value, buf, offset, length,  0b000);   
formatBigIntegerBinary(value, buf, offset, length,  negative<mask1> positive);   
formatBigIntegerBinary(value, buf, offset, length, );   
formatBigIntegerBinary(value, buf, offset, length, negative, true);   
formatBigIntegerBinary(value, buf, offset, length, negative, false);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0);   
formatBigIntegerBinary(value, buf, offset, length, negative, null);   
formatBigIntegerBinary(value, buf, offset, length, negative, length);   
formatBigIntegerBinary(value, buf, offset, length, negative, -1);   
formatBigIntegerBinary(value, buf, offset, length, negative, MAXSIZE);   
formatBigIntegerBinary(value, buf, offset, length, negative, 9);   
formatBigIntegerBinary(value, buf, offset, length, negative, 1);   
formatBigIntegerBinary(value, buf, offset, length, negative, negative);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0xff);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0x80);   
formatBigIntegerBinary(value, buf, offset, length, negative, 8);   
formatBigIntegerBinary(value, buf, offset, length, negative, 4);   
formatBigIntegerBinary(value, buf, offset, length, negative, maxLen);   
formatBigIntegerBinary(value, buf, offset, length, negative, MAXID);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0xffff);   
formatBigIntegerBinary(value, buf, offset, length, negative, 10);   
formatBigIntegerBinary(value, buf, offset, length, negative, value);   
formatBigIntegerBinary(value, buf, offset, length, negative, long);   
formatBigIntegerBinary(value, buf, offset, length, negative, 16);   
formatBigIntegerBinary(value, buf, offset, length, negative, !negative);   
formatBigIntegerBinary(value, buf, offset, length, negative, 64);   
formatBigIntegerBinary(value, buf, offset, length, negative, 7);   
formatBigIntegerBinary(value, buf, offset, length, negative,true);   
formatBigIntegerBinary(value, buf, offset, length, negative, true);   
formatBigIntegerBinary(value, buf, offset, length, negative, Long);   
formatBigIntegerBinary(value, buf, offset, length, negative, 3);   
formatBigIntegerBinary(value, buf, offset, length, negative, maximum length);   
formatBigIntegerBinary(value, buf, offset, length, negative, binary);   
formatBigIntegerBinary(value, buf, offset, length, negative, true, false);   
formatBigIntegerBinary(value, buf, offset, length, negative, true, true);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0xFF);   
formatBigIntegerBinary(value, buf, offset, length, negative, 2);   
formatBigIntegerBinary(value, buf, offset, length, negative, TarConstants);   
formatBigIntegerBinary(value, buf, offset, length, negative, 12);   
formatBigIntegerBinary(value, buf, offset, length, negative, 6);   
formatBigIntegerBinary(value, buf, offset, length, negative, len);   
formatBigIntegerBinary(value, buf, offset, length, negative, 255);   
formatBigIntegerBinary(value, buf, offset, length, negative, zero);   
formatBigIntegerBinary(value, buf, offset, length, negative, byte);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0x00);   
formatBigIntegerBinary(value, buf, offset, length, negative, limit);   
formatBigIntegerBinary(value, buf, offset, length, negative, hex);   
formatBigIntegerBinary(value, buf, offset, length, negative, maximum size);   
formatBigIntegerBinary(value, buf, offset, length, negative, offset);   
formatBigIntegerBinary(value, buf, offset, length, negative, MaxID);   
formatBigIntegerBinary(value, buf, offset, length, negative, maximumId);   
formatBigIntegerBinary(value, buf, offset, length, negative, overflow);   
formatBigIntegerBinary(value, buf, offset, length, negative, radix);   
formatBigIntegerBinary(value, buf, offset, length, negative,false);   
formatBigIntegerBinary(value, buf, offset, length, negative, short);   
formatBigIntegerBinary(value, buf, offset, length, negative, ASCII);   
formatBigIntegerBinary(value, buf, offset, length, negative, extended);   
formatBigIntegerBinary(value, buf, offset, length, negative, signed);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0xffffffff);   
formatBigIntegerBinary(value, buf, offset, length, negative, 8bit);   
formatBigIntegerBinary(value, buf, offset, length, negative, size);   
formatBigIntegerBinary(value, buf, offset, length, negative, HEX);   
formatBigIntegerBinary(value, buf, offset, length, negative, buf);   
formatBigIntegerBinary(value, buf, offset, length, negative, prefix);   
formatBigIntegerBinary(value, buf, offset, length, negative, buffer);   
formatBigIntegerBinary(value, buf, offset, length, negative, false);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0x80000000);   
formatBigIntegerBinary(value, buf, offset, length, negative, this);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0x8000);   
formatBigIntegerBinary(value, buf, offset, length, negative, maxAsInt);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0x00000000);   
formatBigIntegerBinary(value, buf, offset, length, negative, 40);   
formatBigIntegerBinary(value, buf, offset, length, negative, isNegative);   
formatBigIntegerBinary(value, buf, offset, length, negative, 32);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0, 0);   
formatBigIntegerBinary(value, buf, offset, length, negative, false, false);   
formatBigIntegerBinary(value, buf, offset, length, negative, ++offset);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0, false);   
formatBigIntegerBinary(value, buf, offset, length, negative, MaxSize);   
formatBigIntegerBinary(value, buf, offset, length, negative, zeroPadding);   
formatBigIntegerBinary(value, buf, offset, length, negative, maxSize);   
formatBigIntegerBinary(value, buf, offset, length, negative, Integer);   
formatBigIntegerBinary(value, buf, offset, length, negative, bytes);   
formatBigIntegerBinary(value, buf, offset, length, negative, 5);   
formatBigIntegerBinary(value, buf, offset, length, negative, unsigned);   
formatBigIntegerBinary(value, buf, offset, length, negative, 24);   
formatBigIntegerBinary(value, buf, offset, length, negative, false, true);   
formatBigIntegerBinary(value, buf, offset, length, negative, int);   
formatBigIntegerBinary(value, buf, offset, length, negative, 127);   
formatBigIntegerBinary(value, buf, offset, length, negative, 1024);   
formatBigIntegerBinary(value, buf, offset, length, negative, maxSize);   
formatBigIntegerBinary(value, buf, offset, length, negative, maxLength);   
formatBigIntegerBinary(value, buf, offset, length, negative, 36);   
formatBigIntegerBinary(value, buf, offset, length, negative, minLength);   
formatBigIntegerBinary(value, buf, offset, length, negative, unsigned int);   
formatBigIntegerBinary(value, buf, offset, length, negative, minSize);   
formatBigIntegerBinary(value, buf, offset, length, negative, lenient);   
formatBigIntegerBinary(value, buf, offset, length, negative, maximumID);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0xFFFFFFFF);   
formatBigIntegerBinary(value, buf, offset, length, negative, NULL);   
formatBigIntegerBinary(value, buf, offset, length, negative, canonical);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0, true);   
formatBigIntegerBinary(value, buf, offset, length, negative, DER);   
formatBigIntegerBinary(value, buf, offset, length, negative, positive);   
formatBigIntegerBinary(value, buf, offset, length, negative, MAXBITS);   
formatBigIntegerBinary(value, buf, offset, length, negative, ASN.1);   
formatBigIntegerBinary(value, buf, offset, length, negative,0);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0x10);   
formatBigIntegerBinary(value, buf, offset, length, negative, 64bit);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0xFFFFFF);   
formatBigIntegerBinary(value, buf, offset, length, negative, reverse);   
formatBigIntegerBinary(value, buf, offset, length, negative, Negative);   
formatBigIntegerBinary(value, buf, offset, length, negative, maximum value);   
formatBigIntegerBinary(value, buf, offset, length, negative, 65536);   
formatBigIntegerBinary(value, buf, offset, length, negative, 256);   
formatBigIntegerBinary(value, buf, offset, length, negative, 100);   
formatBigIntegerBinary(value, buf, offset, length, negative, maximumSize);   
formatBigIntegerBinary(value, buf, offset, length, negative, 35);   
formatBigIntegerBinary(value, buf, offset, length, negative, 31);   
formatBigIntegerBinary(value, buf, offset, length, negative, length > 9);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0x0);   
formatBigIntegerBinary(value, buf, offset, length, negative, pos);   
formatBigIntegerBinary(value, buf, offset, length, negative, 11);   
formatBigIntegerBinary(value, buf, offset, length, negative, 15);   
formatBigIntegerBinary(value, buf, offset, length, negative, 80);   
formatBigIntegerBinary(value, buf, offset, length, negative, LONG);   
formatBigIntegerBinary(value, buf, offset, length, negative, 2147483647);   
formatBigIntegerBinary(value, buf, offset, length, negative, length < 9);   
formatBigIntegerBinary(value, buf, offset, length, negative, 20);   
formatBigIntegerBinary(value, buf, offset, length, negative, maximum idlen);   
formatBigIntegerBinary(value, buf, offset, length, negative, "");   
formatBigIntegerBinary(value, buf, offset, length, negative, ZERO);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0x01);   
formatBigIntegerBinary(value, buf, offset, length, negative, 19);   
formatBigIntegerBinary(value, buf, offset, length, negative, 90);   
formatBigIntegerBinary(value, buf, offset, length, negative, name);   
formatBigIntegerBinary(value, buf, offset, length, negative, type);   
formatBigIntegerBinary(value, buf, offset, length, negative, true );   
formatBigIntegerBinary(value, buf, offset, length, negative, 28);   
formatBigIntegerBinary(value, buf, offset, length, negative, minLen);   
formatBigIntegerBinary(value, buf, offset, length, negative, strict);   
formatBigIntegerBinary(value, buf, offset, length, negative, undefined);   
formatBigIntegerBinary(value, buf, offset, length, negative, negative);   
formatBigIntegerBinary(value, buf, offset, length, negative, count);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0xFFFF);   
formatBigIntegerBinary(value, buf, offset, length, negative, EXTENDED);   
formatBigIntegerBinary(value, buf, offset, length, negative, crc32);   
formatBigIntegerBinary(value, buf, offset, length, negative, Binary);   
formatBigIntegerBinary(value, buf, offset, length, negative, 1 byte);   
formatBigIntegerBinary(value, buf, offset, length, negative, left);   
formatBigIntegerBinary(value, buf, offset, length, negative, tmp);   
formatBigIntegerBinary(value, buf, offset, length, negative, maximum allowed length);   
formatBigIntegerBinary(value, buf, offset, length, negative, 128);   
formatBigIntegerBinary(value, buf, offset, length, negative, reversed);   
formatBigIntegerBinary(value, buf, offset, length, negative, alphabet);   
formatBigIntegerBinary(value, buf, offset, length, negative, maximum);   
formatBigIntegerBinary(value, buf, offset, length, negative, shift);   
formatBigIntegerBinary(value, buf, offset, length, negative, -7);   
formatBigIntegerBinary(value, buf, offset, length, negative, flag);   
formatBigIntegerBinary(value, buf, offset, length, negative, maxBytes);   
formatBigIntegerBinary(value, buf, offset, length, negative, -9);   
formatBigIntegerBinary(value, buf, offset, length, negative, 65535);   
formatBigIntegerBinary(value, buf, offset, length, negative, gzip);   
formatBigIntegerBinary(value, buf, offset, length, negative, compressed);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0x8);   
formatBigIntegerBinary(value, buf, offset, length, negative, nil);   
formatBigIntegerBinary(value, buf, offset, length, negative, True);   
formatBigIntegerBinary(value, buf, offset, length, negative, header);   
formatBigIntegerBinary(value, buf, offset, length, negative, zeroPad);   
formatBigIntegerBinary(value, buf, offset, length, negative, OCTAL);   
formatBigIntegerBinary(value, buf, offset, length, negative, empty);   
formatBigIntegerBinary(value, buf, offset, length, negative, 512);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0x0000);   
formatBigIntegerBinary(value, buf, offset, length, negative, base);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0););   
formatBigIntegerBinary(value, buf, offset, length, negative, true););   
formatBigIntegerBinary(value, buf, offset, length, negative, formatLongBinary);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0));   
formatBigIntegerBinary(value, buf, offset, length, negative, 4096);   
formatBigIntegerBinary(value, buf, offset, length, negative, encoding);   
formatBigIntegerBinary(value, buf, offset, length, negative, 63);   
formatBigIntegerBinary(value, buf, offset, length, negative, Hex);   
formatBigIntegerBinary(value, buf, offset, length, negative, buff);   
formatBigIntegerBinary(value, buf, offset, length, negative, digits);   
formatBigIntegerBinary(value, buf, offset, length, negative, bigEndian);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0xf);   
formatBigIntegerBinary(value, buf, offset, length, negative, MAX_ID);   
formatBigIntegerBinary(value, buf, offset, length, negative, extension);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0x04);   
formatBigIntegerBinary(value, buf, offset, length, negative, -2);   
formatBigIntegerBinary(value, buf, offset, length, negative, unsigned long);   
formatBigIntegerBinary(value, buf, offset, length, negative, String);   
formatBigIntegerBinary(value, buf, offset, length, negative, normal);   
formatBigIntegerBinary(value, buf, offset, length, negative, Hexadecimal);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0b100000000);   
formatBigIntegerBinary(value, buf, offset, length, negative, truncating);   
formatBigIntegerBinary(value, buf, offset, length, negative, MAX);   
formatBigIntegerBinary(value, buf, offset, length, negative, true));   
formatBigIntegerBinary(value, buf, offset, length, negative, nullCheck);   
formatBigIntegerBinary(value, buf, offset, length, negative, "HEX");   
formatBigIntegerBinary(value, buf, offset, length, negative, 0xff));   
formatBigIntegerBinary(value, buf, offset, length, negative, 0x30);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0, 9);   
formatBigIntegerBinary(value, buf, offset, length, negative, length == 0);   
formatBigIntegerBinary(value, buf, offset, length, negative, length > 0);   
formatBigIntegerBinary(value, buf, offset, length, negative, length != 0);   
formatBigIntegerBinary(value, buf, offset, length, negative, length <= 9);   
formatBigIntegerBinary(value, buf, offset, length, negative, maxId);   
formatBigIntegerBinary(value, buf, offset, length, negative, maximum id);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0x1000);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0x100);   
formatBigIntegerBinary(value, buf, offset, length, negative, -8);   
formatBigIntegerBinary(value, buf, offset, length, negative, MaxId);   
formatBigIntegerBinary(value, buf, offset, length, negative, length >= 9);   
formatBigIntegerBinary(value, buf, offset, length, negative, maxAsHex);   
formatBigIntegerBinary(value, buf, offset, length, negative, byte.class);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0x20);   
formatBigIntegerBinary(value, buf, offset, length, negative, unsigned integer);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0x02);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0, 1);   
formatBigIntegerBinary(value, buf, offset, length, negative, getMaxId);   
formatBigIntegerBinary(value, buf, offset, length, negative, offset + length);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0x100000000);   
formatBigIntegerBinary(value, buf, offset, length, negative, maximal length);   
formatBigIntegerBinary(value, buf, offset, length, negative, tar);   
formatBigIntegerBinary(value, buf, offset, length, negative, ASN1);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0xff00);   
formatBigIntegerBinary(value, buf, offset, length, negative, MIN_ID);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0, length);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0x81);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0<mask1> false);   
formatBigIntegerBinary(value, buf, offset, length, negative, maximum int);   
formatBigIntegerBinary(value, buf, offset, length, negative, maximum id length);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0x08);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0, 8);   
formatBigIntegerBinary(value, buf, offset, length, negative, 9));   
formatBigIntegerBinary(value, buf, offset, length, negative, maximum_id);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0x0001);   
formatBigIntegerBinary(value, buf, offset, length, negative, unsigned));   
formatBigIntegerBinary(value, buf, offset, length, negative, maximum ID);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0x40);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0<mask1> length);   
formatBigIntegerBinary(value, buf, offset, length, negative, DER_BINARY);   
formatBigIntegerBinary(value, buf, offset, length, negative, null, null);   
formatBigIntegerBinary(value, buf, offset, length, negative, true, 0);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0xffffffffL);   
formatBigIntegerBinary(value, buf, offset, length, negative, maximum allowed size);   
formatBigIntegerBinary(value, buf, offset, length, negative, length, true);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0x800000);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0<mask1> true);   
formatBigIntegerBinary(value, buf, offset, length, negative, MaxIdlen);   
formatBigIntegerBinary(value, buf, offset, length, negative, maximum IDlen);   
formatBigIntegerBinary(value, buf, offset, length, negative, 0x07);   
formatBigIntegerBinary(0,value, buf, offset, length, negative);   
formatBigIntegerBinary(value,value, buf, offset, length, negative);   
formatBigIntegerBinary(1,value, buf, offset, length, negative);   
formatBigIntegerBinary(length,value, buf, offset, length, negative);   
formatBigIntegerBinary(0xff,value, buf, offset, length, negative);   
formatBigIntegerBinary(long,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x80,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x00,value, buf, offset, length, negative);   
formatBigIntegerBinary(9,value, buf, offset, length, negative);   
formatBigIntegerBinary(10,value, buf, offset, length, negative);   
formatBigIntegerBinary(8,value, buf, offset, length, negative);   
formatBigIntegerBinary(int,value, buf, offset, length, negative);   
formatBigIntegerBinary(null,value, buf, offset, length, negative);   
formatBigIntegerBinary(64,value, buf, offset, length, negative);   
formatBigIntegerBinary(2,value, buf, offset, length, negative);   
formatBigIntegerBinary(byte,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x01,value, buf, offset, length, negative);   
formatBigIntegerBinary(Long,value, buf, offset, length, negative);   
formatBigIntegerBinary(3,value, buf, offset, length, negative);   
formatBigIntegerBinary(0L,value, buf, offset, length, negative);   
formatBigIntegerBinary(5,value, buf, offset, length, negative);   
formatBigIntegerBinary(0xFFFFFFFF,value, buf, offset, length, negative);   
formatBigIntegerBinary(6,value, buf, offset, length, negative);   
formatBigIntegerBinary(1L,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x80000000,value, buf, offset, length, negative);   
formatBigIntegerBinary(32,value, buf, offset, length, negative);   
formatBigIntegerBinary(4,value, buf, offset, length, negative);   
formatBigIntegerBinary(0xFF,value, buf, offset, length, negative);   
formatBigIntegerBinary(7,value, buf, offset, length, negative);   
formatBigIntegerBinary(size,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x0,value, buf, offset, length, negative);   
formatBigIntegerBinary(0,0,value, buf, offset, length, negative);   
formatBigIntegerBinary(0l,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x00000000,value, buf, offset, length, negative);   
formatBigIntegerBinary(true,value, buf, offset, length, negative);   
formatBigIntegerBinary(false,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x10,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x02,value, buf, offset, length, negative);   
formatBigIntegerBinary(16,value, buf, offset, length, negative);   
formatBigIntegerBinary(this,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x04,value, buf, offset, length, negative);   
formatBigIntegerBinary(255,value, buf, offset, length, negative);   
formatBigIntegerBinary(15,value, buf, offset, length, negative);   
formatBigIntegerBinary(MAX,value, buf, offset, length, negative);   
formatBigIntegerBinary(negative,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x0000,value, buf, offset, length, negative);   
formatBigIntegerBinary(BigInteger,value, buf, offset, length, negative);   
formatBigIntegerBinary(offset,value, buf, offset, length, negative);   
formatBigIntegerBinary(128,value, buf, offset, length, negative);   
formatBigIntegerBinary(x,value, buf, offset, length, negative);   
formatBigIntegerBinary(12,value, buf, offset, length, negative);   
formatBigIntegerBinary(NULL,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x20,value, buf, offset, length, negative);   
formatBigIntegerBinary(radix,value, buf, offset, length, negative);   
formatBigIntegerBinary(0xffffffff,value, buf, offset, length, negative);   
formatBigIntegerBinary(val,value, buf, offset, length, negative);   
formatBigIntegerBinary(Integer,value, buf, offset, length, negative);   
formatBigIntegerBinary(zero,value, buf, offset, length, negative);   
formatBigIntegerBinary(0xffff,value, buf, offset, length, negative);   
formatBigIntegerBinary(bytes,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x100000000,value, buf, offset, length, negative);   
formatBigIntegerBinary(short,value, buf, offset, length, negative);   
formatBigIntegerBinary(127,value, buf, offset, length, negative);   
formatBigIntegerBinary(80,value, buf, offset, length, negative);   
formatBigIntegerBinary(0,buf,value, buf, offset, length, negative);   
formatBigIntegerBinary(100,value, buf, offset, length, negative);   
formatBigIntegerBinary(2147483648,value, buf, offset, length, negative);   
formatBigIntegerBinary(binary,value, buf, offset, length, negative);   
formatBigIntegerBinary(data,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x30,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x100,value, buf, offset, length, negative);   
formatBigIntegerBinary(..,value, buf, offset, length, negative);   
formatBigIntegerBinary(31,value, buf, offset, length, negative);   
formatBigIntegerBinary(13,value, buf, offset, length, negative);   
formatBigIntegerBinary(name,value, buf, offset, length, negative);   
formatBigIntegerBinary(2147483647,value, buf, offset, length, negative);   
formatBigIntegerBinary(0xFFFFFFFFL,value, buf, offset, length, negative);   
formatBigIntegerBinary(0xFFFFFF,value, buf, offset, length, negative);   
formatBigIntegerBinary(0xAB,value, buf, offset, length, negative);   
formatBigIntegerBinary(36,value, buf, offset, length, negative);   
formatBigIntegerBinary( value,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x08,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x8000,value, buf, offset, length, negative);   
formatBigIntegerBinary(0xdeadbeef,value, buf, offset, length, negative);   
formatBigIntegerBinary(0b,value, buf, offset, length, negative);   
formatBigIntegerBinary(20,value, buf, offset, length, negative);   
formatBigIntegerBinary(40,value, buf, offset, length, negative);   
formatBigIntegerBinary(1024,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x03,value, buf, offset, length, negative);   
formatBigIntegerBinary(key,value, buf, offset, length, negative);   
formatBigIntegerBinary(byte[],value, buf, offset, length, negative);   
formatBigIntegerBinary(256,value, buf, offset, length, negative);   
formatBigIntegerBinary(buffer,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x06,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x36,value, buf, offset, length, negative);   
formatBigIntegerBinary(0b100000000,value, buf, offset, length, negative);   
formatBigIntegerBinary(uint64,value, buf, offset, length, negative);   
formatBigIntegerBinary(hash,value, buf, offset, length, negative);   
formatBigIntegerBinary( 0,value, buf, offset, length, negative);   
formatBigIntegerBinary(VALUE,value, buf, offset, length, negative);   
formatBigIntegerBinary(base,value, buf, offset, length, negative);   
formatBigIntegerBinary(tag,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x9,value, buf, offset, length, negative);   
formatBigIntegerBinary(index,value, buf, offset, length, negative);   
formatBigIntegerBinary(65536,value, buf, offset, length, negative);   
formatBigIntegerBinary(Value,value, buf, offset, length, negative);   
formatBigIntegerBinary(header,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x1000,value, buf, offset, length, negative);   
formatBigIntegerBinary(MAXID,value, buf, offset, length, negative);   
formatBigIntegerBinary(longValue,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x0001,value, buf, offset, length, negative);   
formatBigIntegerBinary(type,value, buf, offset, length, negative);   
formatBigIntegerBinary(value, buf,value, buf, offset, length, negative);   
formatBigIntegerBinary(0,length,value, buf, offset, length, negative);   
formatBigIntegerBinary(len,value, buf, offset, length, negative);   
formatBigIntegerBinary(63,value, buf, offset, length, negative);   
formatBigIntegerBinary(max,value, buf, offset, length, negative);   
formatBigIntegerBinary(crc32,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x00000000000000,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x81,value, buf, offset, length, negative);   
formatBigIntegerBinary( 0,value, buf, offset, length, negative);   
formatBigIntegerBinary(2048,value, buf, offset, length, negative);   
formatBigIntegerBinary(String,value, buf, offset, length, negative);   
formatBigIntegerBinary(0, buf,value, buf, offset, length, negative);   
formatBigIntegerBinary(MAXSIZE,value, buf, offset, length, negative);   
formatBigIntegerBinary(Math.abs,value, buf, offset, length, negative);   
formatBigIntegerBinary(0xffffff,value, buf, offset, length, negative);   
formatBigIntegerBinary(Math,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x8,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x07,value, buf, offset, length, negative);   
formatBigIntegerBinary(unsigned int,value, buf, offset, length, negative);   
formatBigIntegerBinary(maxSize,value, buf, offset, length, negative);   
formatBigIntegerBinary( value,value, buf, offset, length, negative);   
formatBigIntegerBinary(number,value, buf, offset, length, negative);   
formatBigIntegerBinary(double,value, buf, offset, length, negative);   
formatBigIntegerBinary(0, 0,value, buf, offset, length, negative);   
formatBigIntegerBinary(65,value, buf, offset, length, negative);   
formatBigIntegerBinary(target,value, buf, offset, length, negative);   
formatBigIntegerBinary(tmp,value, buf, offset, length, negative);   
formatBigIntegerBinary(NEGATIVE,value, buf, offset, length, negative);   
formatBigIntegerBinary(value, offset,value, buf, offset, length, negative);   
formatBigIntegerBinary(30,value, buf, offset, length, negative);   
formatBigIntegerBinary(NaN,value, buf, offset, length, negative);   
formatBigIntegerBinary(buf,value, buf, offset, length, negative);   
formatBigIntegerBinary(96,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x1234,value, buf, offset, length, negative);   
formatBigIntegerBinary(file,value, buf, offset, length, negative);   
formatBigIntegerBinary(11,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x09,value, buf, offset, length, negative);   
formatBigIntegerBinary(high,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x10000,value, buf, offset, length, negative);   
formatBigIntegerBinary(19,value, buf, offset, length, negative);   
formatBigIntegerBinary(values,value, buf, offset, length, negative);   
formatBigIntegerBinary(Number,value, buf, offset, length, negative);   
formatBigIntegerBinary(0xf,value, buf, offset, length, negative);   
formatBigIntegerBinary(value,buf,value, buf, offset, length, negative);   
formatBigIntegerBinary(0xf0,value, buf, offset, length, negative);   
formatBigIntegerBinary(0xff),value, buf, offset, length, negative);   
formatBigIntegerBinary(8bit,value, buf, offset, length, negative);   
formatBigIntegerBinary(num,value, buf, offset, length, negative);   
formatBigIntegerBinary(65535,value, buf, offset, length, negative);   
formatBigIntegerBinary(512,value, buf, offset, length, negative);   
formatBigIntegerBinary(input,value, buf, offset, length, negative);   
formatBigIntegerBinary(1l,value, buf, offset, length, negative);   
formatBigIntegerBinary(50,value, buf, offset, length, negative);   
formatBigIntegerBinary(octet,value, buf, offset, length, negative);   
formatBigIntegerBinary(0xffffffffL,value, buf, offset, length, negative);   
formatBigIntegerBinary(99,value, buf, offset, length, negative);   
formatBigIntegerBinary(0644,value, buf, offset, length, negative);   
formatBigIntegerBinary(Math.max,value, buf, offset, length, negative);   
formatBigIntegerBinary(flags,value, buf, offset, length, negative);   
formatBigIntegerBinary(0),value, buf, offset, length, negative);   
formatBigIntegerBinary(56,value, buf, offset, length, negative);   
formatBigIntegerBinary(value,offset,value, buf, offset, length, negative);   
formatBigIntegerBinary(0777,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x800000,value, buf, offset, length, negative);   
formatBigIntegerBinary(total,value, buf, offset, length, negative);   
formatBigIntegerBinary(unsigned long,value, buf, offset, length, negative);   
formatBigIntegerBinary(maxLength,value, buf, offset, length, negative);   
formatBigIntegerBinary(char,value, buf, offset, length, negative);   
formatBigIntegerBinary(8192,value, buf, offset, length, negative);   
formatBigIntegerBinary(maxValue,value, buf, offset, length, negative);   
formatBigIntegerBinary(arg,value, buf, offset, length, negative);   
formatBigIntegerBinary(integer,value, buf, offset, length, negative);   
formatBigIntegerBinary(1023,value, buf, offset, length, negative);   
formatBigIntegerBinary(34,value, buf, offset, length, negative);   
formatBigIntegerBinary(new long,value, buf, offset, length, negative);   
formatBigIntegerBinary(hex,value, buf, offset, length, negative);   
formatBigIntegerBinary(year,value, buf, offset, length, negative);   
formatBigIntegerBinary(min,value, buf, offset, length, negative);   
formatBigIntegerBinary(Infinity,value, buf, offset, length, negative);   
formatBigIntegerBinary(0xBC,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x16,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x0100,value, buf, offset, length, negative);   
formatBigIntegerBinary(a,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x99,value, buf, offset, length, negative);   
formatBigIntegerBinary(z,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x40,value, buf, offset, length, negative);   
formatBigIntegerBinary(encoding,value, buf, offset, length, negative);   
formatBigIntegerBinary(angle,value, buf, offset, length, negative);   
formatBigIntegerBinary(999,value, buf, offset, length, negative);   
formatBigIntegerBinary(123,value, buf, offset, length, negative);   
formatBigIntegerBinary(flag,value, buf, offset, length, negative);   
formatBigIntegerBinary(varint,value, buf, offset, length, negative);   
formatBigIntegerBinary(0,8,value, buf, offset, length, negative);   
formatBigIntegerBinary(0xc0,value, buf, offset, length, negative);   
formatBigIntegerBinary(-1,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x0080,value, buf, offset, length, negative);   
formatBigIntegerBinary(0,1,value, buf, offset, length, negative);   
formatBigIntegerBinary(crc,value, buf, offset, length, negative);   
formatBigIntegerBinary(DEFAULT,value, buf, offset, length, negative);   
formatBigIntegerBinary(int value,value, buf, offset, length, negative);   
formatBigIntegerBinary(85,value, buf, offset, length, negative);   
formatBigIntegerBinary(90,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x12,value, buf, offset, length, negative);   
formatBigIntegerBinary(t,value, buf, offset, length, negative);   
formatBigIntegerBinary(length),value, buf, offset, length, negative);   
formatBigIntegerBinary(0x22,value, buf, offset, length, negative);   
formatBigIntegerBinary(tar,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x11,value, buf, offset, length, negative);   
formatBigIntegerBinary( -1,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x90,value, buf, offset, length, negative);   
formatBigIntegerBinary(v,value, buf, offset, length, negative);   
formatBigIntegerBinary(Z,value, buf, offset, length, negative);   
formatBigIntegerBinary(pos,value, buf, offset, length, negative);   
formatBigIntegerBinary(float,value, buf, offset, length, negative);   
formatBigIntegerBinary(1000,value, buf, offset, length, negative);   
formatBigIntegerBinary(0,9,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x000000,value, buf, offset, length, negative);   
formatBigIntegerBinary(overflow,value, buf, offset, length, negative);   
formatBigIntegerBinary(0,offset,value, buf, offset, length, negative);   
formatBigIntegerBinary(22,value, buf, offset, length, negative);   
formatBigIntegerBinary(61,value, buf, offset, length, negative);   
formatBigIntegerBinary(archive,value, buf, offset, length, negative);   
formatBigIntegerBinary(0xFD,value, buf, offset, length, negative);   
formatBigIntegerBinary(infinity,value, buf, offset, length, negative);   
formatBigIntegerBinary(95,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x25,value, buf, offset, length, negative);   
formatBigIntegerBinary(511,value, buf, offset, length, negative);   
formatBigIntegerBinary(blob,value, buf, offset, length, negative);   
formatBigIntegerBinary(xx,value, buf, offset, length, negative);   
formatBigIntegerBinary(...,value, buf, offset, length, negative);   
formatBigIntegerBinary(limit,value, buf, offset, length, negative);   
formatBigIntegerBinary(intValue,value, buf, offset, length, negative);   
formatBigIntegerBinary(initialValue,value, buf, offset, length, negative);   
formatBigIntegerBinary(33,value, buf, offset, length, negative);   
formatBigIntegerBinary(other,value, buf, offset, length, negative);   
formatBigIntegerBinary(35,value, buf, offset, length, negative);   
formatBigIntegerBinary(39,value, buf, offset, length, negative);   
formatBigIntegerBinary(0x50,value, buf, offset, length, negative);   
formatBigIntegerBinary(value, buf, offset, length, negative);   
formatBigIntegerBinary(value, buf, buf, offset, length, negative);   
formatBigIntegerBinary(0, buf, buf, offset, length, negative);   
formatBigIntegerBinary(value, offset, buf, offset, length, negative);   
formatBigIntegerBinary(value, buf, offset, buf, offset, length, negative);   
formatBigIntegerBinary(long value, buf, offset, length, negative);   
formatBigIntegerBinary( value, buf, offset, length, negative);   
formatBigIntegerBinary(value<mask5>value, buf, offset, length, negative);   
formatBigIntegerBinary(length, buf, offset, length, negative);   
formatBigIntegerBinary(value, null, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0, buf, offset, length, negative);   
formatBigIntegerBinary(0, buf, offset, length, negative);   
formatBigIntegerBinary(0x80, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0), buf, offset, length, negative);   
formatBigIntegerBinary(int value, buf, offset, length, negative);   
formatBigIntegerBinary(0x00, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0, 8, buf, offset, length, negative);   
formatBigIntegerBinary(value, null), buf, offset, length, negative);   
formatBigIntegerBinary(long, buf, offset, length, negative);   
formatBigIntegerBinary(0xff, buf, offset, length, negative);   
formatBigIntegerBinary(0L, buf, buf, offset, length, negative);   
formatBigIntegerBinary(value), buf, offset, length, negative);   
formatBigIntegerBinary(length), buf, offset, length, negative);   
formatBigIntegerBinary(value, 0);, buf, offset, length, negative);   
formatBigIntegerBinary(0, 0, buf, offset, length, negative);   
formatBigIntegerBinary(0), buf, offset, length, negative);   
formatBigIntegerBinary( value, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0, 9, buf, offset, length, negative);   
formatBigIntegerBinary(length, buf, buf, offset, length, negative);   
formatBigIntegerBinary(0x80000000, buf, offset, length, negative);   
formatBigIntegerBinary(long, buf, buf, offset, length, negative);   
formatBigIntegerBinary(0x80, buf, buf, offset, length, negative);   
formatBigIntegerBinary(Long.MIN_VALUE, buf, offset, length, negative);   
formatBigIntegerBinary(0, buf, offset, buf, offset, length, negative);   
formatBigIntegerBinary(0x00, buf, buf, offset, length, negative);   
formatBigIntegerBinary(int value, buf, buf, offset, length, negative);   
formatBigIntegerBinary(0,buf, buf, offset, length, negative);   
formatBigIntegerBinary(value, 4, buf, offset, length, negative);   
formatBigIntegerBinary(value, length), buf, offset, length, negative);   
formatBigIntegerBinary(1, buf, buf, offset, length, negative);   
formatBigIntegerBinary(value, offset), buf, offset, length, negative);   
formatBigIntegerBinary(0xff, buf, buf, offset, length, negative);   
formatBigIntegerBinary(0x01, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0, buf, buf, offset, length, negative);   
formatBigIntegerBinary(1, buf, offset, length, negative);   
formatBigIntegerBinary(1L, buf, buf, offset, length, negative);   
formatBigIntegerBinary(byte[] value, buf, offset, length, negative);   
formatBigIntegerBinary(length, 0), buf, offset, length, negative);   
formatBigIntegerBinary(value, 8, buf, offset, length, negative);   
formatBigIntegerBinary(value, null);, buf, offset, length, negative);   
formatBigIntegerBinary(value, buffer, buf, offset, length, negative);   
formatBigIntegerBinary(Long.MAX_VALUE, buf, offset, length, negative);   
formatBigIntegerBinary(0, buf);, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0, length, buf, offset, length, negative);   
formatBigIntegerBinary(0x0, buf, offset, length, negative);   
formatBigIntegerBinary(10, buf, buf, offset, length, negative);   
formatBigIntegerBinary(maxAsOctalChar, buf, offset, length, negative);   
formatBigIntegerBinary(0xff), buf, offset, length, negative);   
formatBigIntegerBinary(value, 8), buf, offset, length, negative);   
formatBigIntegerBinary(0, 0), buf, offset, length, negative);   
formatBigIntegerBinary(value, false, buf, offset, length, negative);   
formatBigIntegerBinary(Integer, buf, offset, length, negative);   
formatBigIntegerBinary(0xFFFFFFFF, buf, offset, length, negative);   
formatBigIntegerBinary(value, 10);, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0, 1, buf, offset, length, negative);   
formatBigIntegerBinary(Long, buf, offset, length, negative);   
formatBigIntegerBinary(value, byte[] buf, buf, offset, length, negative);   
formatBigIntegerBinary(null, buf, offset, length, negative);   
formatBigIntegerBinary(0x01, buf, buf, offset, length, negative);   
formatBigIntegerBinary(value, pos, buf, offset, length, negative);   
formatBigIntegerBinary(int, buf, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0, 4, buf, offset, length, negative);   
formatBigIntegerBinary(value, true, buf, offset, length, negative);   
formatBigIntegerBinary(long value, buf, buf, offset, length, negative);   
formatBigIntegerBinary(0x7fffffff, buf, offset, length, negative);   
formatBigIntegerBinary(0x00000000, buf, offset, length, negative);   
formatBigIntegerBinary(0x10, buf, offset, length, negative);   
formatBigIntegerBinary(255, buf, offset, length, negative);   
formatBigIntegerBinary(0, 4, buf, offset, length, negative);   
formatBigIntegerBinary(0xFF, buf, offset, length, negative);   
formatBigIntegerBinary(0, length), buf, offset, length, negative);   
formatBigIntegerBinary(Long value, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0, 7, buf, offset, length, negative);   
formatBigIntegerBinary(BigInteger value, buf, offset, length, negative);   
formatBigIntegerBinary(value, 4), buf, offset, length, negative);   
formatBigIntegerBinary(0, 8, buf, offset, length, negative);   
formatBigIntegerBinary(value,, buf, offset, length, negative);   
formatBigIntegerBinary(0x7f, buf, offset, length, negative);   
formatBigIntegerBinary(value, 10, buf, offset, length, negative);   
formatBigIntegerBinary(0x20, buf, offset, length, negative);   
formatBigIntegerBinary(0l, buf, buf, offset, length, negative);   
formatBigIntegerBinary(0x02, buf, offset, length, negative);   
formatBigIntegerBinary(0, length);, buf, offset, length, negative);   
formatBigIntegerBinary(0, 8), buf, offset, length, negative);   
formatBigIntegerBinary(value, 10), buf, offset, length, negative);   
formatBigIntegerBinary(0x8000, buf, offset, length, negative);   
formatBigIntegerBinary(0, 0, 0, buf, offset, length, negative);   
formatBigIntegerBinary(double value, buf, offset, length, negative);   
formatBigIntegerBinary(value);, buf, offset, length, negative);   
formatBigIntegerBinary(0);, buf, offset, length, negative);   
formatBigIntegerBinary(value, short, buf, offset, length, negative);   
formatBigIntegerBinary(0x100000000, buf, offset, length, negative);   
formatBigIntegerBinary(value, tmp, buf, offset, length, negative);   
formatBigIntegerBinary(0x0000, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0, 0, buf, offset, length, negative);   
formatBigIntegerBinary(0xFFFFFFFF, buf, buf, offset, length, negative);   
formatBigIntegerBinary(length, 0);, buf, offset, length, negative);   
formatBigIntegerBinary(0b, buf, offset, length, negative);   
formatBigIntegerBinary(value, 5, buf, offset, length, negative);   
formatBigIntegerBinary(0xAB, buf, offset, length, negative);   
formatBigIntegerBinary(0, length, buf, offset, length, negative);   
formatBigIntegerBinary(binary, buf, offset, length, negative);   
formatBigIntegerBinary(0xFFFFFFFFL, buf, offset, length, negative);   
formatBigIntegerBinary(0x7FFFFFFF, buf, offset, length, negative);   
formatBigIntegerBinary(64, buf, offset, length, negative);   
formatBigIntegerBinary(value, 7, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0xff), buf, offset, length, negative);   
formatBigIntegerBinary(val, buf, offset, length, negative);   
formatBigIntegerBinary(value<mask6>value, buf, offset, length, negative);   
formatBigIntegerBinary(value, offsets, buf, offset, length, negative);   
formatBigIntegerBinary(0, 8);, buf, offset, length, negative);   
formatBigIntegerBinary(0b100000000, buf, offset, length, negative);   
formatBigIntegerBinary(value, length, buf, offset, length, negative);   
formatBigIntegerBinary(length, 0, buf, offset, length, negative);   
formatBigIntegerBinary(value, offset);, buf, offset, length, negative);   
formatBigIntegerBinary(8, buf, buf, offset, length, negative);   
formatBigIntegerBinary(bytes, buf, offset, length, negative);   
formatBigIntegerBinary(value, bytes, buf, offset, length, negative);   
formatBigIntegerBinary(uint64 value, buf, offset, length, negative);   
formatBigIntegerBinary(0x30, buf, offset, length, negative);   
formatBigIntegerBinary(values, buf, offset, length, negative);   
formatBigIntegerBinary(0xFF, buf, buf, offset, length, negative);   
formatBigIntegerBinary(0x100, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0x80, buf, offset, length, negative);   
formatBigIntegerBinary(0x04, buf, buf, offset, length, negative);   
formatBigIntegerBinary(int, byte[]), buf, offset, length, negative);   
formatBigIntegerBinary(0x0a, buf, offset, length, negative);   
formatBigIntegerBinary(0x04, buf, offset, length, negative);   
formatBigIntegerBinary(0, buf), buf, offset, length, negative);   
formatBigIntegerBinary(0, buffer, buf, offset, length, negative);   
formatBigIntegerBinary(value, 1), buf, offset, length, negative);   
formatBigIntegerBinary(byte value, buf, offset, length, negative);   
formatBigIntegerBinary(value, offset, length, buf, offset, length, negative);   
formatBigIntegerBinary(0x36, buf, offset, length, negative);   
formatBigIntegerBinary(0, null, buf, offset, length, negative);   
formatBigIntegerBinary(0x10, buf, buf, offset, length, negative);   
formatBigIntegerBinary( value, buf, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0,, buf, offset, length, negative);   
formatBigIntegerBinary(value, tmpBytes, buf, offset, length, negative);   
formatBigIntegerBinary(number, buf, offset, length, negative);   
formatBigIntegerBinary(uint64, buf, offset, length, negative);   
formatBigIntegerBinary(long, buf, offset, buf, offset, length, negative);   
formatBigIntegerBinary(0x02, buf, buf, offset, length, negative);   
formatBigIntegerBinary(Long.MAXVALUE, buf, offset, length, negative);   
formatBigIntegerBinary(this value, buf, offset, length, negative);   
formatBigIntegerBinary(0, 0);, buf, offset, length, negative);   
formatBigIntegerBinary(value, length);, buf, offset, length, negative);   
formatBigIntegerBinary(key, buf, offset, length, negative);   
formatBigIntegerBinary(int value, int offset, buf, offset, length, negative);   
formatBigIntegerBinary(0xffffffff, buf, offset, length, negative);   
formatBigIntegerBinary(size, buf, offset, length, negative);   
formatBigIntegerBinary(0x1000, buf, offset, length, negative);   
formatBigIntegerBinary(0x81, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0, 6, buf, offset, length, negative);   
formatBigIntegerBinary(2, buf, buf, offset, length, negative);   
formatBigIntegerBinary(0x7F, buf, offset, length, negative);   
formatBigIntegerBinary(0x0F, buf, offset, length, negative);   
formatBigIntegerBinary(length, null);, buf, offset, length, negative);   
formatBigIntegerBinary(3, buf, buf, offset, length, negative);   
formatBigIntegerBinary(0xFFFFFFFF & value, buf, offset, length, negative);   
formatBigIntegerBinary(value, false), buf, offset, length, negative);   
formatBigIntegerBinary(this, buf, offset, length, negative);   
formatBigIntegerBinary(bytes, offset, buf, offset, length, negative);   
formatBigIntegerBinary(value,buf, buf, offset, length, negative);   
formatBigIntegerBinary(length, null), buf, offset, length, negative);   
formatBigIntegerBinary(value, 12, buf, offset, length, negative);   
formatBigIntegerBinary(0long, buf, offset, length, negative);   
formatBigIntegerBinary(value, 9, buf, offset, length, negative);   
formatBigIntegerBinary(value, bytes), buf, offset, length, negative);   
formatBigIntegerBinary(value, 8);, buf, offset, length, negative);   
formatBigIntegerBinary(long<mask5>value, buf, offset, length, negative);   
formatBigIntegerBinary(0, value, buf, offset, length, negative);   
formatBigIntegerBinary(data, buf, offset, length, negative);   
formatBigIntegerBinary(0,0, buf, offset, length, negative);   
formatBigIntegerBinary(length, 8), buf, offset, length, negative);   
formatBigIntegerBinary(this.value, buf, offset, length, negative);   
formatBigIntegerBinary(0x08, buf, offset, length, negative);   
formatBigIntegerBinary(size, value, buf, offset, length, negative);   
formatBigIntegerBinary(0l, buf, offset, length, negative);   
formatBigIntegerBinary(null), buf, offset, length, negative);   
formatBigIntegerBinary(unsigned int, buf, offset, length, negative);   
formatBigIntegerBinary(final long value, buf, offset, length, negative);   
formatBigIntegerBinary(0, null);, buf, offset, length, negative);   
formatBigIntegerBinary(0x00000000, buf, buf, offset, length, negative);   
formatBigIntegerBinary(value, 12), buf, offset, length, negative);   
formatBigIntegerBinary(object, buf, offset, length, negative);   
formatBigIntegerBinary(100, buf, offset, length, negative);   
formatBigIntegerBinary(0,, buf, offset, length, negative);   
formatBigIntegerBinary(0x03, buf, offset, length, negative);   
formatBigIntegerBinary(0, 9);, buf, offset, length, negative);   
formatBigIntegerBinary(1), buf, offset, length, negative);   
formatBigIntegerBinary(0, 4), buf, offset, length, negative);   
formatBigIntegerBinary(Value, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0, 10, buf, offset, length, negative);   
formatBigIntegerBinary(length, buf), buf, offset, length, negative);   
formatBigIntegerBinary(size, buf, buf, offset, length, negative);   
formatBigIntegerBinary(0x0, buf, buf, offset, length, negative);   
formatBigIntegerBinary(6, buf, offset, length, negative);   
formatBigIntegerBinary(length, null, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0, 12, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0x00, buf, offset, length, negative);   
formatBigIntegerBinary(0, 10);, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0xff, buf, offset, length, negative);   
formatBigIntegerBinary(value, false);, buf, offset, length, negative);   
formatBigIntegerBinary(0x80 | value, buf, offset, length, negative);   
formatBigIntegerBinary(value, 1);, buf, offset, length, negative);   
formatBigIntegerBinary(length, 4), buf, offset, length, negative);   
formatBigIntegerBinary(value, bytes, offset, buf, offset, length, negative);   
formatBigIntegerBinary(0x8000000000000000L, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0, 11, buf, offset, length, negative);   
formatBigIntegerBinary(0x0A, buf, offset, length, negative);   
formatBigIntegerBinary(0, 10), buf, offset, length, negative);   
formatBigIntegerBinary(0x80000000, buf, buf, offset, length, negative);   
formatBigIntegerBinary(buffer, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0, 3, buf, offset, length, negative);   
formatBigIntegerBinary(0x0000, buf, buf, offset, length, negative);   
formatBigIntegerBinary(type, buf, offset, length, negative);   
formatBigIntegerBinary(0x0f, buf, offset, length, negative);   
formatBigIntegerBinary(0xFFFFFFFFL, buf, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0, 5, buf, offset, length, negative);   
formatBigIntegerBinary(integer, buf, offset, length, negative);   
formatBigIntegerBinary(65536, buf, offset, length, negative);   
formatBigIntegerBinary(0x00FFFFFF, buf, offset, length, negative);   
formatBigIntegerBinary(value, offset, 9, buf, offset, length, negative);   
formatBigIntegerBinary(length, 10), buf, offset, length, negative);   
formatBigIntegerBinary(0xffffffffffffffff, buf, offset, length, negative);   
formatBigIntegerBinary(0x0100000000000000, buf, offset, length, negative);   
formatBigIntegerBinary(0x30, buf, buf, offset, length, negative);   
formatBigIntegerBinary(value, buf), buf, offset, length, negative);   
formatBigIntegerBinary(x, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0xffff), buf, offset, length, negative);   
formatBigIntegerBinary(value, 5);, buf, offset, length, negative);   
formatBigIntegerBinary(value, 3), buf, offset, length, negative);   
formatBigIntegerBinary(value, 4);, buf, offset, length, negative);   
formatBigIntegerBinary(long, byte[]), buf, offset, length, negative);   
formatBigIntegerBinary( value, buf, buf, offset, length, negative);   
formatBigIntegerBinary(10, buf, offset, length, negative);   
formatBigIntegerBinary(short, buf, offset, length, negative);   
formatBigIntegerBinary(value, 0xff);, buf, offset, length, negative);   
formatBigIntegerBinary(0x20, buf, buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, length);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask5> buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length), offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length);, offset, length, negative);   
formatBigIntegerBinary(value, buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset), offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset + length);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, length); }, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset); }, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length, negative);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length); }, offset, length, negative);   
formatBigIntegerBinary(value,  byte[] buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length); return offset, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length) {, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, 9);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, length); , offset, length, negative);   
formatBigIntegerBinary(value,  buffer, offset, length), offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length) { buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, length)., offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length, negative), offset, length, negative);   
formatBigIntegerBinary(value,  buf, buf, offset, length, negative);   
formatBigIntegerBinary(value,  buffer, offset, length);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length); buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1>buf, offset, length);, offset, length, negative);   
formatBigIntegerBinary(value,  buffer, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length)., offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length); }, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, 4), offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buffer, offset, length);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, 0, length);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, 0, length);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length);  }, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask5> buf, offset, length);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, 4);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, 8), offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length, true);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset+length);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset<mask2> buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, length);}, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset + 4);, offset, length, negative);   
formatBigIntegerBinary(value,  0, buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, length), offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask5> buf, offset, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset); return, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, 4);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset) { return buf, offset, length, negative);   
formatBigIntegerBinary(value,  null, 0);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length, 0);, offset, length, negative);   
formatBigIntegerBinary(value,  buffer, offset, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset); }, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset + length);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, 8);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length); returns offset, offset, length, negative);   
formatBigIntegerBinary(value,  buffer<mask1> buf, offset, length);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, buf, offset);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length); return buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length); */, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask6> buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, 0, length), offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length)  }, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length, false);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, 9), offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, 8);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset); }, offset, length, negative);   
formatBigIntegerBinary(value,  buf, buf, offset), offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, length); , offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask5>buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length) { }, offset, length, negative);   
formatBigIntegerBinary(value,  buf, buf, offset, length), offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> 0, length); }, offset, length, negative);   
formatBigIntegerBinary(value,  tmp, buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, buf, offset, length);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, len);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length) {, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, len), offset, length, negative);   
formatBigIntegerBinary(value,  buffer, offset, length, negative);, offset, length, negative);   
formatBigIntegerBinary(value,  null), offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset + length), offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset + 1);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, buf, offset, offset, length, negative);   
formatBigIntegerBinary(value,  null);, offset, length, negative);   
formatBigIntegerBinary(value,  bytes, offset, length), offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length)  -----------------------------------------------------------------------, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset);  formatBigIntegerBinary, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length)  --, offset, length, negative);   
formatBigIntegerBinary(value,  val, buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset);  }, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, maxAsOctalChar, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset<mask5> buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset) { buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, 9);, offset, length, negative);   
formatBigIntegerBinary(value,  null, 0), offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length) , offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset + 8);, offset, length, negative);   
formatBigIntegerBinary(value,  length, buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length, true), offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, size), offset, length, negative);   
formatBigIntegerBinary(value,  buf, 0, offset, length, negative);   
formatBigIntegerBinary(value,  null, offset, length), offset, length, negative);   
formatBigIntegerBinary(value,  buffer<mask5> buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf), offset, length, negative);   
formatBigIntegerBinary(value,  null, offset, length);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length, positive);, offset, length, negative);   
formatBigIntegerBinary(value,   buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length){ buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset+length);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset) {, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, 12);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length, false), offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset) { }, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length); /*package, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length, null);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset);  }, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, 10);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset<mask15> buf, offset, length, negative);   
formatBigIntegerBinary(value,  buffer, offset), offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length) { return buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length, 0), offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset)., offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, 3);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset);  formatLongBinary, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, 1), offset, length, negative);   
formatBigIntegerBinary(value,  null, null);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length){ return buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, 6);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset), offset, length, negative);   
formatBigIntegerBinary(value,  buf, 0, offset);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, 10), offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, 10);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset , length);, offset, length, negative);   
formatBigIntegerBinary(value,  buff, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, 7);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, 1);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, 3);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length); //int, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset + 4, offset, length, negative);   
formatBigIntegerBinary(value,  buff, offset, length), offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset,length);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length) {}, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, 0), offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, len);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, 12), offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length) formats a long, offset, length, negative);   
formatBigIntegerBinary(value,  nullBuf, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, length);   , offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf[offset]];, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, 6), offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length); , offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, 16), offset, length, negative);   
formatBigIntegerBinary(value,  buffer, buf, offset, length), offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, size);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, length); },, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset); buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length)  ..., offset, length, negative);   
formatBigIntegerBinary(value,  buf, 0, offset), offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask14> buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, 0);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf<mask2> buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length); formatLong, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask2> buf, offset, length, negative);   
formatBigIntegerBinary(value,  value, buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, length);}, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> buf, offset, length);;, offset, length, negative);   
formatBigIntegerBinary(value,  buf[], offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset ), offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset+length), offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask3> buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, 0);, offset, length, negative);   
formatBigIntegerBinary(value,  buf, 0), offset, length, negative);   
formatBigIntegerBinary(value,  offset, buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset);  }, offset, length, negative);   
formatBigIntegerBinary(value,  buf, buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset , offset, length, negative);   
formatBigIntegerBinary(value,  null, null, null);, offset, length, negative);   
formatBigIntegerBinary(value,  byte[] buf, offset, offset, length, negative);   
formatBigIntegerBinary(value,  null, null), offset, length, negative);   
formatBigIntegerBinary(value,  "", 0);, offset, length, negative);   
formatBigIntegerBinary(value,  buf[offset], buf, offset, length, negative);   
formatBigIntegerBinary(value,  null, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset, 4, offset, length, negative);   
formatBigIntegerBinary(value,  buf);, offset, length, negative);   
formatBigIntegerBinary(value,  null, offset);, offset, length, negative);   
formatBigIntegerBinary(value,  0, length), offset, length, negative);   
formatBigIntegerBinary(value,  length), offset, length, negative);   
formatBigIntegerBinary(value,  bytes, offset, offset, length, negative);   
formatBigIntegerBinary(value,  null, offset), offset, length, negative);   
formatBigIntegerBinary(value,  buffer, buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offsets, offset, length, negative);   
formatBigIntegerBinary(value,  null, false);, offset, length, negative);   
formatBigIntegerBinary(value,  binary, buf, offset, length, negative);   
formatBigIntegerBinary(value,  buffer, offset);, offset, length, negative);   
formatBigIntegerBinary(value,  byte[]), offset, length, negative);   
formatBigIntegerBinary(value,  bytes, offset), offset, length, negative);   
formatBigIntegerBinary(value,  tmpBytes, offset, length, negative);   
formatBigIntegerBinary(value,  ByteBuffer buf, offset, length, negative);   
formatBigIntegerBinary(value,  null, 1);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask18> buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, length), offset, length, negative);   
formatBigIntegerBinary(value,  null, -1);, offset, length, negative);   
formatBigIntegerBinary(value,  new byte[], offset, length, negative);   
formatBigIntegerBinary(value,  buf,, offset, length, negative);   
formatBigIntegerBinary(value,  nullbuf, offset, length, negative);   
formatBigIntegerBinary(value,  len, buf, offset, length, negative);   
formatBigIntegerBinary(value,  buf, offset );, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask5> buffer, offset, length, negative);   
formatBigIntegerBinary(value,  []byte, offset, length, negative);   
formatBigIntegerBinary(value,  null, 8);, offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> ", offset, length, negative);   
formatBigIntegerBinary(value,  buf<mask1> ', offset, length, negative);   
formatBigIntegerBinary(value,  pool, offset, length, negative);   
formatBigIntegerBinary(value,  null, length), offset, length, negative);   
formatBigIntegerBinary(value,  pos, buf, offset, length, negative);   
formatBigIntegerBinary(value,  data, buf, offset, length, negative);   
formatBigIntegerBinary(value,  tmpBuf, offset, length, negative);   
formatBigIntegerBinary(value,  buffer), offset, length, negative);   
formatBigIntegerBinary(value,  0, 8), offset, length, negative);   
formatBigIntegerBinary(value, buf<mask5> buf, offset, length, negative);   
formatBigIntegerBinary(value,  body, offset, length, negative);   
formatBigIntegerBinary(value,  buff, offset, offset, length, negative);   
formatBigIntegerBinary(value,  0, 0, offset, length, negative);   
formatBigIntegerBinary(value,  0);, offset, length, negative);   
formatBigIntegerBinary(value,  values, offset, length, negative);   
formatBigIntegerBinary(value,  []buf, offset, length, negative);   
formatBigIntegerBinary(value,  values, buf, offset, length, negative);   
formatBigIntegerBinary(value,  short, offset, length, negative);   
formatBigIntegerBinary(value,  root, buf, offset, length, negative);   
formatBigIntegerBinary(value,  0), offset, length, negative);   
formatBigIntegerBinary(value,  temp, buf, offset, length, negative);   
formatBigIntegerBinary(value,  null, buf, offset, length, negative);   
formatBigIntegerBinary(value,  bytes), offset, length, negative);   
formatBigIntegerBinary(value,  byte []buf, offset, length, negative);   
formatBigIntegerBinary(value,  nullCheck, offset, length, negative);   
formatBigIntegerBinary(value,  null buf, offset, length, negative);   
formatBigIntegerBinary(value,  bufSize), offset, length, negative);   
formatBigIntegerBinary(value,    buf, offset, length, negative);   
formatBigIntegerBinary(value,  tmpbuf, offset, length, negative);   
formatBigIntegerBinary(value,  bufSize, offset, length, negative);   
formatBigIntegerBinary(value,  b, offset, length, negative);   
formatBigIntegerBinary(value,  ByteBuffer, offset, length, negative);   
formatBigIntegerBinary(value,  blob, offset, length, negative);   
formatBigIntegerBinary(value,  mask, offset, length, negative);   
formatBigIntegerBinary(value,  append, offset, length, negative);   
formatBigIntegerBinary(value,  tmp, offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask5> offset, length, negative);   
formatBigIntegerBinary(value, buf,  buf, offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length), length, negative);   
formatBigIntegerBinary(value, buf,  buffer, offset, length, negative);   
formatBigIntegerBinary(value, buf,  0, offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, length); }, length, negative);   
formatBigIntegerBinary(value, buf,  0, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length, negative);, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length);, length, negative);   
formatBigIntegerBinary(value, buf, offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, length, negative);, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, length);, length, negative);   
formatBigIntegerBinary(value, buf,  0, length), length, negative);   
formatBigIntegerBinary(value, buf,  offset, length, negative), length, negative);   
formatBigIntegerBinary(value, buf,  offset, maxAsOctalChar), length, negative);   
formatBigIntegerBinary(value, buf,  offset, maxAsOctalChar, length, negative);   
formatBigIntegerBinary(value, buf,  offset, offset + length), length, negative);   
formatBigIntegerBinary(value, buf,  offset, length) { return offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset, offset, length, negative);   
formatBigIntegerBinary(value, buf,  0, length);, length, negative);   
formatBigIntegerBinary(value, buf,  offset, offset+length), length, negative);   
formatBigIntegerBinary(value, buf,  0, length, length, negative);   
formatBigIntegerBinary(value, buf,  offsets, length, negative);   
formatBigIntegerBinary(value, buf,  offset, maxAsOctalChar);, length, negative);   
formatBigIntegerBinary(value, buf,  0, 4, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset + 4, length);, length, negative);   
formatBigIntegerBinary(value, buf,  0, 8), length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, length, false);, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length, true);, length, negative);   
formatBigIntegerBinary(value, buf,  index, offset, length, negative);   
formatBigIntegerBinary(value, buf,  0, 8, length, negative);   
formatBigIntegerBinary(value, buf,  0, offset, length), length, negative);   
formatBigIntegerBinary(value, buf,  offset, 4, length, negative);   
formatBigIntegerBinary(value, buf,  off, offset, length, negative);   
formatBigIntegerBinary(value, buf,  length, length, negative);   
formatBigIntegerBinary(value, buf,  0, 8);, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset + 8, length);, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length) { }, length, negative);   
formatBigIntegerBinary(value, buf,  offset, 8), length, negative);   
formatBigIntegerBinary(value, buf,  0, 0, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length, false);, length, negative);   
formatBigIntegerBinary(value, buf,  offset, 4), length, negative);   
formatBigIntegerBinary(value, buf,  offset, length)., length, negative);   
formatBigIntegerBinary(value, buf,  offset, len, length, negative);   
formatBigIntegerBinary(value, buf,  offset, offset + length, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, length, true);, length, negative);   
formatBigIntegerBinary(value, buf,  -1, length, negative);   
formatBigIntegerBinary(value, buf,  0, 4), length, negative);   
formatBigIntegerBinary(value, buf,  offset, 8, length, negative);   
formatBigIntegerBinary(value, buf,  offset, 9, length, negative);   
formatBigIntegerBinary(value, buf,  offset, offset + length);, length, negative);   
formatBigIntegerBinary(value, buf,  ++offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset + length; }, length, negative);   
formatBigIntegerBinary(value, buf,  0, length, negative);, length, negative);   
formatBigIntegerBinary(value, buf,  pos, length, negative);   
formatBigIntegerBinary(value, buf,  0,, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, length) { , length, negative);   
formatBigIntegerBinary(value, buf,  0, offset), length, negative);   
formatBigIntegerBinary(value, buf,  offset + 4, length, negative);   
formatBigIntegerBinary(value, buf,  0, 1, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length)  return offset, length, negative);   
formatBigIntegerBinary(value, buf,  byte[] buf, offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset, len), length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset + length, length);, length, negative);   
formatBigIntegerBinary(value, buf,  0, buf.length - offset, length, negative);   
formatBigIntegerBinary(value, buf,  0, 1), length, negative);   
formatBigIntegerBinary(value, buf,  0, buf, offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length) {, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, length, length, negative);   
formatBigIntegerBinary(value, buf,  offset, 0, length, negative);   
formatBigIntegerBinary(value, buf,  offset, 0, length), length, negative);   
formatBigIntegerBinary(value, buf,  offset, 0), length, negative);   
formatBigIntegerBinary(value, buf,  offset, offset+length, length, negative);   
formatBigIntegerBinary(value, buf,  int offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset, offset+length);, length, negative);   
formatBigIntegerBinary(value, buf,  0, 0), length, negative);   
formatBigIntegerBinary(value, buf,  offset, length, 0), length, negative);   
formatBigIntegerBinary(value, buf,  offset, length, 0);, length, negative);   
formatBigIntegerBinary(value, buf,  offs, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset + 1, length);, length, negative);   
formatBigIntegerBinary(value, buf,  index, length, negative);   
formatBigIntegerBinary(value, buf,  0), length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, length)., length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset<mask2> offset, length, negative);   
formatBigIntegerBinary(value, buf,  start, offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length, false), length, negative);   
formatBigIntegerBinary(value, buf,  o, offset, length, negative);   
formatBigIntegerBinary(value, buf,  0, offset, length);, length, negative);   
formatBigIntegerBinary(value, buf,  offset + length, offset, length, negative);   
formatBigIntegerBinary(value, buf,  0, 2, length, negative);   
formatBigIntegerBinary(value, buf,  start, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length, true), length, negative);   
formatBigIntegerBinary(value, buf,  0, buf.length);, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, int length);, length, negative);   
formatBigIntegerBinary(value, buf,  buffer, offset, length), length, negative);   
formatBigIntegerBinary(value, buf,  pos, length), length, negative);   
formatBigIntegerBinary(value, buf,  offset + length), length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask6> offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset + 2, length);, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, length, null);, length, negative);   
formatBigIntegerBinary(value, buf,  0, offset + length), length, negative);   
formatBigIntegerBinary(value, buf,  0, buf.length, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length, positive);, length, negative);   
formatBigIntegerBinary(value, buf,  offset, 9), length, negative);   
formatBigIntegerBinary(value, buf,  offset, length, null);, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length); }, length, negative);   
formatBigIntegerBinary(value, buf,  idx, offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset, limit, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask3> offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, length); }, length, negative);   
formatBigIntegerBinary(value, buf,  0);, length, negative);   
formatBigIntegerBinary(value, buf,  offset + length, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset + 9, length);, length, negative);   
formatBigIntegerBinary(value, buf,  0, 4);, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask14> offset, length, negative);   
formatBigIntegerBinary(value, buf,  0, len, length, negative);   
formatBigIntegerBinary(value, buf,  index, length), length, negative);   
formatBigIntegerBinary(value, buf,  0, len), length, negative);   
formatBigIntegerBinary(value, buf,  offset, 1), length, negative);   
formatBigIntegerBinary(value, buf,  offset, length)  --, length, negative);   
formatBigIntegerBinary(value, buf,  0, 1);, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length, negative); }, length, negative);   
formatBigIntegerBinary(value, buf,  0, true);, length, negative);   
formatBigIntegerBinary(value, buf,  maxAsOctalChar, offset, length, negative);   
formatBigIntegerBinary(value, buf,  maxAsOctalChar, length, negative);   
formatBigIntegerBinary(value, buf,  0, offset + length);, length, negative);   
formatBigIntegerBinary(value, buf,  0, len);, length, negative);   
formatBigIntegerBinary(value, buf,  index, offset, length), length, negative);   
formatBigIntegerBinary(value, buf,  offset, length)  returns offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, length); return, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset,<mask2> offset, length, negative);   
formatBigIntegerBinary(value, buf,  0, 8, false);, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, length, 0);, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, final int length);, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, length, negative);   
formatBigIntegerBinary(value, buf,  buff, offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset + 3, length);, length, negative);   
formatBigIntegerBinary(value, buf,  final int offset, length, negative);   
formatBigIntegerBinary(value, buf,  off, length, length, negative);   
formatBigIntegerBinary(value, buf,  0, 3, length, negative);   
formatBigIntegerBinary(value, buf,  off, length), length, negative);   
formatBigIntegerBinary(value, buf,  offset, length) -----------------------------------------------------------------------, length, negative);   
formatBigIntegerBinary(value, buf,  0, length, false);, length, negative);   
formatBigIntegerBinary(value, buf,  offset, 16), length, negative);   
formatBigIntegerBinary(value, buf,  offset, length) ..., length, negative);   
formatBigIntegerBinary(value, buf,  pos, length);, length, negative);   
formatBigIntegerBinary(value, buf,  offset + length, offset + length);, length, negative);   
formatBigIntegerBinary(value, buf,  0, offset);, length, negative);   
formatBigIntegerBinary(value, buf,  pos, length, negative);, length, negative);   
formatBigIntegerBinary(value, buf,  offset + length);, length, negative);   
formatBigIntegerBinary(value, buf,  8, length, negative);   
formatBigIntegerBinary(value, buf,  0, 9);, length, negative);   
formatBigIntegerBinary(value, buf,  table, offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset, 3), length, negative);   
formatBigIntegerBinary(value, buf,  0, buf.length), length, negative);   
formatBigIntegerBinary(value, buf,  0, length, true);, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length)  -----------------------------------------------------------------------, length, negative);   
formatBigIntegerBinary(value, buf,  length, offset, length, negative);   
formatBigIntegerBinary(value, buf,  value, offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, length; }, length, negative);   
formatBigIntegerBinary(value, buf,  //offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset + 8, length, negative);   
formatBigIntegerBinary(value, buf,  0, 3);, length, negative);   
formatBigIntegerBinary(value, buf,  0, 2), length, negative);   
formatBigIntegerBinary(value, buf,  offset+4, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset + length, true);, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, length);<mask2> offset, length, negative);   
formatBigIntegerBinary(value, buf,  0, 0, 0), length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset + 6, length);, length, negative);   
formatBigIntegerBinary(value, buf,  offset, 0);, length, negative);   
formatBigIntegerBinary(value, buf,  byte[], offset, length, negative);   
formatBigIntegerBinary(value, buf,  0, length)., length, negative);   
formatBigIntegerBinary(value, buf,  offset, length) { return offset, length, negative);   
formatBigIntegerBinary(value, buf,  file, offset, length, negative);   
formatBigIntegerBinary(value, buf,  0, 5, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length) - offset, length, negative);   
formatBigIntegerBinary(value, buf,  0, 8, true);, length, negative);   
formatBigIntegerBinary(value, buf,  dst, offset, length, negative);   
formatBigIntegerBinary(value, buf,   offset, length, negative);   
formatBigIntegerBinary(value, buf,  0, 16), length, negative);   
formatBigIntegerBinary(value, buf,  0, 12), length, negative);   
formatBigIntegerBinary(value, buf,  cursor, offset, length, negative);   
formatBigIntegerBinary(value, buf,  0, 8, negative);, length, negative);   
formatBigIntegerBinary(value, buf,  offset, size), length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, length); ..., length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset + length, 8);, length, negative);   
formatBigIntegerBinary(value, buf,  0x80, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length, negative)., length, negative);   
formatBigIntegerBinary(value, buf,  0, 7, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length) returns offset + length, length, negative);   
formatBigIntegerBinary(value, buf,  0, 12);, length, negative);   
formatBigIntegerBinary(value, buf,  offset + length, offset + length), length, negative);   
formatBigIntegerBinary(value, buf,  offset++, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask5> 0, length, negative);   
formatBigIntegerBinary(value, buf,  len, offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset);, length, negative);   
formatBigIntegerBinary(value, buf,  buf[offset], offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> buf, offset, length);, length, negative);   
formatBigIntegerBinary(value, buf,  offset, -1, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length)  }, length, negative);   
formatBigIntegerBinary(value, buf,  offset, maxSize, length, negative);   
formatBigIntegerBinary(value, buf,  limit, length, negative);   
formatBigIntegerBinary(value, buf,  (int) offset, length, negative);   
formatBigIntegerBinary(value, buf,  0, false);, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length); //return offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset+length, length);, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset+4, length);, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, length );, length, negative);   
formatBigIntegerBinary(value, buf,  -offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset + length, offset + length, length, negative);   
formatBigIntegerBinary(value, buf,  offset , length, negative);   
formatBigIntegerBinary(value, buf,  index, length, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length) function, length, negative);   
formatBigIntegerBinary(value, buf,  offsets, length, length, negative);   
formatBigIntegerBinary(value, buf,  --offset, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset+1, length);, length, negative);   
formatBigIntegerBinary(value, buf,  0, 9, length, negative);   
formatBigIntegerBinary(value, buf,  count, length, negative);   
formatBigIntegerBinary(value, buf,  0, offset + length, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length) ;, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset, length); */, length, negative);   
formatBigIntegerBinary(value, buf,  offset, length): int, length, negative);   
formatBigIntegerBinary(value, buf,  offset<mask1> offset + 7, length);, length, negative);   
formatBigIntegerBinary(value, buf,  -1), length, negative);   
formatBigIntegerBinary(value, buf,  startOffset, offset, length, negative);   
formatBigIntegerBinary(value, buf,  _, offset, length, negative);   
formatBigIntegerBinary(value, buf,  length), length, negative);   
formatBigIntegerBinary(value, buf,  offset, length); returns offset, length, negative);   
formatBigIntegerBinary(value, buf,  off, length, negative);   
formatBigIntegerBinary(value, buf,  ..., length, negative);   
formatBigIntegerBinary(value, buf,             offset, length, negative);   
formatBigIntegerBinary(value, buf,  buffer, length, negative);   
formatBigIntegerBinary(value, buf,  ofs, length, negative);   
formatBigIntegerBinary(value, buf,  offset), length, negative);   
formatBigIntegerBinary(value, buf,  4, length, negative);   
formatBigIntegerBinary(value, buf,  end, length, negative);   
formatBigIntegerBinary(value, buf,  len, length, negative);   
formatBigIntegerBinary(value, buf,  1 byte, length, negative);   
formatBigIntegerBinary(value, buf,  // offset, length, negative);   
formatBigIntegerBinary(value, buf,  idx, length, negative);   
formatBigIntegerBinary(value, buf,  options, length, negative);   
formatBigIntegerBinary(value, buf,  base, length, negative);   
formatBigIntegerBinary(value, buf,  table, length, negative);   
formatBigIntegerBinary(value, buf, Offset, length, negative);   
formatBigIntegerBinary(value, buf,  1, length, negative);   
formatBigIntegerBinary(value, buf,  false, length, negative);   
formatBigIntegerBinary(value, buf,  caret, length, negative);   
formatBigIntegerBinary(value, buf, offset,  length, negative);   
formatBigIntegerBinary(value, buf, offset,  8, negative);   
formatBigIntegerBinary(value, buf, offset,  4, negative);   
formatBigIntegerBinary(value, buf, offset,  length, negative);, negative);   
formatBigIntegerBinary(value, buf, offset,  len, negative);   
formatBigIntegerBinary(value, buf, offset,  0, negative);   
formatBigIntegerBinary(value, buf, offset,  length, false, negative);   
formatBigIntegerBinary(value, buf, offset,  offset, length, negative);   
formatBigIntegerBinary(value, buf, offset,  length), negative);   
formatBigIntegerBinary(value, buf, offset,  length, true, negative);   
formatBigIntegerBinary(value, buf, offset,  length, false);, negative);   
formatBigIntegerBinary(value, buf, offset,  length, true);, negative);   
formatBigIntegerBinary(value, buf, offset,  length, negative), negative);   
formatBigIntegerBinary(value, buf, offset,  length, false), negative);   
formatBigIntegerBinary(value, buf, offset,  -1, negative);   
formatBigIntegerBinary(value, buf, offset,  length);, negative);   
formatBigIntegerBinary(value, buf, offset,  length, true), negative);   
formatBigIntegerBinary(value, buf, offset,  offset + length, negative);   
formatBigIntegerBinary(value, buf, offset,  9, negative);   
formatBigIntegerBinary(value, buf, offset, length, negative);   
formatBigIntegerBinary(value, buf, offset,  length, negative, negative);   
formatBigIntegerBinary(value, buf, offset,  int, negative);   
formatBigIntegerBinary(value, buf, offset,  length, null);, negative);   
formatBigIntegerBinary(value, buf, offset,  null, negative);   
formatBigIntegerBinary(value, buf, offset,  maxAsOctalChar, negative);   
formatBigIntegerBinary(value, buf, offset,  true, negative);   
formatBigIntegerBinary(value, buf, offset,  3, negative);   
formatBigIntegerBinary(value, buf, offset,  false, negative);   
formatBigIntegerBinary(value, buf, offset,  length, long, negative);   
formatBigIntegerBinary(value, buf, offset,  6, negative);   
formatBigIntegerBinary(value, buf, offset,  length, 0), negative);   
formatBigIntegerBinary(value, buf, offset,  size, negative);   
formatBigIntegerBinary(value, buf, offset,  length<mask5> length, negative);   
formatBigIntegerBinary(value, buf, offset,  value, negative);   
formatBigIntegerBinary(value, buf, offset,  offset+length, negative);   
formatBigIntegerBinary(value, buf, offset,  7, negative);   
formatBigIntegerBinary(value, buf, offset,  12, negative);   
formatBigIntegerBinary(value, buf, offset,  length, null, negative);   
formatBigIntegerBinary(value, buf, offset,  10, negative);   
formatBigIntegerBinary(value, buf, offset,  2, negative);   
formatBigIntegerBinary(value, buf, offset,  int length, negative);   
formatBigIntegerBinary(value, buf, offset,  0, false, negative);   
formatBigIntegerBinary(value, buf, offset,  1, negative);   
formatBigIntegerBinary(value, buf, offset,  length, 0);, negative);   
formatBigIntegerBinary(value, buf, offset,  0, length, negative);   
formatBigIntegerBinary(value, buf, offset,  length, null), negative);   
formatBigIntegerBinary(value, buf, offset,  1 byte, negative);   
formatBigIntegerBinary(value, buf, offset,  length, 0, negative);   
formatBigIntegerBinary(value, buf, offset,  8, false, negative);   
formatBigIntegerBinary(value, buf, offset,  buf, offset, length, negative);   
formatBigIntegerBinary(value, buf, offset,  16, negative);   
formatBigIntegerBinary(value, buf, offset,  11, negative);   
formatBigIntegerBinary(value, buf, offset,  64, negative);   
formatBigIntegerBinary(value, buf, offset,  *, negative), negative);   
formatBigIntegerBinary(value, buf, offset,  5, negative);   
formatBigIntegerBinary(value, buf, offset,  0, true, negative);   
formatBigIntegerBinary(value, buf, offset,  0, 0, negative);   
formatBigIntegerBinary(value, buf, offset,  length, boolean negative);, negative);   
formatBigIntegerBinary(value, buf, offset,  limit, negative);   
formatBigIntegerBinary(value, buf, offset,  length<mask1> length, negative);   
formatBigIntegerBinary(value, buf, offset,  8, false);, negative);   
formatBigIntegerBinary(value, buf, offset,  8, true, negative);   
formatBigIntegerBinary(value, buf, offset,  36, negative);   
formatBigIntegerBinary(value, buf, offset,  length, negative);   
formatBigIntegerBinary(value, buf, offset,  20, negative);   
formatBigIntegerBinary(value, buf, offset,  buffer, offset, length, negative);   
formatBigIntegerBinary(value, buf, offset,  offset, negative);   
formatBigIntegerBinary(value, buf, offset,  8), negative);   
formatBigIntegerBinary(value, buf, offset,  32, negative);   
formatBigIntegerBinary(value, buf, offset,  length, short, negative);   
formatBigIntegerBinary(value, buf, offset,  length, binary, negative);   
formatBigIntegerBinary(value, buf, offset,  length, length, negative);   
formatBigIntegerBinary(value, buf, offset,  length, 0x80, negative);   
formatBigIntegerBinary(value, buf, offset,  len, negative);, negative);   
formatBigIntegerBinary(value, buf, offset,  40, negative);   
formatBigIntegerBinary(value, buf, offset,  length, binary), negative);   
formatBigIntegerBinary(value, buf, offset,  length, -1, negative);   
formatBigIntegerBinary(value, buf, offset,  length)., negative);   
formatBigIntegerBinary(value, buf, offset,  (int) length, negative);   
formatBigIntegerBinary(value, buf, offset,  80, negative);   
formatBigIntegerBinary(value, buf, offset,  length - 1, negative);   
formatBigIntegerBinary(value, buf, offset,  null);, negative);   
formatBigIntegerBinary(value, buf, offset,  count, negative);   
formatBigIntegerBinary(value, buf, offset,  encoding, negative);   
formatBigIntegerBinary(value, buf, offset,  lenght, negative);   
formatBigIntegerBinary(value, buf, offset,  length, byte, negative);   
formatBigIntegerBinary(value, buf, offset,  null), negative);   
formatBigIntegerBinary(value, buf, offset,  long, negative);   
formatBigIntegerBinary(value, buf, offset,  buffer, negative);   
formatBigIntegerBinary(value, buf, offset,  -length, negative);   
formatBigIntegerBinary(value, buf, offset,  length, 1), negative);   
formatBigIntegerBinary(value, buf, offset,  offset, length), negative);   
formatBigIntegerBinary(value, buf, offset,  length, unsigned), negative);   
formatBigIntegerBinary(value, buf, offset,  255, negative);   
formatBigIntegerBinary(value, buf, offset,  length, positive);, negative);   
formatBigIntegerBinary(value, buf, offset,  position, length, negative);   
formatBigIntegerBinary(value, buf, offset,  3), negative);   
formatBigIntegerBinary(value, buf, offset,  length, true, false, negative);   
formatBigIntegerBinary(value, buf, offset,  8, true);, negative);   
formatBigIntegerBinary(value, buf, offset,  length - 4, negative);   
formatBigIntegerBinary(value, buf, offset,  length, 0, 0, negative);   
formatBigIntegerBinary(value, buf, offset,  8, length, negative);   
formatBigIntegerBinary(value, buf, offset,  length, 8, negative);   
formatBigIntegerBinary(value, buf, offset,  4), negative);   
formatBigIntegerBinary(value, buf, offset,  8, false), negative);   
formatBigIntegerBinary(value, buf, offset,  8, 0, negative);   
formatBigIntegerBinary(value, buf, offset,  0x80, negative);   
formatBigIntegerBinary(value, buf, offset,  len, negative), negative);   
formatBigIntegerBinary(value, buf, offset,  length, 0, false, negative);   
formatBigIntegerBinary(value, buf, offset,  8, negative);, negative);   
formatBigIntegerBinary(value, buf, offset,  length, '-'), negative);   
formatBigIntegerBinary(value, buf, offset,  8*length, negative);   
formatBigIntegerBinary(value, buf, offset,  4 bytes, negative);   
formatBigIntegerBinary(value, buf, offset,  lengths, negative);   
formatBigIntegerBinary(value, buf, offset,  size), negative);   
formatBigIntegerBinary(value, buf, offset,  lenient, negative);   
formatBigIntegerBinary(value, buf, offset,  4, false, negative);   
formatBigIntegerBinary(value, buf, offset,  (int)length, negative);   
formatBigIntegerBinary(value, buf, offset,  len, negative, negative);   
formatBigIntegerBinary(value, buf, offset,  length, 0xff), negative);   
formatBigIntegerBinary(value, buf, offset,  int, boolean, negative);   
formatBigIntegerBinary(value, buf, offset,  LENGTH, negative);   
formatBigIntegerBinary(value, buf, offset,  12 bytes, negative);   
formatBigIntegerBinary(value, buf, offset,  31, negative);   
formatBigIntegerBinary(value, buf, offset,  length, int, negative);   
formatBigIntegerBinary(value, buf, offset,  0, false);, negative);   
formatBigIntegerBinary(value, buf, offset,  length, negative)., negative);   
formatBigIntegerBinary(value, buf, offset,  16), negative);   
formatBigIntegerBinary(value, buf, offset,  length, true, true, negative);   
formatBigIntegerBinary(value, buf, offset,  length, 4, negative);   
formatBigIntegerBinary(value, buf, offset,  24, negative);   
formatBigIntegerBinary(value, buf, offset,  null, false, negative);   
formatBigIntegerBinary(value, buf, offset,  9, false, negative);   
formatBigIntegerBinary(value, buf, offset,  length - 8, negative);   
formatBigIntegerBinary(value, buf, offset,  type, negative);   
formatBigIntegerBinary(value, buf, offset,  8bit, negative);   
formatBigIntegerBinary(value, buf, offset,  64, false, negative);   
formatBigIntegerBinary(value, buf, offset,  0, 1, negative);   
formatBigIntegerBinary(value, buf, offset,  bytes, negative);   
formatBigIntegerBinary(value, buf, offset,  length) { }, negative);   
formatBigIntegerBinary(value, buf, offset,  0, 8, negative);   
formatBigIntegerBinary(value, buf, offset,  width, negative);   
formatBigIntegerBinary(value, buf, offset,  offset + length), negative);   
formatBigIntegerBinary(value, buf, offset,  int offset, int length, negative);   
formatBigIntegerBinary(value, buf, offset,  len, false, negative);   
formatBigIntegerBinary(value, buf, offset,  length - offset, negative);   
formatBigIntegerBinary(value, buf, offset,  buf, offset + length, negative);   
formatBigIntegerBinary(value, buf, offset,  8 bytes, negative);   
formatBigIntegerBinary(value, buf, offset,  byte[]), negative);   
formatBigIntegerBinary(value, buf, offset,  (byte) length, negative);   
formatBigIntegerBinary(value, buf, offset,   length, negative);   
formatBigIntegerBinary(value, buf, offset,  19, negative);   
formatBigIntegerBinary(value, buf, offset,  length, length), negative);   
formatBigIntegerBinary(value, buf, offset,  12), negative);   
formatBigIntegerBinary(value, buf, offset,  length, 8), negative);   
formatBigIntegerBinary(value, buf, offset,  Length, negative);   
formatBigIntegerBinary(value, buf, offset,  length, boolean negative), negative);   
formatBigIntegerBinary(value, buf, offset,  8, true), negative);   
formatBigIntegerBinary(value, buf, offset,  length<mask1> length);, negative);   
formatBigIntegerBinary(value, buf, offset,  len), negative);   
formatBigIntegerBinary(value, buf, offset,  length, 1);, negative);   
formatBigIntegerBinary(value, buf, offset,  buf[offset], length, negative);   
formatBigIntegerBinary(value, buf, offset,  length, 0, true, negative);   
formatBigIntegerBinary(value, buf, offset,  length, boolean negative, negative);   
formatBigIntegerBinary(value, buf, offset,  MAXSIZE, negative);   
formatBigIntegerBinary(value, buf, offset,  offset+length), negative);   
formatBigIntegerBinary(value, buf, offset,  size, negative), negative);   
formatBigIntegerBinary(value, buf, offset,  2^31 - 1, negative);   
formatBigIntegerBinary(value, buf, offset,  2), negative);   
formatBigIntegerBinary(value, buf, offset,  length, isNegative);, negative);   
formatBigIntegerBinary(value, buf, offset,  offset + length, false, negative);   
formatBigIntegerBinary(value, buf, offset,  pos, length, negative);   
formatBigIntegerBinary(value, buf, offset,  offset+length, false, negative);   
formatBigIntegerBinary(value, buf, offset,  9), negative);   
formatBigIntegerBinary(value, buf, offset,  9, false);, negative);   
formatBigIntegerBinary(value, buf, offset,  6), negative);   
formatBigIntegerBinary(value, buf, offset,  10, false, negative);   
formatBigIntegerBinary(value, buf, offset,  length, positive, negative);   
formatBigIntegerBinary(value, buf, offset,  size, length, negative);   
formatBigIntegerBinary(value, buf, offset,  tail, negative);   
formatBigIntegerBinary(value, buf, offset,  length, false, false, negative);   
formatBigIntegerBinary(value, buf, offset,  length - 2, negative);   
formatBigIntegerBinary(value, buf, offset,  null, true, negative);   
formatBigIntegerBinary(value, buf, offset,  length, int), negative);   
formatBigIntegerBinary(value, buf, offset,  offset + length, length, negative);   
formatBigIntegerBinary(value, buf, offset,  length, integer, negative);   
formatBigIntegerBinary(value, buf, offset,  length, 7, negative);   
formatBigIntegerBinary(value, buf, offset,  body, negative);   
formatBigIntegerBinary(value, buf, offset,  length, long), negative);   
formatBigIntegerBinary(value, buf, offset,  15, negative);   
formatBigIntegerBinary(value, buf, offset,  16, false, negative);   
formatBigIntegerBinary(value, buf, offset,  uint64, negative);   
formatBigIntegerBinary(value, buf, offset,  number of bytes, negative);   
formatBigIntegerBinary(value, buf, offset,  length, byte[]), negative);   
formatBigIntegerBinary(value, buf, offset,  4, false);, negative);   
formatBigIntegerBinary(value, buf, offset,  *, negative = false), negative);   
formatBigIntegerBinary(value, buf, offset,  length, 0xffff), negative);   
formatBigIntegerBinary(value, buf, offset,  12, false, negative);   
formatBigIntegerBinary(value, buf, offset,  4, 8, negative);   
formatBigIntegerBinary(value, buf, offset,  3, false);, negative);   
formatBigIntegerBinary(value, buf, offset,  length, 4), negative);   
formatBigIntegerBinary(value, buf, offset,  0, false), negative);   
formatBigIntegerBinary(value, buf, offset,  4, 0, negative);   
formatBigIntegerBinary(value, buf, offset,  pos, negative);   
formatBigIntegerBinary(value, buf, offset,  byte, negative);   
formatBigIntegerBinary(value, buf, offset,  8, 8, negative);   
formatBigIntegerBinary(value, buf, offset,  length, positive), negative);   
formatBigIntegerBinary(value, buf, offset,  9, true, negative);   
formatBigIntegerBinary(value, buf, offset,  12, true, negative);   
formatBigIntegerBinary(value, buf, offset,  length, 0xff, negative);   
formatBigIntegerBinary(value, buf, offset,  0, true);, negative);   
formatBigIntegerBinary(value, buf, offset,  short, negative);   
formatBigIntegerBinary(value, buf, offset,  true, false, negative);   
formatBigIntegerBinary(value, buf, offset,  4, true, negative);   
formatBigIntegerBinary(value, buf, offset,  Math.max, negative);   
formatBigIntegerBinary(value, buf, offset,  length, true, negative);   
formatBigIntegerBinary(value, buf, offset,  16, true, negative);   
formatBigIntegerBinary(value, buf, offset,  length, 9, negative);   
formatBigIntegerBinary(value, buf, offset,  2*length, negative);   
formatBigIntegerBinary(value, buf, offset,  0, 0, 0, negative);   
formatBigIntegerBinary(value, buf, offset,  length, 16), negative);   
formatBigIntegerBinary(value, buf, offset,  (int) value, negative);   
formatBigIntegerBinary(value, buf, offset,  -1, -1, negative);   
formatBigIntegerBinary(value, buf, offset,  0, length), negative);   
formatBigIntegerBinary(value, buf, offset,  8, negative, negative);   
formatBigIntegerBinary(value, buf, offset,  byte[] length, negative);   
formatBigIntegerBinary(value, buf, offset,  offset + length, true, negative);   
formatBigIntegerBinary(value, buf, offset,  (int)value, negative);   
formatBigIntegerBinary(value, buf, offset,  8 * length, negative);   
formatBigIntegerBinary(value, buf, offset,  23, negative);   
formatBigIntegerBinary(value, buf, offset,  null, false);, negative);   
formatBigIntegerBinary(value, buf, offset,  length, short), negative);   
formatBigIntegerBinary(value, buf, offset,  100, negative);   
formatBigIntegerBinary(value, buf, offset,  *, negative=false), negative);   
formatBigIntegerBinary(value, buf, offset,  length, unsigned int, negative);   
formatBigIntegerBinary(value, buf, offset,  length, false, true, negative);   
formatBigIntegerBinary(value, buf, offset,  length, byte), negative);   
formatBigIntegerBinary(value, buf, offset,  offset+length, true, negative);   
formatBigIntegerBinary(value, buf, offset,  size, negative);, negative);   
formatBigIntegerBinary(value, buf, offset,  header, negative);   
formatBigIntegerBinary(value, buf, offset,  10, false);, negative);   
formatBigIntegerBinary(value, buf, offset,  bytes, offset, length, negative);   
formatBigIntegerBinary(value, buf, offset,  length, 64), negative);   
formatBigIntegerBinary(value, buf, offset,  int length, boolean negative, negative);   
formatBigIntegerBinary(value, buf, offset,  0, true), negative);   
formatBigIntegerBinary(value, buf, offset,  64, false);, negative);   
formatBigIntegerBinary(value, buf, offset,  26, negative);   
formatBigIntegerBinary(value, buf, offset,  30, negative);   
formatBigIntegerBinary(value, buf, offset,  name, negative);   
formatBigIntegerBinary(value, buf, offset,  stream, negative);   
formatBigIntegerBinary(value, buf, offset, length,  negative);   
formatBigIntegerBinary(value, buf, offset, length,  false);   
formatBigIntegerBinary(value, buf, offset, length,  true);   
formatBigIntegerBinary(value, buf, offset, length,  0);   
formatBigIntegerBinary(value, buf, offset, length,  positive);   
formatBigIntegerBinary(value, buf, offset, length,  negative););   
formatBigIntegerBinary(value, buf, offset, length,  null);   
formatBigIntegerBinary(value, buf, offset, length,  -1);   
formatBigIntegerBinary(value, buf, offset, length,  length);   
formatBigIntegerBinary(value, buf, offset, length,  long);   
formatBigIntegerBinary(value, buf, offset, length,  positive););   
formatBigIntegerBinary(value, buf, offset, length, negative);   
formatBigIntegerBinary(value, buf, offset, length,  boolean negative);   
formatBigIntegerBinary(value, buf, offset, length,  0x80);   
formatBigIntegerBinary(value, buf, offset, length,  binary);   
formatBigIntegerBinary(value, buf, offset, length,  1);   
formatBigIntegerBinary(value, buf, offset, length,  Negative);   
formatBigIntegerBinary(value, buf, offset, length,  !negative);   
formatBigIntegerBinary(value, buf, offset, length,  negative);   
formatBigIntegerBinary(value, buf, offset, length,  negative));   
formatBigIntegerBinary(value, buf, offset, length,  negative, true);   
formatBigIntegerBinary(value, buf, offset, length,  short);   
formatBigIntegerBinary(value, buf, offset, length,  byte);   
formatBigIntegerBinary(value, buf, offset, length,  0xff);   
formatBigIntegerBinary(value, buf, offset, length,  positive, negative);   
formatBigIntegerBinary(value, buf, offset, length,  true, false);   
formatBigIntegerBinary(value, buf, offset, length,  0, false);   
formatBigIntegerBinary(value, buf, offset, length,  zero);   
formatBigIntegerBinary(value, buf, offset, length,  int);   
formatBigIntegerBinary(value, buf, offset, length,  isNegative);   
formatBigIntegerBinary(value, buf, offset, length,  negative;);   
formatBigIntegerBinary(value, buf, offset, length,  signed);   
formatBigIntegerBinary(value, buf, offset, length,  overflow);   
formatBigIntegerBinary(value, buf, offset, length,  positive integer);   
formatBigIntegerBinary(value, buf, offset, length,  true, true);   
formatBigIntegerBinary(value, buf, offset, length,  negative<mask5> negative);   
formatBigIntegerBinary(value, buf, offset, length,  0, true);   
formatBigIntegerBinary(value, buf, offset, length,  false, false);   
formatBigIntegerBinary(value, buf, offset, length, NEGATIVE);   
formatBigIntegerBinary(value, buf, offset, length,  positive));   
formatBigIntegerBinary(value, buf, offset, length,  negative );   
formatBigIntegerBinary(value, buf, offset, length,  negative, false);   
formatBigIntegerBinary(value, buf, offset, length,  nonnegative);   
formatBigIntegerBinary(value, buf, offset, length,  negative=false);   
formatBigIntegerBinary(value, buf, offset, length,  pos);   
formatBigIntegerBinary(value, buf, offset, length,  zeroPadding);   
formatBigIntegerBinary(value, buf, offset, length,  8);   
formatBigIntegerBinary(value, buf, offset, length,  unsigned int);   
formatBigIntegerBinary(value, buf, offset, length,  false, true);   
formatBigIntegerBinary(value, buf, offset, length,  0xFF);   
formatBigIntegerBinary(value, buf, offset, length,  positive int);   
formatBigIntegerBinary(value, buf, offset, length,  unsigned);   
formatBigIntegerBinary(value, buf, offset, length,  '-'));   
formatBigIntegerBinary(value, buf, offset, length,  0x00);   
formatBigIntegerBinary(value, buf, offset, length,  negative<mask1> negative);   
formatBigIntegerBinary(value, buf, offset, length,  negative<mask5> true);   
formatBigIntegerBinary(value, buf, offset, length,  0xffff);   
formatBigIntegerBinary(value, buf, offset, length,  negatives);   
formatBigIntegerBinary(value, buf, offset, length,  64);   
formatBigIntegerBinary(value, buf, offset, length,  size);   
formatBigIntegerBinary(value, buf, offset, length,  negative = false);   
formatBigIntegerBinary(value, buf, offset, length,  true););   
formatBigIntegerBinary(value, buf, offset, length,  0, 0);   
formatBigIntegerBinary(value, buf, offset, length,  4);   
formatBigIntegerBinary(value, buf, offset, length,  negative<mask1> false);   
formatBigIntegerBinary(value, buf, offset, length,  '-');   
formatBigIntegerBinary(value, buf, offset, length,  0x80000000);   
formatBigIntegerBinary(value, buf, offset, length,  negated);   
formatBigIntegerBinary(value, buf, offset, length, isNegative);   
formatBigIntegerBinary(value, buf, offset, length,  0););   
formatBigIntegerBinary(value, buf, offset, length,  negative = true);   
formatBigIntegerBinary(value, buf, offset, length,  negative<mask1> length);   
formatBigIntegerBinary(value, buf, offset, length,  integer);   
formatBigIntegerBinary(value, buf, offset, length,  non-negative);   
formatBigIntegerBinary(value, buf, offset, length,  length, negative);   
formatBigIntegerBinary(value, buf, offset, length,  1 byte);   
formatBigIntegerBinary(value, buf, offset, length,  flag);   
formatBigIntegerBinary(value, buf, offset, length,  positive or negative);   
formatBigIntegerBinary(value, buf, offset, length,  ++offset);   
formatBigIntegerBinary(value, buf, offset, length,  exclusive);   
formatBigIntegerBinary(value, buf, offset, length,  negative, null);   
formatBigIntegerBinary(value, buf, offset, length,  0, negative);   
formatBigIntegerBinary(value, buf, offset, length,  0x8000);   
formatBigIntegerBinary(value, buf, offset, length,  value);   
formatBigIntegerBinary(value, buf, offset, length,  Long);   
formatBigIntegerBinary(value, buf, offset, length,  positive bool);   
formatBigIntegerBinary(value, buf, offset, length,  negative<mask1> true);   
formatBigIntegerBinary(value, buf, offset, length, false);   
formatBigIntegerBinary(value, buf, offset, length,  strict);   
formatBigIntegerBinary(value, buf, offset, length,  nonNegative);   
formatBigIntegerBinary(value, buf, offset, length,  type);   
formatBigIntegerBinary(value, buf, offset, length,  reverse);   
formatBigIntegerBinary(value, buf, offset, length,  len);   
formatBigIntegerBinary(value, buf, offset, length,  false););   
formatBigIntegerBinary(value, buf, offset, length,  null););   
formatBigIntegerBinary(value, buf, offset, length,  9);   
formatBigIntegerBinary(value, buf, offset, length,  negative=true);   
formatBigIntegerBinary(value, buf, offset, length,  positive boolean);   
formatBigIntegerBinary(value, buf, offset, length,  positive;);   
formatBigIntegerBinary(value, buf, offset, length,  10);   
formatBigIntegerBinary(value, buf, offset, length,  0));   
formatBigIntegerBinary(value, buf, offset, length,  bytes);   
formatBigIntegerBinary(value, buf, offset, length,  0x00000000);   
formatBigIntegerBinary(value, buf, offset, length,  bool negative);   
formatBigIntegerBinary(value, buf, offset, length,  true));   
formatBigIntegerBinary(value, buf, offset, length,  2);   
formatBigIntegerBinary(value, buf, offset, length,  7);   
formatBigIntegerBinary(value, buf, offset, length,  lenient);   
formatBigIntegerBinary(value, buf, offset, length,  negative<mask5> false);   
formatBigIntegerBinary(value, buf, offset, length, true);   
formatBigIntegerBinary(value, buf, offset, length,  positive || negative);   
formatBigIntegerBinary(value, buf, offset, length,  full);   
formatBigIntegerBinary(value, buf, offset, length,  ASCII);   
formatBigIntegerBinary(value, buf, offset, length,  truncated);   
formatBigIntegerBinary(value, buf, offset, length,  16);   
formatBigIntegerBinary(value, buf, offset, length,  3);   
formatBigIntegerBinary(value, buf, offset, length,  bigger);   
formatBigIntegerBinary(value, buf, offset, length,  0x0);   
formatBigIntegerBinary(value, buf, offset, length,  negative bool);   
formatBigIntegerBinary(value, buf, offset, length,  Negative integer);   
formatBigIntegerBinary(value, buf, offset, length,  unsigned integer);   
formatBigIntegerBinary(value, buf, offset, length,  empty);   
formatBigIntegerBinary(value, buf, offset, length,  0xffffffff);   
formatBigIntegerBinary(value, buf, offset, length,  unsigned long);   
formatBigIntegerBinary(value, buf, offset, length,  bigEndian);   
formatBigIntegerBinary(value, buf, offset, length,  position);   
formatBigIntegerBinary(value, buf, offset, length,  minus sign);   
formatBigIntegerBinary(value, buf, offset, length,  reversed);   
formatBigIntegerBinary(value, buf, offset, length,  absolute);   
formatBigIntegerBinary(value, buf, offset, length,  padding);   
formatBigIntegerBinary(value, buf, offset, length,  formatLongBinary);   
formatBigIntegerBinary(value, buf, offset, length,  nil);   
formatBigIntegerBinary(value, buf, offset, length,  0xFFFFFF);   
formatBigIntegerBinary(value, buf, offset, length,  positive|negative);   
formatBigIntegerBinary(value, buf, offset, length,  negative true);   
formatBigIntegerBinary(value, buf, offset, length,  negative<mask1> 1);   
formatBigIntegerBinary(value, buf, offset, length,  negative, length);   
formatBigIntegerBinary(value, buf, offset, length,  0x10);   
formatBigIntegerBinary(value, buf, offset, length,  "-", true);   
formatBigIntegerBinary(value, buf, offset, length,  compressed);   
formatBigIntegerBinary(value, buf, offset, length,  prefix);   
formatBigIntegerBinary(value, buf, offset, length,  32);   
formatBigIntegerBinary(value, buf, offset, length,  0x01);   
formatBigIntegerBinary(value, buf, offset, length,  negative boolean);   
formatBigIntegerBinary(value, buf, offset, length,  negative<mask5> positive);   
formatBigIntegerBinary(value, buf, offset, length,  zeroPad);   
formatBigIntegerBinary(value, buf, offset, length,  this);   
formatBigIntegerBinary(value, buf, offset, length,  "-");   
formatBigIntegerBinary(value, buf, offset, length,  false);   
formatBigIntegerBinary(value, buf, offset, length,  canonical);   
formatBigIntegerBinary(value, buf, offset, length,  large);   
formatBigIntegerBinary(value, buf, offset, length,  raw);   
formatBigIntegerBinary(value, buf, offset, length, Negative);   
formatBigIntegerBinary(value, buf, offset, length,  extended);   
formatBigIntegerBinary(value, buf, offset, length,  length, false);   
formatBigIntegerBinary(value, buf, offset, length,  0x8);   
formatBigIntegerBinary(value, buf, offset, length,  negative).);   
formatBigIntegerBinary(value, buf, offset, length,  flags);   
formatBigIntegerBinary(value, buf, offset, length,  negative.);   
formatBigIntegerBinary(value, buf, offset, length,  true);   
formatBigIntegerBinary(value, buf, offset, length,  extension);   
formatBigIntegerBinary(value, buf, offset, length,  unsigned));   
formatBigIntegerBinary(value, buf, offset, length,  '+'));   
formatBigIntegerBinary(value, buf, offset, length,  double);   
formatBigIntegerBinary(value, buf, offset, length,  bool);   
formatBigIntegerBinary(value, buf, offset, length,  temporary);   
formatBigIntegerBinary(value, buf, offset, length,  overflowPolicy);   
formatBigIntegerBinary(value, buf, offset, length,  truncating);   
formatBigIntegerBinary(value, buf, offset, length, 0);   
formatBigIntegerBinary(value, buf, offset, length,  positiveInteger);   
formatBigIntegerBinary(value, buf, offset, length,  limit);   
formatBigIntegerBinary(value, buf, offset, length,  null));   
formatBigIntegerBinary(value, buf, offset, length,  offset);   
formatBigIntegerBinary(value, buf, offset, length,  40);   
formatBigIntegerBinary(value, buf, offset, length,  positive; negative);   
formatBigIntegerBinary(value, buf, offset, length,  Boolean);   
formatBigIntegerBinary(value, buf, offset, length,  +1);   
formatBigIntegerBinary(value, buf, offset, length,  compact);   
formatBigIntegerBinary(value, buf, offset, length,  false));   
formatBigIntegerBinary(value, buf, offset, length,  0xf);   
formatBigIntegerBinary(value, buf, offset, length,  octal);   
formatBigIntegerBinary(value, buf, offset, length,  LONG);   
formatBigIntegerBinary(value, buf, offset, length,  negative, 0);   
formatBigIntegerBinary(value, buf, offset, length,  length, true);   
formatBigIntegerBinary(value, buf, offset, length,  exponent);   
formatBigIntegerBinary(value, buf, offset, length,  negate);   
formatBigIntegerBinary(value, buf, offset, length,  boolean negative););   
formatBigIntegerBinary(value, buf, offset, length,  "-", false);   
formatBigIntegerBinary(value, buf, offset, length,  decimal);   
formatBigIntegerBinary(value, buf, offset, length,  0, 1);   
formatBigIntegerBinary(value, buf, offset, length,  Negative value);   
formatBigIntegerBinary(value, buf, offset, length,  buffer);   
formatBigIntegerBinary(value, buf, offset, length,  positive flag);   
formatBigIntegerBinary(value, buf, offset, length,  0x02);   
formatBigIntegerBinary(value, buf, offset, length,  leadingZero);   
formatBigIntegerBinary(value, buf, offset, length,  lowerCase);   
formatBigIntegerBinary(value, buf, offset, length,  compression);   
formatBigIntegerBinary(value, buf, offset, length,  small);   
formatBigIntegerBinary(value, buf, offset, length,  '+');   
formatBigIntegerBinary(value, buf, offset, length,  symbolic);   
formatBigIntegerBinary(value, buf, offset, length,  uint8);   
formatBigIntegerBinary(value, buf, offset, length,  negative<mask5> 0);   
formatBigIntegerBinary(value, buf, offset, length,  Negative flag);   
formatBigIntegerBinary(value, buf, offset, length,  absolute value);   
formatBigIntegerBinary(value, buf, offset, length,  negative<mask1> null);   
formatBigIntegerBinary(value, buf, offset, length,  true, negative);   
formatBigIntegerBinary(value, buf, offset, length,  negative, binary);   
formatBigIntegerBinary(value, buf, offset, length,  0x30);   
formatBigIntegerBinary(value, buf, offset, length,  0x04);   
formatBigIntegerBinary(value, buf, offset, length,  maximum length);   
formatBigIntegerBinary(value, buf, offset, length,  0x100);   
formatBigIntegerBinary(value, buf, offset, length,  Negative number);   
formatBigIntegerBinary(value, buf, offset, length,  true|false);   
formatBigIntegerBinary(value, buf, offset, length,  0xFFFFFFFF);   
formatBigIntegerBinary(value, buf, offset, length,  special cases);   
formatBigIntegerBinary(value, buf, offset, length,  0x0000);   
formatBigIntegerBinary(value, buf, offset, length,  negative<mask1> 4);   
formatBigIntegerBinary(value, buf, offset, length,  0b100000000);   
formatBigIntegerBinary(value, buf, offset, length,  negative, zero);   
formatBigIntegerBinary(value, buf, offset, length,  negative, unsigned);   
formatBigIntegerBinary(value, buf, offset, length,  -2);   
formatBigIntegerBinary(value, buf, offset, length,  false, 0);   
formatBigIntegerBinary(value, buf, offset, length,  0x20);   
formatBigIntegerBinary(value, buf, offset, length,  neg));   
formatBigIntegerBinary(value, buf, offset, length,  positive number);   
formatBigIntegerBinary(value, buf, offset, length,  zero padding);   
formatBigIntegerBinary(value, buf, offset, length,  0xff));   
formatBigIntegerBinary(value, buf, offset, length,  negative, long);   
formatBigIntegerBinary(value, buf, offset, length,  null, false);   
formatBigIntegerBinary(value, buf, offset, length,  negative<mask1> ");   
formatBigIntegerBinary(value, buf, offset, length,  non-binary);   
formatBigIntegerBinary(value, buf, offset, length,  negative|true);   
formatBigIntegerBinary(value, buf, offset, length,  negative); });   
formatBigIntegerBinary(value, buf, offset, length,  0, length);   
formatBigIntegerBinary(value, buf, offset, length,  non-zero);   
formatBigIntegerBinary(value, buf, offset, length,  0x1000);   
formatBigIntegerBinary(value, buf, offset, length,  TarConstants);   
formatBigIntegerBinary(value, buf, offset, length,  true, 0);   
formatBigIntegerBinary(value, buf, offset, length,  positive<mask1> negative);   
formatBigIntegerBinary(value, buf, offset, length,  number of bytes);   
formatBigIntegerBinary(value, buf, offset, length,  negative<mask1> 10);   
formatBigIntegerBinary(value, buf, offset, length,  negative<mask1> 7);   
formatBigIntegerBinary(value, buf, offset, length,  negative<mask1> 8);   
formatBigIntegerBinary(value, buf, offset, length,  negative); );   
formatBigIntegerBinary(value, buf, offset, length,  0<mask1> 1);   
formatBigIntegerBinary(value, buf, offset, length,  positive<mask1> false);   
formatBigIntegerBinary(value, buf, offset, length,  0<mask1> false);   
formatBigIntegerBinary(value, buf, offset, length,  0b000);   
formatBigIntegerBinary(value, buf, offset, length,  negative<mask1> positive);   
formatBigIntegerBinary(value, buf, offset, length, );   
if(value==null){return  -1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset + length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset+length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  -1;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  0;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return -1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  false;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  0x00;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset+1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  length;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  null;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  false;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  -2;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  true;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return ;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset+len;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  0xff;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset + 9;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset + 1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  length == 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  length==0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  zero;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset + 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  0xFF;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  undefined;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  - 1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return offset+length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  length+1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  NULL;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  value;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  EMPTY;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset + 8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset + 4;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset+0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  0x0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return false;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset=0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  true;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  buffer;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  -3;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  4;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  index;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset + null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return offset + length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return   0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  length + 4;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  size;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  -999;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset == 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  1;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset+Length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset+4;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset = 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset + len;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  length + 1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  return -1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  length=0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  length + 8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset+ length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return 0;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset +length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  3;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  buf;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return -1;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset + 10;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  -1 ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  pos;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  (-1);;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset+9;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  0x80;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset:0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  8;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  len;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset+3;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  -1 ;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset - length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  0x00000000;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return length;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  -32;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset+8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  -4;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  -9999;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  -1 ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset+null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  length + 9;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  length-1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  return 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  length - 1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  ++offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return 1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset + 7;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  countNull;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  64;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset++;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return (-1);;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  length + 3;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return length==0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  -2;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  length - offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset + 3;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset + NULL;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  2;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset+10;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  +1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  length+3;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  0; };} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  0x0000;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  -8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  length+2;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset + 6;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  0<mask5> 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return (-1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  length+4;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  0x10;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset==0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  length + 2;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  'null';} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  position;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  -1l;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  length*8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  error;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  int;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  length = 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  16;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset+2;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset - 1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset=-1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  12;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  32;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return offset+1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset == length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  buf.length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  "null";} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  EOF;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  -5;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  9;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  length - 8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  length+8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset + false;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return true;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  length + 7;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  127;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset+6;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset: 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  +0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  7;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return length=0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  -1L;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  0l;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  length + offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  0x20;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  length != 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return length+1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  idx;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset += length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset, length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset+$length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  -1AST#return_statement#Right;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  -7;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset ++;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  0 ;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset++;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  --;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  4;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return buffer;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  length=-1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset-1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  --length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  -offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  0xffff;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  0x01;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  value;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  buffer.length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  -11;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  0 ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  -length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  length!=0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset+7;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  -128;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  int 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return   false;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  -64;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  -6;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset + 2;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  3;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  0L;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  length ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  -1  ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  64;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  "";;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  --0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  9;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  255;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  24;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  this;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset+=length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset+5;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  0xFFFFFFFF;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  -99999;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset==length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return   null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  -10;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  NaN;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return   -1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  length + 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  new int;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset,length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  negative;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset+16;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  nil;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return NULL;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return (0);;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  unknown;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset + 11;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  -9;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return Offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  0AST#return_statement#Right;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  length+9;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  0 ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset != 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset != length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset < 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  def;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  (-1);} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return >-1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset+false;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  long;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  '';;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  len;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset:length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  offset + 12;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return length == 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  count;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  return null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  size;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){return  length - 4;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0x00; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=null; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=1; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=BigInteger.ZERO; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0l; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0L; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0xff; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=64; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=-1; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0x00000000; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=NULL; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=DEFAULT; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=long; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0xFFFFFFFF; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0xffffffff; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=false; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0x0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=true; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value= -1; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value= 0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=8; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=""; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=MAX; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=255; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=1024; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0xFF; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0x0000; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=10; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=tar.NULL; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0x80; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=512; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=DEFAULT_VALUE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=length; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=Long; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=65536; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=256; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=16; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=Integer; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=127; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0xffff; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=2147483647; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0x10; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=INF; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=MAXSIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=Null; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=2147483648; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=default; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=byte; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=100; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=128; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=Long.ZERO; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=Bytes.NULL; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=zero; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=32; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=System.identity; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0AST#assignment_expression#Right; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=size; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=511; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=defaultLong; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0x20; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=defaultValue; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=longlong; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=MAXID; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=Bytes.EMPTY; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0xffffff; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=max; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=999; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=short; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=Long.NaN; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0xFFFFFF; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=LONG; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=long0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=new long; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0AST#ternary_expression#Right; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0b000; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=Uncompressed; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=Constants.NULL; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0x01; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=int; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=BigInteger.ONE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=2; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=7; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0x80000000; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=56; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=byte[]{}; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=new long(); } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=4; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=MAXVALUE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0xFFFF; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=String.valueOf; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=65535; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=NAN; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=Long.NULL; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=Boolean.FALSE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0long; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=maxAsInt; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=EMPTY; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=NaT; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0<mask5>0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=32768; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=String; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=123456789; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=10000000; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=defaultVal; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=len; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=BigInteger; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=99; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=5; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=1; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0xffffffffL; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=1000; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=360; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=BigDecimal.ZERO; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=3; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=254; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=50; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=999999999; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=new int; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=System.currentTimeMillis; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=NumberUtils; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=defaultSize; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=undefined; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=initialValue; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=Z; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=INITIAL; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=longDefault; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=12; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=bytes; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=NaN; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=MaxID; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=Infinity; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=20; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=1L; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0xFFFFFFFFL; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=ZERO; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=NONE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=2001; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0x9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=ByteBuffer.NULL; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=t; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=defaultValue; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=65537; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=UNDEFINED; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=Boolean.TRUE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0d; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=-99999; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=-32768; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=Consts.NULL; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=binary; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=Double.NaN; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=126; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=MaxValue; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=NUL; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=Long.SIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0x100; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=tar; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0x000000; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=this; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=hex; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=2000; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=2048; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=ts; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=defaultNumericValue; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=4096; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0x99; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=''; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=123; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=archive.NULL; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=Oid; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=80; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0b00000000; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=empty; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=24; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value= 2147483647; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0.0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=-999; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=NIL; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=63; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=UNDEF; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=octet; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0b; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0x10000; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=buffer; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=nil; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=null; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=noop; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=blob; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=9999999999999999; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=void; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=10000; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=VALUE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=maxLength; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=31; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=15; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=maxSize; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0|0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=defaultBytes; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=byte0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=Number; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=Unsigned; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=48; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=1023; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=85; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=Long.VALUE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=ulong; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=defaultBinary; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=num; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0644; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=defaultStringLength; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=MIN; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=getDefaultValue; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=<<1; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value= null; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=longValue; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=100000; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=MIN_VALUE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0x04; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0}; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=64; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=defaultNumber; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=Math.max; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=TAR; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=TarConstants; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=Float.NaN; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0b100000000; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=ASN1; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0;}; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0x8; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0x100000000; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=ByteBuffer.EMPTY; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0b0000000000000000; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0x40; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=-9999; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0x000; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=MAX_VALUE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=Math.abs; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value= 0x00; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=T.NULL; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0x1000; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value= 999999999; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=TarConstants; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0x204; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0; return; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0xNULL; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=[]byte{}; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=0b0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(value==null){ value=9; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  -1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  -1;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset + length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  0;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return -1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset+length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  false;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return ;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  null;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  length;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  false;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  NULL;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  -2;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  0x00;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  EMPTY;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  size;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  return -1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  - 1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  zero;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  true;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  length==0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  undefined;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return -1;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  1;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset+len;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  length+1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  length == 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  -1 ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return   0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  length + offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  return 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  value;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  int;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  len;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  0xFF;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  4;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  -1 ;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  error;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return false;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  buffer;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  0xff;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  length=0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  3;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return 0;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  0x0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  length + 4;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  index;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return (-1);;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  -3;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset+1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  (-1);;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  buf;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset=0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  length - offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  length + 8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  true;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  0; };} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  new int;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  -1 ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset +length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return offset+length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  0x00000000;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return (-1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset:0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  length*8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return length;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return (0);;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  count;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset = 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  -999;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset - length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return 1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  length + 1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  +1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  length+offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset+ length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  12;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  -2;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  pos;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  0<mask5> 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset, length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  64;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset == 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  -1l;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  2;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  -9999;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset,length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  buf.length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  EOF;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset + len;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  -1  ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  nil;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  8;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  -32;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  Integer;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  return null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  length*2;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset + 4;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  length = 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return offset + length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  length + 9;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  length+3;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset+Length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return ; };} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  length+2;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  length + 3;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  32;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  position;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  -4;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  0 ;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  16;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  retval;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  -1AST#return_statement#Right;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  ++offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  length-1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  this;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  size;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  -1L;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  0x80;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  length + 2;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return length==0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  null; };} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset + 9;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  length+4;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  length ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset + 8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  length+8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  -11;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  0l;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  def;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  0x0000;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  NumberFormatException;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  LENGTH;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset: 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  value;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return >-1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  0 ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset + 1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return length=0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  defaultValue;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  idx;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  buffer.length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return +1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  MAXSIZE;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  unknown;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset==0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  void;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  (-1);} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  24;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  UNKNOWN;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  length; };} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  Long;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  0xffff;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  0L;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return   -1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  long;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  NaN;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  - 1;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  len;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset=-1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  3;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  SIZE;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  length - 1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  4;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  length != 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  7;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  length + 7;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return NULL;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  0xFFFFFFFF;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  -5;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  127;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  length!=0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  0AST#return_statement#Right;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  length * 8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset+4;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  < 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  buff;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  negative;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  -8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return size;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset+$length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset - 1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  countNull;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  length=-1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return   false;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  9;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  };} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  length*3;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  err;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset:length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  12;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return   null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  EMPTY_BUFFER;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset-length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  "";;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  length+9;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  int 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset + 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  --length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  (-1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  INVALID;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return length+1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  length:0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  -7;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return Offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  ;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  64;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  +0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  ERROR;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset += length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  default;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  invalid;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  num;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  --;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  IndexOutOfBoundsException;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset++;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset + 10;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return "";;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  length - 8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return buffer;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  return null;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  false; };} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return INVALID;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offsets;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  length ;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset ++;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return Length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return <0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset < 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return 64;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  unknownLength;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  offset+9;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  0x10;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){return  -99999;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[0]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=ByteBuffer; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[512]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[9]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[8]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[]; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[4096]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[8192]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[16]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[64]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[0];}; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[1024]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[2048]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[10]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[4]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=createBuffer; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[]{}; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[32]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[512];}; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[12]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=byte[]; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[]{}; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf= new byte[0]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[256]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=byte[]{}; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[]{};; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[8];}; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[1]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[9];}; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=ByteBuf; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=Buffer; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[20]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=newbyte[]; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=byteBuffer; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=ByteBuffer.EMPTY; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[0]; return; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf= new byte[512]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=EMPTY; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=null; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[13]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[4096];}; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[128]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[65536]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=byteBuf; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=alloc; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[]{}; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[5]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[512]byte; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[100]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[size]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[]{}}; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[] {}; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=EMPTY_BYTE_ARRAY; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=bytebuffer; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[length]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[]{0};; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[8192];}; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=createByteArray; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=allocate; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[] {}; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[7]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new ByteArrayOutputStream; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=createBuffer(); }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf= new byte[9]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[16];}; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[0]; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[0];; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[512];; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf= new byte[8]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=[]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=ByteBuffers; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[]{0}; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[6]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=EMPTY_BUFFER; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=System.out; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=Arrays; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=DEFAULT_BUFFER; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[48]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[64];}; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=ArrayUtil; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=byte; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=createByteArray(); }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[512]; return; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=newbyte[0]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[]{};}; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[32768]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[9]; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=bytes; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[80]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=Util; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=byteBuffers; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=defaultBuffer; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[1024];}; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=b; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[36]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf= new byte[4096]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[40]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=bytearray; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[3]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[] {0};; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[96]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=[]byte{}; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=DEFAULT_OUTPUT_BUF; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[512]AST#dimensions_expr#Right; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[24]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[2048];}; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[] { 0 };; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=ByteBuffer.allocate; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf= new byte[16]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[65535]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[10];}; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=newbyte; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[32];}; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=buffer; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=[]byte; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=Arrays.empty; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=byte[0]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=Arrays.copyOfBuffer; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=EMPTY_BYTES; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[31]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new ByteBuf; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[11]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[1000]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[240]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte []; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[4];}; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=DEFAULT_OUTPUT; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[9]+1; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[12];}; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[2]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=ByteBufferUtil; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[50]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf= new byte[8192]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[8];; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[]{}; return 0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[] {};; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[2000]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[0] }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[9] ; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[9];; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[9]; return; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new ByteBuffer; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=Bytes; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[]{0xff}};; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte [0]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=Arrays.buf; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[4096]; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[]{}};; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[0]*8; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=IoBuffer; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte []{}; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=ObjectUtils; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new byte[160]; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=[]; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=ByteArrayUtil; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=ByteBuffer.newInstance; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=getBuf; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=DEFAULT_OUTPUT_STREAM; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=Arrays.copyOfRange; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=ByteBufferPool; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=bytebuf; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=System.buf; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=Arrays.copyOf; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=BytesBuffer; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf= new byte[]; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=ByteUtil; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=defaultBytes; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=emptyBuffer; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=ObjectUtil; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=allocBuffer; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf= []; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=alloc_buf; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new ByteArrayOutputStream(); } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=Buffers; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf= ByteBuffer; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=buf; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=byte[].class; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=createByteArray(); } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=byte[]}; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=ArrayUtils; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=ByteBufferUtils; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=BytesUtil; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=System.err; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=allocateBuffer; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=getDefaultBuffer; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=DEFAULT_ENCODING; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=allocator; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new Buffer; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=createBuffer(); } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf= EMPTY; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=CodedBuffer; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=Null; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=make([]byte; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=createBlankBuffer; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=byte []; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=byte[] {}; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=byteArr; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=buildBuffer; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=init; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=t[]; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=b''; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=makeBuffer; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=b""; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=t; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf= alloc; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=getBuffer; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=blob; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=byteBuff; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=ByteBuffer[]; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=new int; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=byte array; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf= Bytes; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=Object; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=BytesUtils; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=tmp; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=ts; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=TAR; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=EmptyBuffer; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=Alloc; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=DEFAULT; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=CreateBuffer; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf= new byte; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=ByteBufferImpl; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=NullBuffer; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=""; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=byte buffers; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=bb; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=[];}; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=ByteBuffer{}; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf= []; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=input; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=MemoryUtil; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=array; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=allocCString; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=byteArray; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=createbuffer; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=createInputBuffer; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=blank; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=createByteBuffer; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=rw; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=Lists; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=_EMPTY; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=BufferUtils; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=IoUtil; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=BytesIO; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf= []byte; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=byteData; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=IOUtil; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(buf==null){ buf=r; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  -1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  -1;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset+length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset + length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  false;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  0;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  null;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return -1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return ;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  false;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  true;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length+1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  value;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset=0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  - 1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  -2;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset = 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return length;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length==0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  zero;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length == 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length + offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  NULL;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  size;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length*8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  1;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length + 8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length + 1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  true;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset==null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  0x00;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length + 4;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  undefined;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return false;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return -1;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  -length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length=0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset == null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length + 9;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  -1 ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length - offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  index;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  int;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  -1 ;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  0x80;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length-1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  len;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length*2;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return   0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return 1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  4;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset - length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  value;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  count;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  0xFF;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  null; };} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  ++offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  3;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  return -1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  EMPTY;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  +1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset+len;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  pos;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length+3;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  0xff;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length - 1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  -3;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  position;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return 0;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length+2;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  error;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset:0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length; };} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length + 3;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset, length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  return 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length+8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  2;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  -offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  buf;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length+offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return offset+length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  -1 ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length+9;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length = 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  this;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length + 2;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length+4;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  buffer;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset:null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return length+1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  -1l;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  +length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length==null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  --;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return ; };} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  -999;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  0x0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset,length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset=-1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset+1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  0x00000000;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  (-1);;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  nil;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  0; };} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  limit;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset+ length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length * 8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  negative;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset: null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset: 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length + 7;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset<mask5> 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length - 8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset ;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length*3;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return length=0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  64;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return (-1);;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length ;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  Integer;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return (0);;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  12;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset +length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  new int;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return length==0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  0<mask5> 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return true;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  16;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  -1L;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset++;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  --length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return Length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length<mask5> 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  -4;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  -2;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length + length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return +1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  -11;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset:;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  -9999;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  -1  ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset-1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  8;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  32;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length != 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset<mask5> null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return Offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return offset;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  -32;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  long;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  EOF;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  NaN;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  Long;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  ;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length<mask5> length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length*4;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset - 1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  size;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  +0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length=-1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  "";;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  +value;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset != null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return (-1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length+7;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset+=length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  return null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  -int;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset : null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  - 1;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset; };} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  return offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset=null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  UNKNOWN;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  -8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset/length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset<mask5> length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return length*8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return null;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  0 ;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length/2;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return value;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return   null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length + 12;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  name;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  len;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset+$length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  LENGTH;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset += length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  NumberFormatException;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return };;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  buf.length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  false; };} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length - 9;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  0x0000;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length + 6;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset="";;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return offset + length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  retval;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length!=0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  defaultOffset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  0xffff;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  0 ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  MAXSIZE;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length int;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length/8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  < 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  return length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  0l;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  -1AST#return_statement#Right;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length + 10;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return   false;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return >-1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset+Length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length++;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return offset=0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length - 4;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  '';;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset<mask5> offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length + 16;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  return value;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset ++;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  length+16;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return size;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return :;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return  offset-length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return   ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return NULL;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){return false;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=1; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=buf.length; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=length; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=null; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset= 0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=64; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=0; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=size; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=4; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=offset; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=len; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=32; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=16; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=8; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset= -1; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=defaultOffset; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=start; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=12; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=ptr; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=NULL; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=-1; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=3; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=10; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=2; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=512; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=limit; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=value; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=startIndex; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=count; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=pos; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=buffer.length; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=5; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=7; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=6; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=DEFAULT_OFFSET; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=1024; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=true; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=length*8; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=begin; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=Length; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=0AST#assignment_expression#Right; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=position; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=total; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=i; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=first; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=bufferOffset; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=MAX; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=nil; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=max; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=calcOffset; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=63; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=Integer; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=0; return; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=false; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=0;}; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=MAXSIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=tarSize; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=ivOffset; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset= length; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=getSize; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=new int; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=r; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=ptrOffset; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=tarOffset; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=tarHeaderLength; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=n; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=0x80; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=length*2; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=zero; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=strlen; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=idx; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=NULL_OFFSET; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=iv; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=makeOffset; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=0<mask5>0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=min; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=getLength; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=blobStart; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=bytes.length; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=0x00; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=DEFAULT; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=init; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=makeIndex; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=data.length; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=getDefaultOffset; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=headerLength; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=idlen; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=tar; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=getPos; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=origin; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=flags; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=bufferPos; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=50; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=13; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=tarHeaderLen; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=length+1; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=length*4; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=initial; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=calculateOffset; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=totalLength; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=INITIAL; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=ffi; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=Size; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=length-1; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset= buf.length; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=sizeInBytes; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=tarHeaderStart; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=tar.NULL; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=128; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=input.length; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=ptrSize; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=headerSize; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=zeroOffset; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=inputOffset; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=totalSize; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=tar.length; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=tar.offset; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=defaultStringLength; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=maxOffset; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=20; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=511; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=tarHeaderSize; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=currentPos; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=index; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=last; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=tagSize; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=dataStart; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=bufOffset; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=MAGIC; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=NULLBUFF; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset= null; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=0 ; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=blobOffset; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=header; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=Infinity; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=root; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=hdrLen; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=48; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=256; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset= -length; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=input; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=""; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=tarHeader; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=257; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=1; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=byteSize; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=binary.length; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=originalOffset; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=originalPos; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=this.offset; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=EMPTY; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=tar.pos; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=buffer; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=makePos; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=ZERO; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=32768; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=bufStart; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=header.length; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=0xff; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=24; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=Null; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=guessOffset; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=startOffset; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=nullLength; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=65537; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=MIN; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=head; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=b; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=marker; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset= 1; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=null; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=11; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=bufferStart; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=buf; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset= size; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=val; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=nullOffset; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=31; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=Len; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=blobPos; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=t; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=0l; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=None; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=0x10; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=maxLength; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=fileOffset; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=2147483647; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=0xFF; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=m_offset; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=srcPos; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=width; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=blobHeaderSize; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=HEAD; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=headerOffset; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=totalOffset; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=bytesLen; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=byte; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=255; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=refs; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=name; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=alloc; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=80; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=buff.length; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=num; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=tarHeaderOffset; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=DEFAULT_POS; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=headerStart; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=tar.size; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=NullOffset; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=originalLength; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=SIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=56; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=file.length; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=ByteBuffer.NULL; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=nativeOffset; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=length*3; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=Math.max; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=0; length; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=DEFAULT_LEN; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=hdr.length; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=Bytes.length; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=tar.HEADER; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=trailingZero; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=getMaxOffset; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=length; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=tar.Pos; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=values.length; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=size(); } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=DEFAULT_INDEX; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=header.offset; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=length/8; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=super.offset; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=length+4; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=tarHeaderPos; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=Long.SIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=tarUncompressedSize; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=tarOffset; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=getDefaultOffset(); } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=headers.length; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=0x0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=0 ; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=tar.Offset; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=tar.HeaderSize; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=tarUncompressedOffset; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=Buf.NULL; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=t.offset; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=Bytes.NULL; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(offset==null){ offset=length+8; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  -1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset + length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset+length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  0;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  -1;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  null;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  false;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return -1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset+1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  length;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset+len;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return ;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset + null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  true;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  value;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset + 9;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  NULL;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  length==null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  zero;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  false;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset+null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset + 8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset + 1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  undefined;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  length=0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  - 1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  -2;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset + len;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  0x80;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset+4;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  size;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return offset+length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset + 4;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset +length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset+8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset+ length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset+9;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  -length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  0x00;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return   0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset+Length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  length == null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return offset + length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset + 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  4;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  true;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  0xff;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  int;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  len;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  1;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset+10;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  EMPTY;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset + 10;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset+3;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  index;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  value;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  0xFF;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  ++offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset+0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  buffer;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  length+1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  length = 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  3;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  +1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset + NULL;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  count;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  -3;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  64;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset=0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  2;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset = 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset+$length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return false;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  pos;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  -offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return 1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  length*8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset+2;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  16;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  8;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  return 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  32;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  +0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  buf;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  long;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  return -1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset+16;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  position;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  length ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset - length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  limit;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset + 3;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset+6;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return length;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return length=0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  length == 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  -999;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  length==0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset == null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  -1 ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  --;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return 0;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  this;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  --length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  length=null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset + limit;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  9;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  Integer;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  nil;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset + 7;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  0x0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset + 6;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  12;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return -1;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset+7;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  length=-1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  countNull;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  +value;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset, length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset + size;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return   null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset+size;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  negative;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  (-1);;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  +length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  0x00000000;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  buf.length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  length + offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset+64;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return true;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  length + 8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  Long;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset + 16;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset==null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  -4;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  buffer.length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return value;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  length + 1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset+count;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  length*2;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  MAXSIZE;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return offset+1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset += length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset+5;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset++;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  -1 ;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  return null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return   ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  -1 ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return length==null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  length<mask5> 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset + 2;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  127;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset + 40;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  -1l;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset + count;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset + value;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  length - offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset+limit;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset,length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset:0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset + 12;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  new int;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return    0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  24;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  length!=null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  size;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  -8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return offset+len;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return +1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  byte;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  "";;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  255;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  -9999;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  length + 4;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  0<mask5> 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset+12;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  0xffff;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  undefined length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset + 32;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  idx;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  -1L;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset + 64;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  int 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  -32;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset+NULL;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return NULL;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset+20;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  64;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  length=8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset+false;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  NaN;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  length != null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  80;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset+32;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  length * 8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset ++;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  (-1);} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  -11;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  -2;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset + false;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  void;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  7;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  defaultValue;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  10;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  total;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return Offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return 64;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  EOF;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  -Infinity;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return (-1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset == 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  length-1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset - 1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset+LENGTH;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset+=length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  32;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  4;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return Length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return   false;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  length int;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset+11;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  ;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  '';;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  endOffset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return (-1);;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  offset ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  ASN.1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  name;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  length+8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  len;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  0l;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  -5;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){return  prefix;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.MAXSIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=MAXSIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=maxAsOctalChar; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=64; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=1; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.UIDLEN; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=8; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=DEFAULT; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=tarConstants.MAXSIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=DEFAULTSIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=null; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=DEFAULT_LEN; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=10; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=DEFAULT_LENGTH; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=16; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=MAX; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=DEFAULTLEN; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=65536; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.MAXID; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=4; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=DEFAULT_SIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=defaultLength; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=Integer.MAXSIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=32; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=Long.MAXSIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.DEFAULTSIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=Long.MAXVALUE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=2; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=tar.MAXSIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.MINSIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=maxSize; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=12; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=1024; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=7; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=3; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=512; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=6; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=Long.MAX_VALUE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=999; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=Integer; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=defaultStringLength; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=5; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=MAXLEN; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=MAXLENGTH; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=MAXID; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.LIMIT; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.SIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=NULL; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.TAGLEN; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=50; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=MaxID; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=65535; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=MaxSize; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.DEFAULT; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=DEFAULTLENGTH; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=maxAsInt; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=true; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.IDLEN; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=100; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=128; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=max; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=tarConstants.UIDLEN; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=Integer.MAX_VALUE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=20; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=defaultSize; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.NULL; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=getMaxSize; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.MAXsize; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=Integer.MAXVALUE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=MINSIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=13; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=4096; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.LENGTH; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=Long.MIN_VALUE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=tarConstants; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=DEFAULT_LIMIT; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=DEFAULTLIMIT; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=255; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.UNSIGNED; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.MAXLEN; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=256; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.LEN; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=MAXsize; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=false; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.UNKNOWN; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=maxIdlen; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=Uncompressed; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=9999; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.DEFAULTLEN; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=len; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.NULLSIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.ULEN; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=Long.MAXBITS; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=15; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=ArchiveConstants.MAXSIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=2147483647; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=40; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=2147483648; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=Max; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.MAXLENGTH; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=1000; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=80; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants#MAXSIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=9223372036854775808; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=Long.MAXID; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=8192; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.NULLLEN; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=10000; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=length; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.MINLEN; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=24; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=DEFAULT_BUFFER_SIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=UNLIMITED; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=MaxIdlen; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=defaultArrayLength; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=48; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=Constants.MAXSIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.UNILEN; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.UL; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=min; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=MIN; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.UNSPECIFIED; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=maxAsOctal; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=UncompressedLength; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=Unsigned; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=11; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=MaxValue; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=ASN; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=10000000; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=511; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=MINLEN; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=1000000; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=Short.MAXVALUE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=DEFAULT_VALUE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TRANSIENT; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=LONG; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=Null; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=0xffff; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.LONGSIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=34; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.ULLEN; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=DEFAULT_BUFFER_LENGTH; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=tarConstants.MAXID; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.ULONG; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=Maxsize; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=2000; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=108; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.UNCOMPRESSED; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=9223372036854775807; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=getMaxIdLen; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TAGLEN; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=999999999; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=99999; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=defaultLen; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=56; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=63; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=UncompressedSize; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=915; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=maxLength; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=value; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=0xff; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=tarconstants.MAXSIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=maxIdLen; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstant.MAXSIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=36; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.LIMITSIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=MAXVALUE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=MaxInt; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=defaultMaxSize; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.NORMAL; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=120; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=nil; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.UNDEFINED; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=DEFAULTMAX; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=getMaxID; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=maxSize; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=GNU; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.MAXVALUE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=40000; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=Short.MAX_VALUE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=0x80; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=tarUncompressedLength; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=tar.DEFAULT; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length= 0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=UNKNOWN; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=30; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.BYTES; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=tar; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarUtil.MAXSIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.UINTLEN; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=DEFAULT_MAXSIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.NONE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=int; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=99; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=Long; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=22; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=defaultMaxSize; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=96; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=BigInteger.MAXSIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=DEFAULT_ENCODING; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=NONE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=MAXBITS; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=MAXINT; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.NOSIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=getMaxSize(); } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.ULEN; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=Long.SIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.MINID; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=maxAsOctalLen; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.MAXBITS; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=radix; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.MAX; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=INF; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=long; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=31; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=Integer.MIN_VALUE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.UNI; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=maxID; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=0xFFFF; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=tarConstants.MINSIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.LONG; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=tarconst.MAXSIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=defaultMax; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=100000; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=binaryLength; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=getLength; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=MINLENGTH; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.BINARY; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=getMaxId; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=Math.max; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=getMaxIdlen; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=156; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=EMPTY; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.VALUELEN; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=MaxId; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=UNDEFINED; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length= MAXSIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=DEFAULTWIDTH; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=IDLEN; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=parseInt; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=MIN_LENGTH; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=LIMIT; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=tarConstants.MAXsize; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=TarConstants.OCTETLENGTH; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=Tar.MAXSIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=getMaxIdLength; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(length==null){ length=DEFAULT_LONG; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  -1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset + length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset+length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  0;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  -1;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  false;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  value;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return -1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  -offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  -length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  null;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return ;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  true;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return offset+length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset+len;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset+1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length+1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  0x80;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return offset + length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset+ length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  false;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset +length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length + offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  0xff;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  - 1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  zero;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset + 9;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  0xFF;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  value;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length - offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset + 4;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  1;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  size;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return length;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  int;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset + 8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  ++offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset + 1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length + 4;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  4;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset += length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length + 1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length*8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  -2;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  undefined;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return 1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset + len;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  index;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset - length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset+$length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length == 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length + 8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  negative;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  true;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  0x00;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  --length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length-1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  2;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  3;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset+4;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length+2;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length*2;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return false;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset+9;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset+Length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length==0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length+offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return value;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  position;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  -value;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length+3;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset, length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset=0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset = 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length + 9;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  count;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  NULL;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset+=length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  +value;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  -3;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  +length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  buffer;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length + 2;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return 0;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  buf;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length+4;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  len;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return -1;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset++;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset+8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length + 3;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return   0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  16;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  64;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  pos;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset+3;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  - offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  limit;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return length+1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  8;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  -1 ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  EMPTY;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length+8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset + 6;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  long;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  this;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length + 7;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset + 7;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  -offset;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  12;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset ++;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset,length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset + 10;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset+6;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length=0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return true;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  - length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  --offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  -int;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length+9;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  -length;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset + 3;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  return 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  (-1);;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset+2;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  9;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset == 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length * 8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  -1 ;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  -999;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  0xffff;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  byte;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset + size;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  +offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset+10;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  -4;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  +1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  32;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length/2;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset:0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  -8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset + 2;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  255;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset + 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  buf.length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length*3;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length ;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  -0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset++;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset+size;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  7;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset+7;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  0x0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset-length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  Integer;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return offset;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  "";;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset:length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  (-1);} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length+7;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  return -1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return offset+len;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  6;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  127;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  -1 ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  size;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length - 1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  MAXSIZE;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  - 1;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  --;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return length*8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  short;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length = 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  prefix;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  nil;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset ;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset/length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset+16;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length/8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return (-1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  int 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length + length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length + 6;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  ;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset + value;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  buffer.length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return offset+1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  64;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  '';;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset + 16;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return 3;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return negative;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset + limit;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length; };} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset + 12;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  -2;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  -1l;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  0x00000000;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  encoding;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset: 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset + 11;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset+0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset = length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length - 8;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return offset +length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  0<mask5> 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return length-1;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  0 ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  4;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  truncated;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return length - offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  integer;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length int;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset: length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  24;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length++;;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return length==0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  NaN;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  -32;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset + null;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  idx;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  return value;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return (-1);;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset plus length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  number;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return Offset;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return size;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  offset+5;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length-4;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  unsigned;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  ;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length<mask5> length;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length != 0;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){return  length+6;} formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=true; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=false; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=value < 0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=value<0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative= true; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length < 9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative= false; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length<9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=isNegative; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=null; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=true; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=Boolean.TRUE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length > 9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=value <0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length<0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length==0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length>0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length < 0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length > 0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=Boolean.FALSE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative= value < 0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=value > 0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=value>0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=false; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length >= 9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative= length < 9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length <= 9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length == 0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=Boolean; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length < 8; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=value<=0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=value <= 0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length<=9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=value >= 0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length>9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=value>=0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=1; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length>=9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length < 10; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=value != 0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length<10; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=value==0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length <= 0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length != 0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length==9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative= !negative; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length<=0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length == 9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length<8; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative= value<0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length!=0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length != 9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=true }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=isEmpty; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=value!=0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative= isNegative; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=value == 0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length <9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length < 7; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=value < 10; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=value; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=true;}; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=true}; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=value < 9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative= length<9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=signed; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=true ; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=Integer; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=size==0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=isUnsigned; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=isPositive; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=value< 0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=++length; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length < 4; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=boolean; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=defaultNegative; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=!negative; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=size < 9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative= !length; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=size; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=this; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative= null; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length>=0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=""; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=Boolean.parseBoolean; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative= length > 9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length < 1; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length<5; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=isNull; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length!=9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=isnegative; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=value > 9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative= !value; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=empty; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=this.negative; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length==-1; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length > 8; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=value < 1; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length < 3; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=value <= 9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative= 0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=true; return 0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=value<1; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=value < 8; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=size == 0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length<3; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=false; return 0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=true ;; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=!!; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length<7; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length >= 0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length >= 8; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative= length < 0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length<1; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=isNegative(); } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=size>0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative= true }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length>8; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative= length <= 9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=formatLongBinary; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=true ; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length < 12; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=size() < 9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=flags; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative= length > 0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length<4; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=isNeg; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative= length >= 9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length <= 8; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=trueAST#ternary_expression#Right; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=equals; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length < 6; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length < 5; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=size()>0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=defaultValue; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative= length < 8; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length<6; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative= Boolean.TRUE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=size<9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=TRUE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length == 8; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative= length == 0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=offset < 0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative= true; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=value<9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length<64; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length==1; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=MAX; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=trueAST#assignment_expression#Right; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=yes; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=binary; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=MAXSIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative= !isNegative; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length<32; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=value < -9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length==8; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=size==-1; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=value<10; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length==null; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=--length; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=value < 128; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=value <> 0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative= value <0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length < MAXSIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=countNegative; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=size > 0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=undefined; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=options.negative; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length>7; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative= !Negative; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length<16; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=size > 9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length > 7; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative= length<0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length > 10; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length>1; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=value<$0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=size()==0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative= Boolean.FALSE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length >=9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative= length==0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length < 11; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length > 1; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length == 1; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length < 32; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative= false; }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=isNegative; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length< 9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative= !isNegative; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=required; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=size<=9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=hasUnsigned; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=nullable; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=is negative; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length < 16; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=flag; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=NULL; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=allowNegative; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length<12; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative= value > 0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=short; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=size <= 9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=isNegative(); }; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length < 64; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=flags.negative; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length == -1; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=booleanValue; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=++value; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=value < 0xff; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=!value; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length>5; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative= !0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=this.isNegative; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative= true; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=size!=0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length < 2; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=value < -1; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative= !binary; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=true; return length; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=isSigned; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=size==9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=encoded; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length<=8; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length == null; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative= Boolean; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length>=8; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=this.isNegative; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length >0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=value <= 0xff; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=more; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=size != 0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=Integer.MAXSIZE; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=  true; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length != 8; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=value>9; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=true  ; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=false; return length; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=normal; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=new boolean; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=zero; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=length==64; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=offset<0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=positive; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=arg; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=value < -0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=LONG; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative= value <= 0; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative==null){ negative=limit; } formatBigIntegerBinary(value, buf, offset, length, negative);   
if(negative){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length > 9){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 8){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 9){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 10){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length > 0){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 7){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length == 9){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length >= 9){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(value < 0){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length != 9){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length == 0){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 4){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length > 8){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 16){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length>9){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 12){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length<9){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 32){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length > 7){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(false){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 3){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 6){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 5){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 0){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length <= 9){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length != 0){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 11){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length >= 8){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length == 8){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length > 10){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(true){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 20){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 19){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 1){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(isNegative){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length==0){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 64){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 2){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length>0){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(value<0){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 14){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if( length > 9){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length > 1){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length == 1){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(binary){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length > 4){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(signed){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 36){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if( negative){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length <= 8){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 100){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length == 7){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length > 6){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 40){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if( !negative){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 13){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 18){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length > 3){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length<8){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 15){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 1024){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(value < 10){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length > 5){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(NEGATIVE){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length > 12){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length != 8){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length == 4){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 28){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length == 10){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length<10){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length >= 7){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 128){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if( length < 9){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length<0){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 21){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if( length < 8){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length >= 10){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length>=9){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(value > 0){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 30){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length > 20){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length>7){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(negative==false){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length<7){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(value > 9){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length>8){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(negate){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length > 16){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(reverse){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length > 11){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length == 16){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length <= 7){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length >= 4){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(positive){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length==9){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 1000){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(value >= 0){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length == 12){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length<5){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length > 15){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length > 64){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if( length < 10){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length == 6){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 256){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 31){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length == 3){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length<=9){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length <= 0){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length == 32){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 26){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(neg){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 17){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length!=0){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length <= 10){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(null != value){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length >= 0){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(unsigned){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 25){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length >= 6){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length<16){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length > 100){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length >= 3){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length == 2){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length<6){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length > 2){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 63){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 23){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length<3){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length<4){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 38){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length > 32){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 22){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(value <= 0){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(value < 1){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(short){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length>5){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 56){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length == 64){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length >= 5){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 50){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length!=9){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(value < 9){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length > 63){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 99){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length<32){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length>6){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(value < 8){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(value != 0){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length == 5){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length >= 12){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 65){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(strict){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length > 19){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(negative==true){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(bytes){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 33){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length >= 1){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length > 31){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(0 < length){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 62){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length != 4){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length >= 16){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length > 14){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length != 10){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 24){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length >9){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length > 255){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(value == 0){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 10000){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 80){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if( length == 9){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(negative!=false){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length <= 16){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length > 40){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length >= 2){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if( length < 7){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 65536){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(value < 1024){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length==1){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 127){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 27){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(null == value){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 70){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 41){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(offset < 9){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(extended){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(nonNegative){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(value < 128){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length <= 12){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 255){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(Negative){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length == 11){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length <= 4){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 35){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length>10){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length>1){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length<12){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(isUnsigned){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length <= 3){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(negative == false){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length > 30){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(raw){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if( length >= 9){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length == 14){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(formatLongBinary){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length != 7){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length>3){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(verbose){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length<mask5>negative){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(truncated){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length>=8){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 52){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(standard){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length<64){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(value <= 9){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length > 127){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 37){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if( length > 0){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 60){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(negative != false){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length <= 6){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(isBinary){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 75){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length<11){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length < 48){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length>16){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length <= 1){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length<1){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length > 99){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length > 36){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length <= 5){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(negative!=true){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length != 16){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length==8){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length != 12){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if( length != 9){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(lenient){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length<20){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(negative == true){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(overflow){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(length > 1024){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(numeric){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(padding){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(compressed){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(native){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(reversed){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(boolean){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
if(tail){ formatBigIntegerBinary(value, buf, offset, length, negative); }  
