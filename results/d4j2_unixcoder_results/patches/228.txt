 dirtyDocument.body(clean);  
 clean.body = dirtyDocument;  
 dirtyDocument.body(clean);;  
 clean.body = dirtyDocument.body;  
 clean.body() = dirtyDocument;  
 clean.body(dirtyDocument);  
 dirtyDocument.body().clear();  
 clean.body(dirtyDocument.body;  
 clean.body(dirtyDocument);;  
 dirtyDocument.body().clean(clean;  
 dirtyDocument.body() = clean;  
 clean.body() ;  
 dirtyDocument = null;  
 dirtyDocument.body().clear;  
 clean.body(); return clean;  
 dirtyDocument = clean;  
 dirtyDocument.body(clean) ;  
 dirtyDocument.body().add(clean;  
 dirtyDocument.body(clean); ;  
 dirtyDocument.body().remove();;  
 dirtyDocument.body().remove;  
 return clean;  
 dirtyDocument;  
 dirtyDocument.body().clean = clean;  
 clean.body().document = dirtyDocument;  
 clean.document = dirtyDocument;  
 dirtyDocument.body().forEach(clean;  
 dirtyDocument.body = clean;  
 dirtyDocument.body().body(clean;  
 clean.body(dirtyDocument).body;  
 dirtyDocument.body().clear();;  
 dirtyDocument.body().appendChild(clean;  
 clean.body(); dirtyDocument;  
 clean.body().add(dirtyDocument;  
 dirtyDocument.body().remove();  
 dirtyDocument.body().body().clear;  
 clean.body(); return dirtyDocument;  
 dirtyDocument.body().body().remove;  
 dirtyDocument.body().append(clean;  
 dirtyDocument.body().remove(clean;  
  clean.body = dirtyDocument;  
  dirtyDocument.body(clean);  
 dirtyDocument.remove(); return clean;  
 dirtyDocument.body().document = clean;  
 clean.baseUri = dirtyDocument;  
 clean.body().putAll(dirtyDocument;  
 clean.root = dirtyDocument;  
 this.body = dirtyDocument;  
 dirtyDocument.body(); return clean;  
 dirtyDocument.body().removeAllChildren;  
 ;  
 clean;  
 dirtyDocument.body(clean).body;  
 clean.body().append(dirtyDocument;  
 dirtyDocument.body().body = clean;  
 delete(dirtyDocument); return clean;  
 //return clean;  
 dirtyDocument.body().copyTo(clean;  
 //System.out.println(clean;  
 clean.body().clear(); return;  
 clean.body().clear(); return clean;  
 dirtyDocument.body().body().clean;  
 clean.body().text = dirtyDocument;  
 clean.body().clear();;  
 clean.body().body = dirtyDocument;  
 dirtyDocument.body().clear().body;  
 clean.body(dirtyDocument); ;  
 dirtyDocument.remove(dirtyDocument);  
  dirtyDocument.body().clear;  
 dirtyDocument.body().body(null;  
 clean.body() == dirtyDocument;  
 clean.body() = dirtyDocument;  
 copySafeNodes(dirtyDocument, clean;  
 clean.body().content = dirtyDocument;  
 clean.body() == null;  
 clean.baseURI = dirtyDocument.baseURI;  
  dirtyDocument.body(clean;  
 this.body = dirtyDocument.body;  
 dirtyDocument.body().remove(); ;  
 dirtyDocument.body().parent(clean;  
 clean.body().appendChild(dirtyDocument;  
 clean.body = null;  
 dirtyDocument.body().clear() ;  
 dirtyDocument.body().copy(clean;  
 dirtyDocument.body().remove(dirty;  
 dirtyDocument.body() = null;  
 clean.body().clear;  
 clean._document = dirtyDocument;  
 dirtyDocument.body().text = null;  
 dirtyDocument.clean(clean);  
 clean.body() return dirtyDocument;  
 dirtyDocument.clean(clean);;  
  clean.body() = dirtyDocument;  
 dirtyDocument.body().detach();  
 dirtyDocument.body().removeLinks;  
 dirtyDocument.body(null);  
 clean.body().remove(); return;  
 clean.body().remove(dirtyDocument;  
 dirtyDocument.body().clear(); ;  
 clean.body() = null;  
 dirtyDocument.body().body() ;  
 clean.body().addAll(dirtyDocument;  
 clean.body().remove();;  
 clean.setBody(dirtyDocument.body;  
 dirtyDocument.body().detach;  
 dirtyDocument.body().body();  
 clean.save(); return clean;  
 dirtyDocument.body().content = clean;  
 clean.body().dirty = true;  
 clean.body().ownerDocument = dirtyDocument;  
 clean.baseUri() = dirtyDocument;  
 dirtyDocument.remove(clean);  
 dirtyDocument.body().detach();;  
 copySafeNodes(clean, dirtyDocument;  
 dirtyDocument.body().replace(clean;  
 dirtyDocument.clear(); return clean;  
 clean.body(dirtyDocument) ;  
 dirtyDocument.body().removeAllChildren();  
 CleanShell shell = clean;  
 clean.body() != null;  
 clean.body().length = 0;  
 dirtyDocument.body().clear().clean;  
 dirtyDocument.body().push(clean;  
 clean.body().doc = dirtyDocument;  
 clean.body().remove(); return clean;  
 dirtyDocument.body().clear().clear;  
 clean.body(); dirty = null;  
 clean.body().copyTo(dirtyDocument;  
 dirtyDocument = dirtyDocument;  
 clean.body().clean(dirtyDocument;  
 clean.add(dirtyDocument);  
 clean.body().dirty = dirtyDocument;  
 dirtyDocument.body(clean;  
 clean.body().src = dirtyDocument;  
 dirtyDocument.body().replaceWith(clean;  
 dirtyDocument.body().copySafeNodes;  
 dirtyDocument.body().removeAll();;  
 dirtyDocument.body().addContent(clean;  
 clean.body().remove;  
 clean.body().body() = dirty;  
 dirtyDocument.body().wrap(clean;  
 dirtyDocument.body().body().body;  
  dirtyDocument.body() = clean;  
 dirtyDocument.replace(clean);  
 dirtyDocument.body().removeFromParent;  
 dirtyDocument.nodes().forEach(clean;  
 dirtyDocument.body().addAll(clean;  
 clean.body().clear(); dirty;  
  dirtyDocument.body().clean;  
 clean.dirty = true;  
 clear(dirtyDocument); return clean;  
 clean.body().clean = dirtyDocument;  
 dirtyDocument.body().removeDocument;  
 dirtyDocument.copySafeNodes(clean;  
 this.body(dirtyDocument);  
 dirtyDocument.body().parent = clean;  
 dirtyDocument.body().doc = clean;  
 clean.setBody(dirtyDocument);  
 dirtyDocument.body().write(clean;  
 dirtyDocument.body().removeNode;  
 dirtyDocument.body() ;  
 clean.body().body() = null;  
 dirtyDocument.body().remove(this;  
 clean._body = dirtyDocument;  
 System.out.println(clean;  
 dirtyDocument.body().body = null;  
 dirtyDocument.body().ref(clean;  
 dirtyDocument.close(); return clean;  
 --;  
 dirtyDocument.body = null;  
 dirtyDocument.body(dirtyDocument);  
 @return clean;  
 dirtyDocument.body(clean).save;  
 dirtyDocument.baseUri(clean);  
 dirtyDocument.apply(clean);;  
 dirtyDocument.body().apply(clean;  
 dirtyDocument.body().refresh(clean;  
 *dirtyDocument = clean;  
 clean.body().copySafeNodes;  
  dirtyDocument.body().clear();  
 dirtyDocument.body().attach(clean;  
 clean.body().write(dirtyDocument;  
 clean.doc = dirtyDocument;  
 dirtyDocument.body().content = null;  
 dirty.body = clean;  
 clean.body()  = dirtyDocument;  
 dirtyDocument.body().parent().remove;  
  dirtyDocument.body().remove;  
  dirtyDocument.body(clean);;  
 clean.body().contents = dirtyDocument;  
 dirtyDocument.body().clean();  
 dirtyDocument.body(clean); //;  
 dirtyDocument.body().clean;  
 clean.dirty = dirtyDocument;  
 dirtyDocument.body().removeChild(clean;  
 dirtyDocument.body().setParent(clean;  
 dirtyDocument.body().content(clean;  
 clean.body = this;  
 dirtyDocument.body().clear(true;  
 clean.body().removeAllChildren();  
 dirtyDocument.body().set(clean;  
 clean.setBody(dirtyDocument);;  
 @param dirtyDocument;  
 clean.body() != dirtyDocument;  
 dirtyDocument.setBody(clean);  
 dirtyDocument.baseUri(null);  
 clean.body();  
 clean.documentElement = dirtyDocument;  
 dirtyDocument.body().text = "";  
 dirtyDocument.body().removeSelf;  
 clean.body().data = dirtyDocument;  
 dirtyDocument.body().clear().remove;  
 dirtyDocument.body().removeElement;  
 dirtyDocument.body().child(clean;  
 };  
 dirtyDocument.root().appendChild(clean;  
 dirtyDocument.body().putAll(clean;  
 dirtyDocument.body().empty;  
 clean.setDocument(dirtyDocument);  
 dirtyDocument.body().clear(clean;  
 clean.body(dirtyDocument).save;  
  dirtyDocument.body = clean;  
 clean._root = dirtyDocument;  
 copySafeNodes(dirtyDocument);;  
 dirtyDocument.body().pipe(clean;  
 dirtyDocument.body().removeFromParent();;  
 dirtyDocument.body().parent().clear;  
 clean = clean;  
 dirtyDocument.body().reset();  
 doc = clean;  
 dirtyDocument.body().removeNodes;  
 dirtyDocument.body().close();  
 clean.body().value = dirtyDocument;  
 clean.body().source = dirtyDocument;  
 dirtyDocument.setBaseUri(clean);  
  return clean;  
 clean.body().clear() ;  
 dirtyDocument.body().removeSelf();  
 dirtyDocument.body().close;  
 clean.merge(dirtyDocument);  
 dirtyDocument.body().dirty = true;  
 //System.out.println;  
 clean.body().addContent(dirtyDocument;  
 clean.body().removeAllChildren;  
 dirtyDocument.apply(clean);  
 dirtyDocument.body().remove().body;  
  clean.body(dirtyDocument);  
 @return;  
 clean.addBody(dirtyDocument);  
 dirtyDocument.body().removeLinks();  
 dirtyDocument = null; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument; copySafeNodes(dirtyDocument.body(), clean.body());  
 ; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument = clean; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.document = dirtyDocument; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.body(clean);; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.body = dirtyDocument; copySafeNodes(dirtyDocument.body(), clean.body());  
 return clean; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean; copySafeNodes(dirtyDocument.body(), clean.body());  
 //return clean; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.body(clean); copySafeNodes(dirtyDocument.body(), clean.body());  
 dirty = clean; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirty = null; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.body(); copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.body().clear();; copySafeNodes(dirtyDocument.body(), clean.body());  
 --; copySafeNodes(dirtyDocument.body(), clean.body());  
 document = clean; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.clear();; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.close();; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.remove();; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.body() ; copySafeNodes(dirtyDocument.body(), clean.body());  
 Clean; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.root = dirtyDocument; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.body().clear(); copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.body() = clean; copySafeNodes(dirtyDocument.body(), clean.body());  
 //; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.body().clear; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.remove(); clean; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.body().remove();; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.clear(); clean; copySafeNodes(dirtyDocument.body(), clean.body());  
 document; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.clean(clean);; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean = clean; copySafeNodes(dirtyDocument.body(), clean.body());  
 doc = clean; copySafeNodes(dirtyDocument.body(), clean.body());  
 this.body = clean; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.body(dirtyDocument);; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.baseUri = null; copySafeNodes(dirtyDocument.body(), clean.body());  
 this; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.save();; copySafeNodes(dirtyDocument.body(), clean.body());  
 ...; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.head = dirtyDocument; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.body().clear();; copySafeNodes(dirtyDocument.body(), clean.body());  
 //System.out.println; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.clear(); copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.body(dirtyDocument); copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.body() = dirtyDocument; copySafeNodes(dirtyDocument.body(), clean.body());  
 _ = clean; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirty.body = clean; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.remove(clean); copySafeNodes(dirtyDocument.body(), clean.body());  
 @return; copySafeNodes(dirtyDocument.body(), clean.body());  
 @return clean; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.body();; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.body().close();; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.baseURI = null; copySafeNodes(dirtyDocument.body(), clean.body());  
 System.out.println(clean; copySafeNodes(dirtyDocument.body(), clean.body());  
 clone; copySafeNodes(dirtyDocument.body(), clean.body());  
 this.document = clean; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.clear();; copySafeNodes(dirtyDocument.body(), clean.body());  
 System.out.println; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.clear; copySafeNodes(dirtyDocument.body(), clean.body());  
 recursive; copySafeNodes(dirtyDocument.body(), clean.body());  
 doc; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.dirty = true; copySafeNodes(dirtyDocument.body(), clean.body());  
  dirtyDocument = null; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.parent = dirtyDocument; copySafeNodes(dirtyDocument.body(), clean.body());  
 clear; copySafeNodes(dirtyDocument.body(), clean.body());  
 assert clean != null; copySafeNodes(dirtyDocument.body(), clean.body());  
 //System.out; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.clean(clean); copySafeNodes(dirtyDocument.body(), clean.body());  
 /*package; copySafeNodes(dirtyDocument.body(), clean.body());  
 }; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.documentElement = dirtyDocument; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.documentElement; copySafeNodes(dirtyDocument.body(), clean.body());  
 //TODO; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirty.body(clean);; copySafeNodes(dirtyDocument.body(), clean.body());  
 Clean document; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.close(); clean; copySafeNodes(dirtyDocument.body(), clean.body());  
 // return clean; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.body().clear(); copySafeNodes(dirtyDocument.body(), clean.body());  
 dirty.body() = clean; copySafeNodes(dirtyDocument.body(), clean.body());  
  dirtyDocument; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.body().remove();; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.doc = dirtyDocument; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.remove(clean);; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.close(clean);; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.body().clear; copySafeNodes(dirtyDocument.body(), clean.body());  
 //$NON-NLS-1$; copySafeNodes(dirtyDocument.body(), clean.body());  
 Cleaner; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.body = clean; copySafeNodes(dirtyDocument.body(), clean.body());  
 System.out; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirty; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.body() ; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.reset();; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.body(null); copySafeNodes(dirtyDocument.body(), clean.body());  
 if (dirtyDocument != null); copySafeNodes(dirtyDocument.body(), clean.body());  
  return clean; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.active = true; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.detach();; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.clear(); ; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.root = this; copySafeNodes(dirtyDocument.body(), clean.body());  
 this.body = dirtyDocument; copySafeNodes(dirtyDocument.body(), clean.body());  
 try; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.baseUrl = baseUrl; copySafeNodes(dirtyDocument.body(), clean.body());  
 ); copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.refresh();; copySafeNodes(dirtyDocument.body(), clean.body());  
 //import; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.parent = this; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.charset = charset; copySafeNodes(dirtyDocument.body(), clean.body());  
 ..; copySafeNodes(dirtyDocument.body(), clean.body());  
  dirtyDocument = clean; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.delete();; copySafeNodes(dirtyDocument.body(), clean.body());  
 this.dirty = dirtyDocument; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.body().detach();; copySafeNodes(dirtyDocument.body(), clean.body());  
 --dirty; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.baseUri() = null; copySafeNodes(dirtyDocument.body(), clean.body());  
 */; copySafeNodes(dirtyDocument.body(), clean.body());  
 Clear; copySafeNodes(dirtyDocument.body(), clean.body());  
 Clean doc; copySafeNodes(dirtyDocument.body(), clean.body());  
 document.body = clean; copySafeNodes(dirtyDocument.body(), clean.body());  
 delete(dirtyDocument);; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument = dirtyDocument; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean._document = dirtyDocument; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.body = null; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.validate();; copySafeNodes(dirtyDocument.body(), clean.body());  
 *dirtyDocument; copySafeNodes(dirtyDocument.body(), clean.body());  
 *dirtyDocument = clean; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.body().remove; copySafeNodes(dirtyDocument.body(), clean.body());  
 Empty; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.body().close();; copySafeNodes(dirtyDocument.body(), clean.body());  
 sync; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.charset = null; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.version = 1; copySafeNodes(dirtyDocument.body(), clean.body());  
 //clean; copySafeNodes(dirtyDocument.body(), clean.body());  
 clear(dirtyDocument);; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean ; copySafeNodes(dirtyDocument.body(), clean.body());  
 //document; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.session = this; copySafeNodes(dirtyDocument.body(), clean.body());  
 _ = dirtyDocument; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.clean = clean; copySafeNodes(dirtyDocument.body(), clean.body());  
 ///; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.attributes = attributes; copySafeNodes(dirtyDocument.body(), clean.body());  
 null; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.flush();; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.url = null; copySafeNodes(dirtyDocument.body(), clean.body());  
 clone(clean);; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.baseUri(null); copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.detach(); clean; copySafeNodes(dirtyDocument.body(), clean.body());  
 Document old = clean; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.baseUri(null; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.baseUri(baseUrl); copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.close(); copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.rootNode = dirtyDocument; copySafeNodes(dirtyDocument.body(), clean.body());  
  ; copySafeNodes(dirtyDocument.body(), clean.body());  
 Clean the document; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.recursive = true; copySafeNodes(dirtyDocument.body(), clean.body());  
 /*package*/; copySafeNodes(dirtyDocument.body(), clean.body());  
 ready; copySafeNodes(dirtyDocument.body(), clean.body());  
 path; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.body() = null; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.body = this; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.source = dirtyDocument; copySafeNodes(dirtyDocument.body(), clean.body());  
 @param dirtyDocument; copySafeNodes(dirtyDocument.body(), clean.body());  
 CleanShell shell = clean; copySafeNodes(dirtyDocument.body(), clean.body());  
 document = dirtyDocument; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.document = clean; copySafeNodes(dirtyDocument.body(), clean.body());  
; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.remove();; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.removeAll();; copySafeNodes(dirtyDocument.body(), clean.body());  
 node; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.encoding = null; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.baseURI = baseUrl; copySafeNodes(dirtyDocument.body(), clean.body());  
 clear(dirtyDocument); copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.document = this; copySafeNodes(dirtyDocument.body(), clean.body());  
 window; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.body().close; copySafeNodes(dirtyDocument.body(), clean.body());  
 --dirtyDocument; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.init();; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.clean = true; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.close();; copySafeNodes(dirtyDocument.body(), clean.body());  
 DEBUG; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.body(); copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.body();; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.body().close(); copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.clear(); copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.refresh(clean);; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.clearBody(); copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.appendChild(dirtyDocument);; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.head = this; copySafeNodes(dirtyDocument.body(), clean.body());  
 /*; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.reset();; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.baseUri = baseUrl; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.xml = true; copySafeNodes(dirtyDocument.body(), clean.body());  
 import; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.close(true);; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.flush();; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.title = title; copySafeNodes(dirtyDocument.body(), clean.body());  
 export; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.save(); return clean; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.session = session; copySafeNodes(dirtyDocument.body(), clean.body());  
 Shell shell = clean; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.refresh();; copySafeNodes(dirtyDocument.body(), clean.body());  
 Sync; copySafeNodes(dirtyDocument.body(), clean.body());  
 ;; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.baseUri = dirtyDocument; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.apply(clean);; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.body().reset();; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.destroy();; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.open();; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.remove(); ; copySafeNodes(dirtyDocument.body(), clean.body());  
 Cleaned document; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.close(clean); copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.env = this; copySafeNodes(dirtyDocument.body(), clean.body());  
 dummy; copySafeNodes(dirtyDocument.body(), clean.body());  
 it; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirty.body().clear();; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.documentMode = true; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.body(null);; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.clear(); dirtyDocument; copySafeNodes(dirtyDocument.body(), clean.body());  
 run; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.refresh(clean); copySafeNodes(dirtyDocument.body(), clean.body());  
 this.document = dirtyDocument; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.save();; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.remove(); copySafeNodes(dirtyDocument.body(), clean.body());  
 dirty.body().clear; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.save(dirtyDocument);; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.cleanup(clean);; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.replace(clean);; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.clear(); return clean; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.baseUri = null; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.body(); return clean; copySafeNodes(dirtyDocument.body(), clean.body());  
 //Validate.notNull(clean);; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.baseUri();; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.clear(clean); copySafeNodes(dirtyDocument.body(), clean.body());  
 Collections.sort(clean);; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.close(); ; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.remove; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.baseUri() ; copySafeNodes(dirtyDocument.body(), clean.body());  
 this.dirty = true; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.protocol = null; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirty.body().clear(); copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.baseURI = baseUri; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.baseUri("");; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.language = language; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.depth = 0; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.raw = true; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.documents = dirtyDocument; copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.baseUri(baseURI()); copySafeNodes(dirtyDocument.body(), clean.body());  
 clean.remove(dirtyDocument); copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.body().reset();; copySafeNodes(dirtyDocument.body(), clean.body());  
 dirtyDocument.clear() ; copySafeNodes(dirtyDocument.body(), clean.body());  
 copySafeNodes(dirtyDocument.body(), clean.body());  
 CopySafeNodes(dirtyDocument.body(), clean.body());  
 copySafeNode(dirtyDocument.body(), clean.body());  
 mergeSafeNodes(dirtyDocument.body(), clean.body());  
 addSafeNodes(dirtyDocument.body(), clean.body());  
 copySafeElements(dirtyDocument.body(), clean.body());  
 merge(dirtyDocument.body(), clean.body());  
 deepCopy(dirtyDocument.body(), clean.body());  
 recursiveCopy(dirtyDocument.body(), clean.body());  
 System.arraycopy(dirtyDocument.body(), clean.body());  
 copySafeLines(dirtyDocument.body(), clean.body());  
 setSafeNodes(dirtyDocument.body(), clean.body());  
 copyNodes(dirtyDocument.body(), clean.body());  
 replaceSafeNodes(dirtyDocument.body(), clean.body());  
 sync(dirtyDocument.body(), clean.body());  
 copyUnsafeNodes(dirtyDocument.body(), clean.body());  
 appendSafeNodes(dirtyDocument.body(), clean.body());  
 copySafeChildren(dirtyDocument.body(), clean.body());  
 copySafeChildNodes(dirtyDocument.body(), clean.body());  
 copySafeBody(dirtyDocument.body(), clean.body());  
 copySafeContents(dirtyDocument.body(), clean.body());  
 copySafeContent(dirtyDocument.body(), clean.body());  
 copyOfSafeNodes(dirtyDocument.body(), clean.body());  
 for(dirtyDocument.body(), clean.body());  
 CopyNodes(dirtyDocument.body(), clean.body());  
 documentCopy(dirtyDocument.body(), clean.body());  
 copySafeEntities(dirtyDocument.body(), clean.body());  
 iterate(dirtyDocument.body(), clean.body());  
 mergeNodes(dirtyDocument.body(), clean.body());  
 Copy(dirtyDocument.body(), clean.body());  
 saveSafeNodes(dirtyDocument.body(), clean.body());  
 writeSafeNodes(dirtyDocument.body(), clean.body());  
 copySafe(dirtyDocument.body(), clean.body());  
 moveSafeNodes(dirtyDocument.body(), clean.body());  
 copyTo(dirtyDocument.body(), clean.body());  
 copySafenodes(dirtyDocument.body(), clean.body());  
 iterateSafeNodes(dirtyDocument.body(), clean.body());  
 CopySafeNode(dirtyDocument.body(), clean.body());  
   copySafeNodes(dirtyDocument.body(), clean.body());  
 processSafeNodes(dirtyDocument.body(), clean.body());  
 addAllSafeNodes(dirtyDocument.body(), clean.body());  
 copyOfNodes(dirtyDocument.body(), clean.body());  
 forAll(dirtyDocument.body(), clean.body());  
 Collections.addAll(dirtyDocument.body(), clean.body());  
 updateSafeNodes(dirtyDocument.body(), clean.body());  
 safeCopy(dirtyDocument.body(), clean.body());  
 copy(dirtyDocument.body(), clean.body());  
  copySafeNodes(dirtyDocument.body(), clean.body());  
 fillSafeNodes(dirtyDocument.body(), clean.body());  
 copySafeLinks(dirtyDocument.body(), clean.body());  
 recurse(dirtyDocument.body(), clean.body());  
 putSafeNodes(dirtyDocument.body(), clean.body());  
 copySafeAttributes(dirtyDocument.body(), clean.body());  
 copySafeProperties(dirtyDocument.body(), clean.body());  
 mergeNode(dirtyDocument.body(), clean.body());  
 (dirtyDocument.body(), clean.body());  
 Collections.copy(dirtyDocument.body(), clean.body());  
 recursiveCopyNodes(dirtyDocument.body(), clean.body());  
 syncNodes(dirtyDocument.body(), clean.body());  
 safeCopyNodes(dirtyDocument.body(), clean.body());  
 CopyElements(dirtyDocument.body(), clean.body());  
 forAllNodes(dirtyDocument.body(), clean.body());  
 copySafeTree(dirtyDocument.body(), clean.body());  
 System.copy(dirtyDocument.body(), clean.body());  
 deepCopyNodes(dirtyDocument.body(), clean.body());  
 putAllSafeNodes(dirtyDocument.body(), clean.body());  
 CopySafe(dirtyDocument.body(), clean.body());  
 copySafeBlocks(dirtyDocument.body(), clean.body());  
 removeSafeNodes(dirtyDocument.body(), clean.body());  
 copyValues(dirtyDocument.body(), clean.body());  
 execute(dirtyDocument.body(), clean.body());  
 Arrays.copy(dirtyDocument.body(), clean.body());  
 copysafeNodes(dirtyDocument.body(), clean.body());  
 copySafeTags(dirtyDocument.body(), clean.body());  
 Arrays.addAll(dirtyDocument.body(), clean.body());  
 copyChildren(dirtyDocument.body(), clean.body());  
 addToBody(dirtyDocument.body(), clean.body());  
 visit(dirtyDocument.body(), clean.body());  
 syncSafeNodes(dirtyDocument.body(), clean.body());  
 forEachSafeNode(dirtyDocument.body(), clean.body());  
 copySafely(dirtyDocument.body(), clean.body());  
 ensureSafeNodes(dirtyDocument.body(), clean.body());  
 write(dirtyDocument.body(), clean.body());  
 copySafeValues(dirtyDocument.body(), clean.body());  
 nodeCopy(dirtyDocument.body(), clean.body());  
 getSafeNodes(dirtyDocument.body(), clean.body());  
 setAttributes(dirtyDocument.body(), clean.body());  
 copySafeNodeList(dirtyDocument.body(), clean.body());  
 mergeDeep(dirtyDocument.body(), clean.body());  
 collectSafeNodes(dirtyDocument.body(), clean.body());  
 process(dirtyDocument.body(), clean.body());  
 copyElements(dirtyDocument.body(), clean.body());  
 updateNode(dirtyDocument.body(), clean.body());  
 copySafeDocument(dirtyDocument.body(), clean.body());  
 update(dirtyDocument.body(), clean.body());  
 extend(dirtyDocument.body(), clean.body());  
 applySafeNodes(dirtyDocument.body(), clean.body());  
 Merge(dirtyDocument.body(), clean.body());  
 processNodes(dirtyDocument.body(), clean.body());  
 copySafeHeaders(dirtyDocument.body(), clean.body());  
 addSafeNode(dirtyDocument.body(), clean.body());  
 copySafeDocuments(dirtyDocument.body(), clean.body());  
 apply(dirtyDocument.body(), clean.body());  
 addNodes(dirtyDocument.body(), clean.body());  
  copySafeNodes(dirtyDocument.body(), clean.body());  
 updateBody(dirtyDocument.body(), clean.body());  
 parse(dirtyDocument.body(), clean.body());  
 deepcopy(dirtyDocument.body(), clean.body());  
 safeNodes(dirtyDocument.body(), clean.body());  
 copyNode(dirtyDocument.body(), clean.body());  
 DeepCopy(dirtyDocument.body(), clean.body());  
 copySecureNodes(dirtyDocument.body(), clean.body());  
 updateNodes(dirtyDocument.body(), clean.body());  
 Arrays.fill(dirtyDocument.body(), clean.body());  
 storeSafeNodes(dirtyDocument.body(), clean.body());  
 run(dirtyDocument.body(), clean.body());  
 arraycopy(dirtyDocument.body(), clean.body());  
 forEachSafeNodes(dirtyDocument.body(), clean.body());  
 processNode(dirtyDocument.body(), clean.body());  
 CopyContent(dirtyDocument.body(), clean.body());  
 CopySafeElements(dirtyDocument.body(), clean.body());  
 copySafeObjects(dirtyDocument.body(), clean.body());  
 shallowCopy(dirtyDocument.body(), clean.body());  
 setData(dirtyDocument.body(), clean.body());  
 copyAllowedNodes(dirtyDocument.body(), clean.body());  
 copySafeHtml(dirtyDocument.body(), clean.body());  
 clone(dirtyDocument.body(), clean.body());  
 unsafeCopy(dirtyDocument.body(), clean.body());  
 setBody(dirtyDocument.body(), clean.body());  
 CopyNode(dirtyDocument.body(), clean.body());  
 mergeElements(dirtyDocument.body(), clean.body());  
 nodesCopy(dirtyDocument.body(), clean.body());  
 copySafeBodies(dirtyDocument.body(), clean.body());  
 iter(dirtyDocument.body(), clean.body());  
 copySafeText(dirtyDocument.body(), clean.body());  
 copySafeEdges(dirtyDocument.body(), clean.body());  
 replace(dirtyDocument.body(), clean.body());  
 copyOf(dirtyDocument.body(), clean.body());  
 syncNode(dirtyDocument.body(), clean.body());  
 copySafeFiles(dirtyDocument.body(), clean.body());  
 Walk(dirtyDocument.body(), clean.body());  
 mergeValues(dirtyDocument.body(), clean.body());  
 convert(dirtyDocument.body(), clean.body());  
 recursive(dirtyDocument.body(), clean.body());  
 doccopy(dirtyDocument.body(), clean.body());  
 copy SafeNodes(dirtyDocument.body(), clean.body());  
 forEachNode(dirtyDocument.body(), clean.body());  
 filter(dirtyDocument.body(), clean.body());  
 copySafeDocs(dirtyDocument.body(), clean.body());  
 deleteSafeNodes(dirtyDocument.body(), clean.body());  
 links(dirtyDocument.body(), clean.body());  
 copyToBody(dirtyDocument.body(), clean.body());  
 diff(dirtyDocument.body(), clean.body());  
 toSafeNodes(dirtyDocument.body(), clean.body());  
 //copySafeNodes(dirtyDocument.body(), clean.body());  
 patchNodes(dirtyDocument.body(), clean.body());  
 }(dirtyDocument.body(), clean.body());  
 mergeContent(dirtyDocument.body(), clean.body());  
 copySafeFields(dirtyDocument.body(), clean.body());  
 clearSafeNodes(dirtyDocument.body(), clean.body());  
 CopyProperties(dirtyDocument.body(), clean.body());  
 insertSafeNodes(dirtyDocument.body(), clean.body());  
 fillNodes(dirtyDocument.body(), clean.body());  
 CopiesSafeNodes(dirtyDocument.body(), clean.body());  
 copySafeResources(dirtyDocument.body(), clean.body());  
 exec(dirtyDocument.body(), clean.body());  
 addAllNodes(dirtyDocument.body(), clean.body());  
 docCopy(dirtyDocument.body(), clean.body());  
 validate(dirtyDocument.body(), clean.body());  
 Arrays.copyOf(dirtyDocument.body(), clean.body());  
 cleanSafeNodes(dirtyDocument.body(), clean.body());  
 forEach(dirtyDocument.body(), clean.body());  
 replaceNode(dirtyDocument.body(), clean.body());  
 SetSafeNodes(dirtyDocument.body(), clean.body());  
 cloneSafeNodes(dirtyDocument.body(), clean.body());  
 copyContent(dirtyDocument.body(), clean.body());  
 Iterate(dirtyDocument.body(), clean.body());  
 addAll(dirtyDocument.body(), clean.body());  
 copyProperties(dirtyDocument.body(), clean.body());  
 setValues(dirtyDocument.body(), clean.body());  
 nodes(dirtyDocument.body(), clean.body());  
 syncBody(dirtyDocument.body(), clean.body());  
 replaceNodes(dirtyDocument.body(), clean.body());  
 Link(dirtyDocument.body(), clean.body());  
 putAll(dirtyDocument.body(), clean.body());  
 copySafeEntries(dirtyDocument.body(), clean.body());  
 copySafe nodes(dirtyDocument.body(), clean.body());  
 copySAFENodes(dirtyDocument.body(), clean.body());  
 transfer(dirtyDocument.body(), clean.body());  
 appendChild(dirtyDocument.body(), clean.body());  
 treeWalk(dirtyDocument.body(), clean.body());  
 copyDeepNodes(dirtyDocument.body(), clean.body());  
 fill(dirtyDocument.body(), clean.body());  
 Execute(dirtyDocument.body(), clean.body());  
 fillNode(dirtyDocument.body(), clean.body());  
 transform(dirtyDocument.body(), clean.body());  
 processChildren(dirtyDocument.body(), clean.body());  
 sanitize(dirtyDocument.body(), clean.body());  
 Collections.merge(dirtyDocument.body(), clean.body());  
 CopyAllNodes(dirtyDocument.body(), clean.body());  
 copySafeConnections(dirtyDocument.body(), clean.body());  
 copySafeChars(dirtyDocument.body(), clean.body());  
 loop(dirtyDocument.body(), clean.body());  
 patchNode(dirtyDocument.body(), clean.body());  
 writeObject(dirtyDocument.body(), clean.body());  
 cloneNodes(dirtyDocument.body(), clean.body());  
 foreach(dirtyDocument.body(), clean.body());  
 copyErrors(dirtyDocument.body(), clean.body());  
 createSafeNodes(dirtyDocument.body(), clean.body());  
 Arrays.set(dirtyDocument.body(), clean.body());  
 ArraysCopy(dirtyDocument.body(), clean.body());  
 copySafeActions(dirtyDocument.body(), clean.body());  
 copyToNode(dirtyDocument.body(), clean.body());  
 link(dirtyDocument.body(), clean.body());  
 copySafePaths(dirtyDocument.body(), clean.body());  
 copySafeBranches(dirtyDocument.body(), clean.body());  
 CopyTree(dirtyDocument.body(), clean.body());  
 copys(dirtyDocument.body(), clean.body());  
 copySafeRows(dirtyDocument.body(), clean.body());  
 elementCopy(dirtyDocument.body(), clean.body());  
 copyTree(dirtyDocument.body(), clean.body());  
 keepSafeNodes(dirtyDocument.body(), clean.body());  
 mergeSafeNode(dirtyDocument.body(), clean.body());  
 applyNodes(dirtyDocument.body(), clean.body());  
 dumpSafeNodes(dirtyDocument.body(), clean.body());  
 printSafeNodes(dirtyDocument.body(), clean.body());  
 copySafeTokens(dirtyDocument.body(), clean.body());  
 streamSafeNodes(dirtyDocument.body(), clean.body());  
 copySafeUrls(dirtyDocument.body(), clean.body());  
 cleanCopy(dirtyDocument.body(), clean.body());  
 copySafeKeys(dirtyDocument.body(), clean.body());  
 syncDeep(dirtyDocument.body(), clean.body());  
 copySafeTexts(dirtyDocument.body(), clean.body());  
 pushSafeNodes(dirtyDocument.body(), clean.body());  
 runSafeNodes(dirtyDocument.body(), clean.body());  
 copySimpleNodes(dirtyDocument.body(), clean.body());  
 copySafeBytes(dirtyDocument.body(), clean.body());  
 unsafeCopyNodes(dirtyDocument.body(), clean.body());  
 copySafeDoc(dirtyDocument.body(), clean.body());  
 updateDocument(dirtyDocument.body(), clean.body());  
 setSafeNode(dirtyDocument.body(), clean.body());  
 copySafeScripts(dirtyDocument.body(), clean.body());  
 copySafeXml(dirtyDocument.body(), clean.body());  
 io.copy(dirtyDocument.body(), clean.body());  
 replaceSafeNode(dirtyDocument.body(), clean.body());  
 copyAsNode(dirtyDocument.body(), clean.body());  
 updateSafeNode(dirtyDocument.body(), clean.body());  
 copySafeXML(dirtyDocument.body(), clean.body());  
 deepCopyNode(dirtyDocument.body(), clean.body());  
(dirtyDocument.body(), clean.body());  
copySafeNodes(dirtyDocument.body(), clean.body());  
copySafeNodes(dirtyDocument.root(), clean.body());  
copySafeNodes(dirtyDocument.nodes(), clean.body());  
copySafeNodes(dirtyDocument.documentElement(), clean.body());  
copySafeNodes(dirtyDocument.content(), clean.body());  
copySafeNodes(dirtyDocument.baseUri(), clean.body());  
copySafeNodes(dirtyDocument.head(), clean.body());  
copySafeNodes(dirtyDocument.body()(), clean.body());  
copySafeNodes(dirtyDocument.tree(), clean.body());  
copySafeNodes(dirtyDocument.html(), clean.body());  
copySafeNodes(dirtyDocument.children(), clean.body());  
copySafeNodes(dirtyDocument.getBody(), clean.body());  
copySafeNodes(dirtyDocument.document(), clean.body());  
copySafeNodes(dirtyDocument.text(), clean.body());  
copySafeNodes(dirtyDocument.rootUri(), clean.body());  
copySafeNodes(dirtyDocument.elements(), clean.body());  
copySafeNodes(dirtyDocument.xml(), clean.body());  
copySafeNodes(dirtyDocument.node(), clean.body());  
copySafeNodes(dirtyDocument.path(), clean.body());  
copySafeNodes(dirtyDocument.rawBody(), clean.body());  
copySafeNodes(dirtyDocument.links(), clean.body());  
copySafeNodes(dirtyDocument.rootDocument(), clean.body());  
copySafeNodes(dirtyDocument.data(), clean.body());  
copySafeNodes(dirtyDocument.rootElement(), clean.body());  
copySafeNodes(dirtyDocument.files(), clean.body());  
copySafeNodes(dirtyDocument.childNodes(), clean.body());  
copySafeNodes(dirtyDocument.query(), clean.body());  
copySafeNodes(dirtyDocument.fragment(), clean.body());  
copySafeNodes(dirtyDocument.source(), clean.body());  
copySafeNodes(dirtyDocument.rootUrl(), clean.body());  
copySafeNodes(dirtyDocument.contents(), clean.body());  
copySafeNodes(dirtyDocument.attributes(), clean.body());  
copySafeNodes(dirtyDocument.xpath(), clean.body());  
copySafeNodes(dirtyDocument.entries(), clean.body());  
copySafeNodes(dirtyDocument.body().body(), clean.body());  
copySafeNodes(dirtyDocument.headers(), clean.body());  
copySafeNodes(dirtyDocument.fields(), clean.body());  
copySafeNodes(dirtyDocument.items(), clean.body());  
copySafeNodes(dirtyDocument.url(), clean.body());  
copySafeNodes(dirtyDocument.documents(), clean.body());  
copySafeNodes(dirtyDocument.lines(), clean.body());  
copySafeNodes(dirtyDocument.rootNode(), clean.body());  
copySafeNodes(dirtyDocument.parts(), clean.body());  
copySafeNodes(dirtyDocument.raw(), clean.body());  
copySafeNodes(dirtyDocument.parent(), clean.body());  
copySafeNodes(dirtyDocument.rootNode(), clean.body());  
copySafeNodes(dirtyDocument.json(), clean.body());  
copySafeNodes(dirtyDocument.doc(), clean.body());  
copySafeNodes(dirtyDocument.element(), clean.body());  
copySafeNodes(dirtyDocument.innerHtml(), clean.body());  
copySafeNodes(dirtyDocument.header(), clean.body());  
copySafeNodes(dirtyDocument.toString(), clean.body());  
copySafeNodes(dirtyDocument.root().body(), clean.body());  
copySafeNodes(dirtyDocument.allNodes(), clean.body());  
copySafeNodes(dirtyDocument.all(), clean.body());  
copySafeNodes(dirtyDocument.getNodes(), clean.body());  
copySafeNodes(dirtyDocument.request(), clean.body());  
copySafeNodes(dirtyDocument.fragments(), clean.body());  
copySafeNodes(dirtyDocument.values(), clean.body());  
copySafeNodes(dirtyDocument.params(), clean.body());  
copySafeNodes(dirtyDocument.attachments(), clean.body());  
copySafeNodes(dirtyDocument.subject(), clean.body());  
copySafeNodes(dirtyDocument.title(), clean.body());  
copySafeNodes(dirtyDocument.contentType(), clean.body());  
copySafeNodes(dirtyDocument.nodeList(), clean.body());  
copySafeNodes(dirtyDocument.toSource(), clean.body());  
copySafeNodes(dirtyDocument.iterator(), clean.body());  
copySafeNodes(dirtyDocument.tbody(), clean.body());  
copySafeNodes(dirtyDocument.properties(), clean.body());  
copySafeNodes(dirtyDocument.iter(), clean.body());  
copySafeNodes(dirtyDocument.toXML(), clean.body());  
copySafeNodes(dirtyDocument.toBuilder(), clean.body());  
copySafeNodes(dirtyDocument.Body(), clean.body());  
copySafeNodes(dirtyDocument.child(), clean.body());  
copySafeNodes(dirtyDocument.toDocument(), clean.body());  
copySafeNodes(dirtyDocument.metadata(), clean.body());  
copySafeNodes(dirtyDocument.container(), clean.body());  
copySafeNodes(dirtyDocument.form(), clean.body());  
copySafeNodes(dirtyDocument.stream(), clean.body());  
copySafeNodes(dirtyDocument.rules(), clean.body());  
copySafeNodes(dirtyDocument.uri(), clean.body());  
copySafeNodes(dirtyDocument.body().iterator(), clean.body());  
copySafeNodes(dirtyDocument.script(), clean.body());  
copySafeNodes(dirtyDocument.toDOM(), clean.body());  
copySafeNodes(dirtyDocument.sourceUri(), clean.body());  
copySafeNodes(dirtyDocument.parameters(), clean.body());  
copySafeNodes(dirtyDocument.rootPath(), clean.body());  
copySafeNodes(dirtyDocument.rootNodes(), clean.body());  
copySafeNodes(dirtyDocument.plainText(), clean.body());  
copySafeNodes(dirtyDocument.id(), clean.body());  
copySafeNodes(dirtyDocument.toXml(), clean.body());  
copySafeNodes(dirtyDocument.toHtml(), clean.body());  
copySafeNodes(dirtyDocument.htmlBody(), clean.body());  
copySafeNodes(dirtyDocument.toDom(), clean.body());  
copySafeNodes(dirtyDocument.body().nodes(), clean.body());  
copySafeNodes(dirtyDocument.structure(), clean.body());  
copySafeNodes(dirtyDocument.comment(), clean.body());  
copySafeNodes(dirtyDocument.value(), clean.body());  
copySafeNodes(dirtyDocument.body().text(), clean.body());  
copySafeNodes(dirtyDocument.sourceNode(), clean.body());  
copySafeNodes(dirtyDocument.entities(), clean.body());  
copySafeNodes(dirtyDocument.toBaseUri(), clean.body());  
copySafeNodes(dirtyDocument.payload(), clean.body());  
copySafeNodes(dirtyDocument.dom(), clean.body());  
copySafeNodes(dirtyDocument.xmlBody(), clean.body());  
copySafeNodes(dirtyDocument.texts(), clean.body());  
copySafeNodes(dirtyDocument.rows(), clean.body());  
copySafeNodes(dirtyDocument.paths(), clean.body());  
copySafeNodes(dirtyDocument.outerDocument(), clean.body());  
copySafeNodes(dirtyDocument.bodies(), clean.body());  
copySafeNodes(dirtyDocument.bodyAsString(), clean.body());  
copySafeNodes(dirtyDocument.rawText(), clean.body());  
copySafeNodes(dirtyDocument.inline(), clean.body());  
copySafeNodes(dirtyDocument.list(), clean.body());  
copySafeNodes(dirtyDocument.bodyArray(), clean.body());  
copySafeNodes(dirtyDocument.htmlContent(), clean.body());  
copySafeNodes(dirtyDocument.textContent(), clean.body());  
copySafeNodes(dirtyDocument.nodeIterator(), clean.body());  
copySafeNodes(dirtyDocument.session(), clean.body());  
copySafeNodes(dirtyDocument.collection(), clean.body());  
copySafeNodes(dirtyDocument.schema(), clean.body());  
copySafeNodes(dirtyDocument.docs(), clean.body());  
copySafeNodes(dirtyDocument.body().toString(), clean.body());  
copySafeNodes(dirtyDocument.sources(), clean.body());  
copySafeNodes(dirtyDocument.bodyText(), clean.body());  
copySafeNodes(dirtyDocument.type(), clean.body());  
copySafeNodes(dirtyDocument.cookies(), clean.body());  
copySafeNodes(dirtyDocument.tags(), clean.body());  
copySafeNodes(dirtyDocument.bytes(), clean.body());  
copySafeNodes(dirtyDocument.rootFolder(), clean.body());  
copySafeNodes(dirtyDocument.edges(), clean.body());  
copySafeNodes(dirtyDocument.from(), clean.body());  
copySafeNodes(dirtyDocument.head().body(), clean.body());  
copySafeNodes(dirtyDocument.firstChild(), clean.body());  
copySafeNodes(dirtyDocument.toElement(), clean.body());  
copySafeNodes(dirtyDocument.getHead(), clean.body());  
copySafeNodes(dirtyDocument.stylesheet(), clean.body());  
copySafeNodes(dirtyDocument.headNode(), clean.body());  
copySafeNodes(dirtyDocument.copy(), clean.body());  
copySafeNodes(dirtyDocument.dirty(), clean.body());  
copySafeNodes(dirtyDocument.baseURI(), clean.body());  
copySafeNodes(dirtyDocument.self(), clean.body());  
copySafeNodes(dirtyDocument.message(), clean.body());  
copySafeNodes(dirtyDocument.basePath(), clean.body());  
copySafeNodes(dirtyDocument.bodyBuilder(), clean.body());  
copySafeNodes(dirtyDocument.plainBody(), clean.body());  
copySafeNodes(dirtyDocument.newDocument(), clean.body());  
copySafeNodes(dirtyDocument.mainDocument(), clean.body());  
copySafeNodes(dirtyDocument.bare(), clean.body());  
copySafeNodes(dirtyDocument. body(), clean.body());  
copySafeNodes(dirtyDocument.selector(), clean.body());  
copySafeNodes(dirtyDocument.recipients(), clean.body());  
copySafeNodes(dirtyDocument.entity(), clean.body());  
copySafeNodes(dirtyDocument.body().node(), clean.body());  
copySafeNodes(dirtyDocument.blob(), clean.body());  
copySafeNodes(dirtyDocument.statements(), clean.body());  
copySafeNodes(dirtyDocument.body().bytes(), clean.body());  
copySafeNodes(dirtyDocument.plain(), clean.body());  
copySafeNodes(dirtyDocument.childNodes(), clean.body());  
copySafeNodes(dirtyDocument.subPath(), clean.body());  
copySafeNodes(dirtyDocument.sourceDocument(), clean.body());  
copySafeNodes(dirtyDocument.result(), clean.body());  
copySafeNodes(dirtyDocument.location(), clean.body());  
copySafeNodes(dirtyDocument.atoms(), clean.body());  
copySafeNodes(dirtyDocument.page(), clean.body());  
copySafeNodes(dirtyDocument.history(), clean.body());  
copySafeNodes(dirtyDocument.withBody(), clean.body());  
copySafeNodes(dirtyDocument.toNode(), clean.body());  
copySafeNodes(dirtyDocument.part(), clean.body());  
copySafeNodes(dirtyDocument.language(), clean.body());  
copySafeNodes(dirtyDocument.rootURI(), clean.body());  
copySafeNodes(dirtyDocument.documentElement(), clean.body());  
copySafeNodes(dirtyDocument.media(), clean.body());  
copySafeNodes(dirtyDocument.file(), clean.body());  
copySafeNodes(dirtyDocument.baseURL(), clean.body());  
copySafeNodes(dirtyDocument.keys(), clean.body());  
copySafeNodes(dirtyDocument.name(), clean.body());  
copySafeNodes(dirtyDocument.rawContent(), clean.body());  
copySafeNodes(dirtyDocument.filter(), clean.body());  
copySafeNodes(dirtyDocument.wholeText(), clean.body());  
copySafeNodes(dirtyDocument.outer(), clean.body());  
copySafeNodes(dirtyDocument.bodyTree(), clean.body());  
copySafeNodes(dirtyDocument.entry(), clean.body());  
copySafeNodes(dirtyDocument.owner(), clean.body());  
copySafeNodes(dirtyDocument.context(), clean.body());  
copySafeNodes(dirtyDocument.toJSON(), clean.body());  
copySafeNodes(dirtyDocument.roots(), clean.body());  
copySafeNodes(dirtyDocument.errors(), clean.body());  
copySafeNodes(dirtyDocument.htmlDocument(), clean.body());  
copySafeNodes(dirtyDocument.paragraphs(), clean.body());  
copySafeNodes(dirtyDocument.slurp(), clean.body());  
copySafeNodes(dirtyDocument.input(), clean.body());  
copySafeNodes(dirtyDocument.code(), clean.body());  
copySafeNodes(dirtyDocument.rootElement(), clean.body());  
copySafeNodes(dirtyDocument.parentNode(), clean.body());  
copySafeNodes(dirtyDocument.clone(), clean.body());  
copySafeNodes(dirtyDocument.status(), clean.body());  
copySafeNodes(dirtyDocument.statement(), clean.body());  
copySafeNodes(dirtyDocument.getContent(), clean.body());  
copySafeNodes(dirtyDocument.toURL(), clean.body());  
copySafeNodes(dirtyDocument.types(), clean.body());  
copySafeNodes(dirtyDocument.style(), clean.body());  
copySafeNodes(dirtyDocument.mimeTypes(), clean.body());  
copySafeNodes(dirtyDocument.css(), clean.body());  
copySafeNodes(dirtyDocument.toInputSource(), clean.body());  
copySafeNodes(dirtyDocument.description(), clean.body());  
copySafeNodes(dirtyDocument.folders(), clean.body());  
copySafeNodes(dirtyDocument.variables(), clean.body());  
copySafeNodes(dirtyDocument.toHTML(), clean.body());  
copySafeNodes(dirtyDocument.targetDocument(), clean.body());  
copySafeNodes(dirtyDocument.toText(), clean.body());  
copySafeNodes(dirtyDocument.body().data(), clean.body());  
copySafeNodes(dirtyDocument.outerHtml(), clean.body());  
copySafeNodes(dirtyDocument.getDocument(), clean.body());  
copySafeNodes(dirtyDocument.subtree(), clean.body());  
copySafeNodes(dirtyDocument.jsonBody(), clean.body());  
copySafeNodes(dirtyDocument.folder(), clean.body());  
copySafeNodes(dirtyDocument.body().stream(), clean.body());  
copySafeNodes(dirtyDocument.rawDocument(), clean.body());  
copySafeNodes(dirtyDocument.address(), clean.body());  
copySafeNodes(dirtyDocument.response(), clean.body());  
copySafeNodes(dirtyDocument.getElementsByTagName(), clean.body());  
copySafeNodes(dirtyDocument.bodyMap(), clean.body());  
copySafeNodes(dirtyDocument.innerDocument(), clean.body());  
copySafeNodes(dirtyDocument.fullUrl(), clean.body());  
copySafeNodes(dirtyDocument.documentation(), clean.body());  
copySafeNodes(dirtyDocument.subtrees(), clean.body());  
copySafeNodes(dirtyDocument.subdomains(), clean.body());  
copySafeNodes(dirtyDocument.boundary(), clean.body());  
copySafeNodes(dirtyDocument.command(), clean.body());  
copySafeNodes(dirtyDocument.bindings(), clean.body());  
copySafeNodes(dirtyDocument.blocks(), clean.body());  
copySafeNodes(dirtyDocument.comments(), clean.body());  
copySafeNodes(dirtyDocument.version(), clean.body());  
copySafeNodes(dirtyDocument.bodyLines(), clean.body());  
copySafeNodes(dirtyDocument.bodyRaw(), clean.body());  
copySafeNodes(dirtyDocument.stylesheets(), clean.body());  
copySafeNodes(dirtyDocument.meta(), clean.body());  
copySafeNodes(dirtyDocument.topNode(), clean.body());  
copySafeNodes(dirtyDocument.innerXml(), clean.body());  
copySafeNodes(dirtyDocument.body().elements(), clean.body());  
copySafeNodes(dirtyDocument.sections(), clean.body());  
copySafeNodes(dirtyDocument.layers(), clean.body());  
copySafeNodes(dirtyDocument.urls(), clean.body());  
copySafeNodes(dirtyDocument.bodyBytes(), clean.body());  
copySafeNodes(dirtyDocument.root()(), clean.body());  
copySafeNodes(dirtyDocument.body<mask1>body(), clean.body());  
copySafeNodes(dirtyDocument.asNode(), clean.body());  
copySafeNodes(dirtyDocument.toBase(), clean.body());  
copySafeNodes(dirtyDocument.documentElement().body(), clean.body());  
copySafeNodes(dirtyDocument.body(), clean.body());  
copySafeNodes(dirtyDocument.body(), clean.baseUri());  
copySafeNodes(dirtyDocument.body(), clean.getBody());  
copySafeNodes(dirtyDocument.body(), clean.root());  
copySafeNodes(dirtyDocument.body(), clean.content());  
copySafeNodes(dirtyDocument.body(), clean.document());  
copySafeNodes(dirtyDocument.body(), clean.body().body());  
copySafeNodes(dirtyDocument.body(), clean.path());  
copySafeNodes(dirtyDocument.body(), clean.text());  
copySafeNodes(dirtyDocument.body(), clean.html());  
copySafeNodes(dirtyDocument.body(), clean.raw());  
copySafeNodes(dirtyDocument.body(), clean.rawBody());  
copySafeNodes(dirtyDocument.body(), clean.body().nodes());  
copySafeNodes(dirtyDocument.body(), clean.body().toString());  
copySafeNodes(dirtyDocument.body(), clean.head());  
copySafeNodes(dirtyDocument.body(), clean.doc());  
copySafeNodes(dirtyDocument.body(), clean.documentElement());  
copySafeNodes(dirtyDocument.body(), clean.body().text());  
copySafeNodes(dirtyDocument.body(), clean.toString());  
copySafeNodes(dirtyDocument.body(), clean.createShell());  
copySafeNodes(dirtyDocument.body(), clean.body().iterator());  
copySafeNodes(dirtyDocument.body(), clean.json());  
copySafeNodes(dirtyDocument.body(), clean.body().stream());  
copySafeNodes(dirtyDocument.body(), clean.body().bytes());  
copySafeNodes(dirtyDocument.body(), clean.node());  
copySafeNodes(dirtyDocument.body(), clean.source());  
copySafeNodes(dirtyDocument.body(), clean.Body());  
copySafeNodes(dirtyDocument.body(), clean.contents());  
copySafeNodes(dirtyDocument.body(), clean.url());  
copySafeNodes(dirtyDocument.body(), clean.toDocument());  
copySafeNodes(dirtyDocument.body(), clean.body().elements());  
copySafeNodes(dirtyDocument.body(), clean.script());  
copySafeNodes(dirtyDocument.body(), clean.nodes());  
copySafeNodes(dirtyDocument.body(), clean.body().children());  
copySafeNodes(dirtyDocument.body(), clean.data());  
copySafeNodes(dirtyDocument.body(), clean.xml());  
copySafeNodes(dirtyDocument.body(), clean.body().getDocument());  
copySafeNodes(dirtyDocument.body(), clean.rootDocument());  
copySafeNodes(dirtyDocument.body(), clean.toDom());  
copySafeNodes(dirtyDocument.body(), clean. body());  
copySafeNodes(dirtyDocument.body(), clean.tree());  
copySafeNodes(dirtyDocument.body(), clean.innerHtml());  
copySafeNodes(dirtyDocument.body(), clean.getNodes());  
copySafeNodes(dirtyDocument.body(), clean.request());  
copySafeNodes(dirtyDocument.body(), clean.setBody());  
copySafeNodes(dirtyDocument.body(), clean.body().detach());  
copySafeNodes(dirtyDocument.body(), clean.body().node());  
copySafeNodes(dirtyDocument.body(), clean.copy());  
copySafeNodes(dirtyDocument.body(), clean.toDOM());  
copySafeNodes(dirtyDocument.body(), clean.newDocument());  
copySafeNodes(dirtyDocument.body(), clean.toBuilder());  
copySafeNodes(dirtyDocument.body(), clean.toSource());  
copySafeNodes(dirtyDocument.body(), clean.body().document());  
copySafeNodes(dirtyDocument.body(), clean.body().data());  
copySafeNodes(dirtyDocument.body(), clean.body().getContents());  
copySafeNodes(dirtyDocument.body(), clean.body().clone());  
copySafeNodes(dirtyDocument.body(), clean.query());  
copySafeNodes(dirtyDocument.body(), clean.form());  
copySafeNodes(dirtyDocument.body(), clean.header());  
copySafeNodes(dirtyDocument.body(), clean.payload());  
copySafeNodes(dirtyDocument.body(), clean.body().all());  
copySafeNodes(dirtyDocument.body(), clean.body().root());  
copySafeNodes(dirtyDocument.body(), clean.bodyArray());  
copySafeNodes(dirtyDocument.body(), clean.headers());  
copySafeNodes(dirtyDocument.body(), clean.toHtml());  
copySafeNodes(dirtyDocument.body(), clean.element());  
copySafeNodes(dirtyDocument.body(), clean.tbody());  
copySafeNodes(dirtyDocument.body(), clean.targetDocument());  
copySafeNodes(dirtyDocument.body(), clean.stream());  
copySafeNodes(dirtyDocument.body(), clean.clean());  
copySafeNodes(dirtyDocument.body(), clean.asNode());  
copySafeNodes(dirtyDocument.body(), clean.body().tree());  
copySafeNodes(dirtyDocument.body(), clean.body().content());  
copySafeNodes(dirtyDocument.body(), clean.message());  
copySafeNodes(dirtyDocument.body(), clean.fragment());  
copySafeNodes(dirtyDocument.body(), clean.nodeList());  
copySafeNodes(dirtyDocument.body(), clean.dom());  
copySafeNodes(dirtyDocument.body(), clean.plain());  
copySafeNodes(dirtyDocument.body(), clean.body().childNodes());  
copySafeNodes(dirtyDocument.body(), clean.blob());  
copySafeNodes(dirtyDocument.body(), clean.rawDocument());  
copySafeNodes(dirtyDocument.body(), clean.result());  
copySafeNodes(dirtyDocument.body(), clean.rootNode());  
copySafeNodes(dirtyDocument.body(), clean.elements());  
copySafeNodes(dirtyDocument.body(), clean.toShell());  
copySafeNodes(dirtyDocument.body(), clean.contentType());  
copySafeNodes(dirtyDocument.body(), clean.sourceNode());  
copySafeNodes(dirtyDocument.body(), clean.value());  
copySafeNodes(dirtyDocument.body(), clean.toElement());  
copySafeNodes(dirtyDocument.body(), clean.toXml());  
copySafeNodes(dirtyDocument.body(), clean.rootElement());  
copySafeNodes(dirtyDocument.body(), clean.build());  
copySafeNodes(dirtyDocument.body(), clean.buffer());  
copySafeNodes(dirtyDocument.body(), clean.bodies());  
copySafeNodes(dirtyDocument.body(), clean.body().trim());  
copySafeNodes(dirtyDocument.body(), clean.session());  
copySafeNodes(dirtyDocument.body(), clean.body().charStream());  
copySafeNodes(dirtyDocument.body(), clean.toNode());  
copySafeNodes(dirtyDocument.body(), clean.all());  
copySafeNodes(dirtyDocument.body(), clean.parts());  
copySafeNodes(dirtyDocument.body(), clean.toDoc());  
copySafeNodes(dirtyDocument.body(), clean.root().body());  
copySafeNodes(dirtyDocument.body(), clean.shell());  
copySafeNodes(dirtyDocument.body(), clean.id());  
copySafeNodes(dirtyDocument.body(), clean.toInputSource());  
copySafeNodes(dirtyDocument.body(), clean.body().tail());  
copySafeNodes(dirtyDocument.body(), clean.body2());  
copySafeNodes(dirtyDocument.body(), clean.body().flatten());  
copySafeNodes(dirtyDocument.body(), clean.dirty());  
copySafeNodes(dirtyDocument.body(), clean.parent());  
copySafeNodes(dirtyDocument.body(), clean.body().child());  
copySafeNodes(dirtyDocument.body(), clean.body().getAll());  
copySafeNodes(dirtyDocument.body(), clean.uri());  
copySafeNodes(dirtyDocument.body(), clean.bodyImpl());  
copySafeNodes(dirtyDocument.body(), clean.toTree());  
copySafeNodes(dirtyDocument.body(), clean.inner());  
copySafeNodes(dirtyDocument.body(), clean.rawText());  
copySafeNodes(dirtyDocument.body(), clean.response());  
copySafeNodes(dirtyDocument.body(), clean.schema());  
copySafeNodes(dirtyDocument.body(), clean.context());  
copySafeNodes(dirtyDocument.body(), clean.outerDocument());  
copySafeNodes(dirtyDocument.body(), clean.bodyParts());  
copySafeNodes(dirtyDocument.body(), clean.bodyMap());  
copySafeNodes(dirtyDocument.body(), clean.params());  
copySafeNodes(dirtyDocument.body(), clean.getContent());  
copySafeNodes(dirtyDocument.body(), clean.rootUri());  
copySafeNodes(dirtyDocument.body(), clean.fields());  
copySafeNodes(dirtyDocument.body(), clean.title());  
copySafeNodes(dirtyDocument.body(), clean.body(), true());  
copySafeNodes(dirtyDocument.body(), clean.outer());  
copySafeNodes(dirtyDocument.body(), clean.parameters());  
copySafeNodes(dirtyDocument.body(), clean.target());  
copySafeNodes(dirtyDocument.body(), clean.body().element());  
copySafeNodes(dirtyDocument.body(), clean.getDocument());  
copySafeNodes(dirtyDocument.body(), clean.mimeTypes());  
copySafeNodes(dirtyDocument.body(), clean.fullBody());  
copySafeNodes(dirtyDocument.body(), clean.toXML());  
copySafeNodes(dirtyDocument.body(), clean.plainText());  
copySafeNodes(dirtyDocument.body(), clean.clone());  
copySafeNodes(dirtyDocument.body(), clean.body().getData());  
copySafeNodes(dirtyDocument.body(), clean.command());  
copySafeNodes(dirtyDocument.body(), clean.basePath());  
copySafeNodes(dirtyDocument.body(), clean.string());  
copySafeNodes(dirtyDocument.body(), clean.rawNode());  
copySafeNodes(dirtyDocument.body(), clean.bodyTree());  
copySafeNodes(dirtyDocument.body(), clean.body().doc());  
copySafeNodes(dirtyDocument.body(), clean.bodyBuilder());  
copySafeNodes(dirtyDocument.body(), clean.rootNodes());  
copySafeNodes(dirtyDocument.body(), clean.xpath());  
copySafeNodes(dirtyDocument.body(), clean.body().parent());  
copySafeNodes(dirtyDocument.body(), clean.head().body());  
copySafeNodes(dirtyDocument.body(), clean.wrapper());  
copySafeNodes(dirtyDocument.body(), clean.structure());  
copySafeNodes(dirtyDocument.body(), clean.lines());  
copySafeNodes(dirtyDocument.body(), clean.action());  
copySafeNodes(dirtyDocument.body(), clean.baseURI());  
copySafeNodes(dirtyDocument.body(), clean.mainDocument());  
copySafeNodes(dirtyDocument.body(), clean.body().html());  
copySafeNodes(dirtyDocument.body(), clean.toStream());  
copySafeNodes(dirtyDocument.body(), clean.description());  
copySafeNodes(dirtyDocument.body(), clean.container());  
copySafeNodes(dirtyDocument.body(), clean.innerDocument());  
copySafeNodes(dirtyDocument.body(), clean.part());  
copySafeNodes(dirtyDocument.body(), clean.body().head());  
copySafeNodes(dirtyDocument.body(), clean.self());  
copySafeNodes(dirtyDocument.body(), clean.getBaseUri());  
copySafeNodes(dirtyDocument.body(), clean.binary());  
copySafeNodes(dirtyDocument.body(), clean.server());  
copySafeNodes(dirtyDocument.body(), clean.bodyPlain());  
copySafeNodes(dirtyDocument.body(), clean.body().fragments());  
copySafeNodes(dirtyDocument.body(), clean.bytes());  
copySafeNodes(dirtyDocument.body(), clean.full());  
copySafeNodes(dirtyDocument.body(), clean.body().expand());  
copySafeNodes(dirtyDocument.body(), clean.body().dom());  
copySafeNodes(dirtyDocument.body(), clean.makeNode());  
copySafeNodes(dirtyDocument.body(), clean.input());  
copySafeNodes(dirtyDocument.body(), clean.code());  
copySafeNodes(dirtyDocument.body(), clean.body().contents());  
copySafeNodes(dirtyDocument.body(), clean.body().slice());  
copySafeNodes(dirtyDocument.body(), clean.empty());  
copySafeNodes(dirtyDocument.body(), clean.raw().body());  
copySafeNodes(dirtyDocument.body(), clean.body().firstChild());  
copySafeNodes(dirtyDocument.body(), clean.soup());  
copySafeNodes(dirtyDocument.body(), clean.apply());  
copySafeNodes(dirtyDocument.body(), clean.view());  
copySafeNodes(dirtyDocument.body(), clean.topNode());  
copySafeNodes(dirtyDocument.body(), clean.boundary());  
copySafeNodes(dirtyDocument.body(), clean.bare());  
copySafeNodes(dirtyDocument.body(), clean.requestBody());  
copySafeNodes(dirtyDocument.body(), clean.read());  
copySafeNodes(dirtyDocument.body(), clean.rawContent());  
copySafeNodes(dirtyDocument.body(), clean.targetUri());  
copySafeNodes(dirtyDocument.body(), clean.body().copy());  
copySafeNodes(dirtyDocument.body(), clean.toBase());  
copySafeNodes(dirtyDocument.body(), clean.wrap());  
copySafeNodes(dirtyDocument.body(), clean.attributes());  
copySafeNodes(dirtyDocument.body(), clean.bodyText());  
copySafeNodes(dirtyDocument.body(), clean.outerHtml());  
copySafeNodes(dirtyDocument.body(), clean.toPlainText());  
copySafeNodes(dirtyDocument.body(), clean.toMap());  
copySafeNodes(dirtyDocument.body(), clean.body().raw());  
copySafeNodes(dirtyDocument.body(), clean.toJSON());  
copySafeNodes(dirtyDocument.body(), clean.toText());  
copySafeNodes(dirtyDocument.body(), clean.fullUrl());  
copySafeNodes(dirtyDocument.body(), clean.filter());  
copySafeNodes(dirtyDocument.body(), clean.toBase64());  
copySafeNodes(dirtyDocument.body(), clean.body().toArray());  
copySafeNodes(dirtyDocument.body(), clean.toHTML());  
copySafeNodes(dirtyDocument.body(), clean.body().clean());  
copySafeNodes(dirtyDocument.body(), clean.values());  
copySafeNodes(dirtyDocument.body(), clean.body().iter());  
copySafeNodes(dirtyDocument.body(), clean.sourceDocument());  
copySafeNodes(dirtyDocument.body(), clean.htmlBody());  
copySafeNodes(dirtyDocument.body(), clean.version());  
copySafeNodes(dirtyDocument.body(), clean.body().getBody());  
copySafeNodes(dirtyDocument.body(), clean.oldBody());  
copySafeNodes(dirtyDocument.body(), clean.rootNode());  
copySafeNodes(dirtyDocument.body(), clean.body().getBytes());  
copySafeNodes(dirtyDocument.body(), clean.subject());  
copySafeNodes(dirtyDocument.body(), clean.body().inner());  
copySafeNodes(dirtyDocument.body(), clean.getHead());  
copySafeNodes(dirtyDocument.body(), clean.page());  
copySafeNodes(dirtyDocument.body(), clean.inline());  
copySafeNodes(dirtyDocument.body(), clean.trim());  
copySafeNodes(dirtyDocument.body(), clean.type());  
copySafeNodes(dirtyDocument.body(), clean.rawHtml());  
copySafeNodes(dirtyDocument.body(), clean.plainBody());  
copySafeNodes(dirtyDocument.body(), clean.body().normalize());  
copySafeNodes(dirtyDocument.body(), clean.toBaseUri());  
copySafeNodes(dirtyDocument.body(), clean.body(), null());  
copySafeNodes(dirtyDocument.body(), clean.document().body());  
copySafeNodes(dirtyDocument.body(), clean.fullText());  
copySafeNodes(dirtyDocument.body(), clean.bnodes());  
copySafeNodes(dirtyDocument.body(), clean.innerXml());  
copySafeNodes(dirtyDocument.body(), clean.slurp());  
copySafeNodes(dirtyDocument.body(), clean.mainNode());  
copySafeNodes(dirtyDocument.body(), clean.body().toJSON());  
copySafeNodes(dirtyDocument.body(), clean.copyBody());  
copySafeNodes(dirtyDocument.body(), clean.BODY());  
copySafeNodes(dirtyDocument.body(), clean.main());  
copySafeNodes(dirtyDocument.body(), clean.jsonBody());  
copySafeNodes(dirtyDocument.body(), clean.body()->body());  
copySafeNodes(dirtyDocument.body(), clean.htmlDocument());  
copySafeNodes(dirtyDocument.body(), clean.body().inline());  
copySafeNodes(dirtyDocument.body(), clean.object());  
copySafeNodes(dirtyDocument.body(), clean.plaintext());  
copySafeNodes(dirtyDocument.body(), clean.toBody());  
copySafeNodes(dirtyDocument.body(), clean.body().getRoot());  
copySafeNodes(dirtyDocument.body(), clean.body().documents());  
copySafeNodes(dirtyDocument.body(), clean.newBody());  
copySafeNodes(dirtyDocument.body(), clean.body());  
copySafeNodes(dirtyDocument, clean.body());  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.body());  
copySafeNodes(dirtyDocument.body(), clean, clean.body());  
copySafeNodes(dirtyDocument.body, clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument, clean.body());  
copySafeNodes(dirtyDocument.body(), clean.body());, clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.body, clean.body());  
copySafeNodes(dirtyDocument.body(), clean.body()), clean.body());  
copySafeNodes(clean.body(), dirtyDocument.body(), clean.body());  
copySafeNodes(clean.body(), clean.body());  
copySafeNodes(dirtyDocument.body(), clean.body, clean.body());  
copySafeNodes(dirtyDocument.body(), true, clean.body());  
copySafeNodes(dirtyDocument.body(), null, clean.body());  
copySafeNodes(dirtyDocument.body().body, clean.body());  
copySafeNodes(dirtyDocument.body().body(), clean, clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.root, clean.body());  
copySafeNodes(clean.body(), dirtyDocument, clean.body());  
copySafeNodes(clean, clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.documentElement, clean.body());  
copySafeNodes(dirtyDocument.body().body(), clean.body());  
copySafeNodes(clean.body(), dirtyDocument.body());, clean.body());  
copySafeNodes(dirtyDocument.body(true), clean, clean.body());  
copySafeNodes(body, clean.body());  
copySafeNodes(dirtyDocument, clean, clean.body());  
copySafeNodes(clean.body, clean.body());  
copySafeNodes(dirtyDocument.body(), doc, clean.body());  
copySafeNodes(dirtyDocument.body(), clean.rootUri, clean.body());  
copySafeNodes(dirtyDocument.body(), this, clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.url, clean.body());  
copySafeNodes(dirtyDocument.body(), false, clean.body());  
copySafeNodes(dirtyDocument.body()); return clean, clean.body());  
copySafeNodes(dirtyDocument.body()) , clean.body());  
copySafeNodes(doc, clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.html, clean.body());  
copySafeNodes(dirtyDocument.body() , clean.body());  
copySafeNodes(dirtyDocument.body(), 0, clean.body());  
copySafeNodes(dirtyDocument.body(), body, clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.baseURI, clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.path, clean.body());  
copySafeNodes(dirtyDocument.body(), clear, clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.head, clean.body());  
copySafeNodes(dirtyDocument.body().body(), dirtyDocument, clean.body());  
copySafeNodes(dirtyDocument.body(), dirty, clean.body());  
copySafeNodes(dirtyDocument.body().nodes, clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.document, clean.body());  
copySafeNodes(dirtyDocument.body(), this.body, clean.body());  
copySafeNodes(dirtyDocument.body().iterator, clean.body());  
copySafeNodes(dirtyDocument.body(), clean.documentElement, clean.body());  
copySafeNodes(dirtyDocument.body(), clone, clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.uri, clean.body());  
copySafeNodes(dirtyDocument.body(), document, clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.baseURL, clean.body());  
copySafeNodes(dirtyDocument.body().text, clean.body());  
copySafeNodes(document, clean.body());  
copySafeNodes(dirtyDocument.body(false), clean, clean.body());  
copySafeNodes(dirtyDocument.body(),, clean.body());  
copySafeNodes(clean.body(), dirtyDocument.body()), clean.body());  
copySafeNodes(dirtyDocument.body().data, clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.xml, clean.body());  
copySafeNodes(dirtyDocument, clean.body(), clean.body());  
copySafeNodes(dirtyDocument.body().document, clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.contentType, clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.headers, clean.body());  
copySafeNodes(dirtyDocument.body();, clean.body());  
copySafeNodes(dirtyDocument.body(), clean.rootUrl, clean.body());  
copySafeNodes(dirtyDocument.root, clean.body());  
copySafeNodes(dirtyDocument.body(), dirty.body(), clean.body());  
copySafeNodes(dirtyDocument.body().firstChild, clean.body());  
copySafeNodes(dirtyDocument.body(), cloneDocument, clean.body());  
copySafeNodes(this.body, clean.body());  
copySafeNodes(dirtyDocument.documentElement, clean.body());  
copySafeNodes(dirtyDocument.body(), shallowCopy, clean.body());  
copySafeNodes(dirtyDocument.body(), clean.root, clean.body());  
copySafeNodes(dirtyDocument.body().elements, clean.body());  
copySafeNodes(dirtyDocument.body().stream, clean.body());  
copySafeNodes(dirtyDocument.body().node, clean.body());  
copySafeNodes(dirtyDocument._body, clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.content, clean.body());  
copySafeNodes(dirtyDocument.body(), clean.baseUri, clean.body());  
copySafeNodes(dirtyDocument.body().element, clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.rootNode, clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.nodes, clean.body());  
copySafeNodes(dirtyDocument.body().documentElement, clean.body());  
copySafeNodes(dirtyDocument.body(), clean.body, clean.body());  
copySafeNodes(dirtyDocument.body().childNodes, clean.body());  
copySafeNodes(dirtyDocument.body().text(), clean, clean.body());  
copySafeNodes(dirtyDocument.body()); copySafeNodes, clean.body());  
copySafeNodes(dirtyDocument.body(), deepCopy, clean.body());  
copySafeNodes(dirtyDocument.body().content, clean.body());  
copySafeNodes(dirtyDocument.body().nodeIterator, clean.body());  
copySafeNodes(null, clean.body());  
copySafeNodes(clean.body()); return clean, clean.body());  
copySafeNodes(dirtyDocument.body().toString(), clean, clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.header, clean.body());  
copySafeNodes(dirtyDocument.body(), new Document, clean.body());  
copySafeNodes(dirtyDocument.body(true), dirtyDocument, clean.body());  
copySafeNodes(dirtyDocument.body(), clean._body, clean.body());  
copySafeNodes(dirtyDocument.body(), clean, clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument._body, clean.body());  
copySafeNodes(dirtyDocument.body().nodes(), clean, clean.body());  
copySafeNodes(dirtyDocument.body().nodes(), clean.body());  
copySafeNodes(dirtyDocument.body().bodyElement, clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.tree, clean.body());  
copySafeNodes(dirtyDocument.body() , clean.body());  
copySafeNodes(dirtyDocument.body().iterator(), clean, clean.body());  
copySafeNodes(dirtyDocument.body().iterator(), clean.body());  
copySafeNodes(this, clean.body());  
copySafeNodes(dirtyDocument.body().tree, clean.body());  
copySafeNodes(dirtyDocument.body().root, clean.body());  
copySafeNodes(dirtyDocument.body(), -1, clean.body());  
copySafeNodes(dirtyDocument.body(), clean.bodyHash, clean.body());  
copySafeNodes(dirtyDocument.body().dom, clean.body());  
copySafeNodes(dirtyDocument.body(), 1, clean.body());  
copySafeNodes(dirtyDocument.body()), clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.links, clean.body());  
copySafeNodes(clean.body(), clean, clean.body());  
copySafeNodes(dirtyDocument.body());, clean.body());  
copySafeNodes(dirtyDocument.body(), clean.url, clean.body());  
copySafeNodes(dirtyDocument.body().xml, clean.body());  
copySafeNodes(dirtyDocument.body(), &clean, clean.body());  
copySafeNodes(dirtyDocument.body(), clean.document, clean.body());  
copySafeNodes(clean.body(), dirtyDocument.body, clean.body());  
copySafeNodes(clean.body().body(), dirtyDocument, clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.files, clean.body());  
copySafeNodes(dirtyDocument.body().body().body, clean.body());  
copySafeNodes(dirtyDocument.body(true), clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument, clean.body());  
copySafeNodes(dirtyDocument.body(), nil, clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDoc, clean.body());  
copySafeNodes(dirtyDocument.body(), innerDocument, clean.body());  
copySafeNodes(dirtyDocument.body(), clean.rootDocument, clean.body());  
copySafeNodes(dirtyDocument, dirtyDocument.body(), clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.fragment, clean.body());  
copySafeNodes( dirtyDocument.body(), clean.body());  
copySafeNodes(dirtyDocument.body(), clean.path(), clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.xpath, clean.body());  
copySafeNodes(clean.body(), clean.body(), clean.body());  
copySafeNodes(dirtyDocument.body().body().body(), clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.node, clean.body());  
copySafeNodes(dirtyDocument.body(), copySafeNodes, clean.body());  
copySafeNodes(dirtyDocument.body() != null, clean.body());  
copySafeNodes(dirtyDocument.body().head, clean.body());  
copySafeNodes(dirtyDocument.body().bytes(), clean, clean.body());  
copySafeNodes(dirtyDocument.body(), cloneNode, clean.body());  
copySafeNodes(data, clean.body());  
copySafeNodes(dirtyDocument.body(true, clean.body());  
copySafeNodes(dirtyDocument.body(), clean._root, clean.body());  
copySafeNodes(dirtyDocument.body(), clean.body();, clean.body());  
copySafeNodes(dirtyDocument.body(), clean.documentElement(), clean.body());  
copySafeNodes(dirtyDocument, null, clean.body());  
copySafeNodes(dirtyDocument.body(), clean.head, clean.body());  
copySafeNodes(dirtyDocument.body(), this.body(), clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.doc, clean.body());  
copySafeNodes(dirtyDocument.body()); clean.body, clean.body());  
copySafeNodes(dirtyDocument.body().all(), clean, clean.body());  
copySafeNodes(dirtyDocument.body(null), clean, clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.baseUrl, clean.body());  
copySafeNodes(dirtyDocument.body().iterator().next, clean.body());  
copySafeNodes(dirtyDocument.body(),clean.body(), clean.body());  
copySafeNodes(dirtyDocument.body(), path, clean.body());  
copySafeNodes(dirtyDocument.body(), clean.rootElement, clean.body());  
copySafeNodes(dirtyDocument.body(), tempDocument, clean.body());  
copySafeNodes(dirtyDocument.body().node(), clean, clean.body());  
copySafeNodes(innerDocument, clean.body());  
copySafeNodes(dirtyDocument.body().raw, clean.body());  
copySafeNodes(dirtyDocument.rootDocument, clean.body());  
copySafeNodes(dirtyDocument.body().splunk, clean.body());  
copySafeNodes(dirtyDocument.body(), clean.header(), clean.body());  
copySafeNodes(dirtyDocument.body().domDocument, clean.body());  
copySafeNodes(dirtyDocument.body(false), clean.body());  
copySafeNodes(dirtyDocument.body(), cloneBody, clean.body());  
copySafeNodes(dirtyDocument.root(), dirtyDocument.body, clean.body());  
copySafeNodes(dirtyDocument.body() == null, clean.body());  
copySafeNodes(dirtyDoc, clean.body());  
copySafeNodes(dirtyDocument._root, clean.body());  
copySafeNodes(dirtyDocument.body().children, clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.parent, clean.body());  
copySafeNodes(dirtyDocument, true, clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.attributes, clean.body());  
copySafeNodes(dirtyDocument.body(), clean.bodyBuilder, clean.body());  
copySafeNodes(dirtyDocument.body(false, clean.body());  
copySafeNodes(dirtyDocument.body(), clean.bodyAsString, clean.body());  
copySafeNodes(dirty, clean.body());  
copySafeNodes(clean.body(), dirtyDocument.rootUri, clean.body());  
copySafeNodes(dirtyDocument.body(), clean.head(), clean.body());  
copySafeNodes(dirtyDocument.body().getDocumentElement(), clean.body());  
copySafeNodes(dirtyDocument.body(), result, clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument._root, clean.body());  
copySafeNodes(dirtyDocument.nodes(), clean.body());  
copySafeNodes(node, clean.body());  
copySafeNodes(dirtyDocument.body(), newShell, clean.body());  
copySafeNodes(dirtyDocument.baseUri(), dirtyDocument, clean.body());  
copySafeNodes(dirtyDocument.body().doc, clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.contents, clean.body());  
copySafeNodes(dirtyDocument.body().bytes, clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.text, clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.host, clean.body());  
copySafeNodes(clean.body(), null, clean.body());  
copySafeNodes(dirtyDocument.body(), node, clean.body());  
copySafeNodes(dirtyDocument.body().documentElement, clean.body());  
copySafeNodes(dirtyDocument.body(), clean.path, clean.body());  
copySafeNodes(dirtyDocument.body(true)), clean.body());  
copySafeNodes(dirty.body(), clean.body());  
copySafeNodes(dirtyDocument.body(), root, clean.body());  
copySafeNodes(dirtyDocument.document, clean.body());  
copySafeNodes(dirtyDocument.body(), newDocument, clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.session, clean.body());  
copySafeNodes(dirtyDocument.body()); copy(clean, clean.body());  
copySafeNodes(dirtyDocument.body().asNode, clean.body());  
copySafeNodes(path, clean.body());  
copySafeNodes(dirtyDocument.body().ownerDocument, clean.body());  
copySafeNodes(dirtyDocument.body(), clean.root(), clean.body());  
copySafeNodes(dirtyDocument.path(), dirtyDocument.body, clean.body());  
copySafeNodes(clean.body(), clean.body());, clean.body());  
copySafeNodes(targetDocument, clean.body());  
copySafeNodes(dirtyDocument.rootUri, clean.body());  
copySafeNodes(dirtyDocument.rootElement, clean.body());  
copySafeNodes(dirtyDocument.body(),  clean, clean.body());  
copySafeNodes(dirtyDocument.content(), clean.body(), clean.body());  
copySafeNodes(dirtyDocument.root(), clean.body());  
copySafeNodes(dirtyDocument.body().childNodes, clean.body());  
copySafeNodes(dirtyDocument.body()) return clean, clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.mimeType, clean.body());  
copySafeNodes(dirtyDocument.body(), clean.header, clean.body());  
copySafeNodes(dirtyDocument.body().allNodes, clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.query, clean.body());  
copySafeNodes(dirtyDocument.body(), cloneElement, clean.body());  
copySafeNodes(dirtyDocument.body(false), dirtyDocument, clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.element, clean.body());  
copySafeNodes(dirtyDocument.body().charStream, clean.body());  
copySafeNodes(dirtyDocument.body(), emptyDocument, clean.body());  
copySafeNodes(dirtyDocument.body(), clean._node, clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.protocol, clean.body());  
copySafeNodes(dirtyDocument.body().rootElement, clean.body());  
copySafeNodes(dirtyDocument.body() , clean.body());  
copySafeNodes(dirtyDocument.body().toString(), clean.body());  
copySafeNodes(dirtyDocument.body(), cloneDeep, clean.body());  
copySafeNodes(dirtyDocument.nodes, clean.body());  
copySafeNodes(dirtyDocument.body()/*, clean.body());  
copySafeNodes(dirtyDocument.body(), oldDocument, clean.body());  
copySafeNodes(dirtyDocument.head(), dirtyDocument.body, clean.body());  
copySafeNodes(dirtyDocument.body(),clean, clean.body());  
copySafeNodes(dirtyDocument.body(), rawDocument, clean.body());  
copySafeNodes(dirtyDocument.body().child, clean.body());  
copySafeNodes(dirtyDocument.body(), self, clean.body());  
copySafeNodes(dirtyDocument.bodyAsString(), clean, clean.body());  
copySafeNodes(dirtyDocument.body().html, clean.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.basePath, clean.body());  
copySafeNodes(dirtyDocument.bodyAsString(), clean.body());  
copySafeNodes(dirtyDocument.body(),  clean);  
copySafeNodes(dirtyDocument.body(),  clean.body);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean);  
copySafeNodes(dirtyDocument.body(),  clean.body()); return clean);  
copySafeNodes(dirtyDocument.body(),  clean.body(), true);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.body);  
copySafeNodes(dirtyDocument.body(),  clean.body() );  
copySafeNodes(dirtyDocument.body(),  clean.body(), null);  
copySafeNodes(dirtyDocument.body(),  clean.body(), false);  
copySafeNodes(dirtyDocument.body(),  clean.body().body);  
copySafeNodes(dirtyDocument.body(),  clean.body());  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.baseURI);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.url);  
copySafeNodes(dirtyDocument.body(),  clean, true);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.uri);  
copySafeNodes(dirtyDocument.body(),  clean.body(true), true);  
copySafeNodes(dirtyDocument.body(),  clean.body(););  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.baseUrl);  
copySafeNodes(dirtyDocument.body(),  clean.body().document);  
copySafeNodes(dirtyDocument.body(), clean);  
copySafeNodes(dirtyDocument.body(),  clean.body(true);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.path);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.document);  
copySafeNodes(dirtyDocument.body(),  clean.body(true), clean);  
copySafeNodes(dirtyDocument.body(),  clean.body() );  
copySafeNodes(dirtyDocument.body(),  clean.body().body(), clean);  
copySafeNodes(dirtyDocument.body(),  clean.body(), 0);  
copySafeNodes(dirtyDocument.body(),  clean.body().body().body);  
copySafeNodes(dirtyDocument.body(),  clean.body(); return clean);  
copySafeNodes(dirtyDocument.body(),  clean.body()););  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.documentElement);  
copySafeNodes(dirtyDocument.body(),  clean.body().nodes);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.headers);  
copySafeNodes(dirtyDocument.body(), clean.body);  
copySafeNodes(dirtyDocument.body(),  clean.body() ...);  
copySafeNodes(dirtyDocument.body(),  clean.body().stream);  
copySafeNodes(dirtyDocument.body(),  clean, false);  
copySafeNodes(dirtyDocument.body(),  clean.body(), dirtyDocument);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.baseURL);  
copySafeNodes(dirtyDocument.body(),  clean.body(false);  
copySafeNodes(dirtyDocument.body(),  clean.body().text);  
copySafeNodes(dirtyDocument.body(),  clean.body() != null);  
copySafeNodes(dirtyDocument.body(),  clean); return clean);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.basePath);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clear);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.root);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.header);  
copySafeNodes(dirtyDocument.body(),  clean.body().iterator);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.id);  
copySafeNodes(dirtyDocument.body(),  clean.body(), -1);  
copySafeNodes(dirtyDocument.body(),  clean, null);  
copySafeNodes(dirtyDocument.body(),  clean.body()) return clean);  
copySafeNodes(dirtyDocument.body(),  clean.body().data);  
copySafeNodes(dirtyDocument.body(),  null);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.head);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.encoding);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.session);  
copySafeNodes(dirtyDocument.body(),  clean.body() );  
copySafeNodes(dirtyDocument.body(),  clean.body().childNodes);  
copySafeNodes(dirtyDocument.body(),  clean.body().children);  
copySafeNodes(dirtyDocument.body(),  dirtyDocument.body(), clean);  
copySafeNodes(dirtyDocument.body(),  clean.body() , clean);  
copySafeNodes(dirtyDocument.body(),  clean.body(), this);  
copySafeNodes(dirtyDocument.body(),  clean.body().nodeIterator);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.attributes);  
copySafeNodes(dirtyDocument.body(),  clean.body().elements);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.charset);  
copySafeNodes(dirtyDocument.body(),  clone);  
copySafeNodes(dirtyDocument.body(),  clean.body(), 1);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.doc);  
copySafeNodes(dirtyDocument.body(),  clean.body() == null);  
copySafeNodes(dirtyDocument.body(),  clean.body().toString);  
copySafeNodes(dirtyDocument.body(),  clean.body(false), true);  
copySafeNodes(dirtyDocument.body(),  clean.body().root);  
copySafeNodes(dirtyDocument.body(),  clear);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.xpath);  
copySafeNodes(dirtyDocument.body(),  clean.body()::add);  
copySafeNodes(dirtyDocument.body(),  clean.body() - clean);  
copySafeNodes(dirtyDocument.body(),  clean._body);  
copySafeNodes(dirtyDocument.body(),  clean.body() - 1);  
copySafeNodes(dirtyDocument.body(),  clean.body().body()););  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.context);  
copySafeNodes(dirtyDocument.body(),  clean.body().getNodes);  
copySafeNodes(dirtyDocument.body(),  clean.body() + clean);  
copySafeNodes(dirtyDocument.body(),  clean.body().doc);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.version);  
copySafeNodes(dirtyDocument.body(),  clean, clean);  
copySafeNodes(dirtyDocument.body(),  clean.body().body(), true);  
copySafeNodes(dirtyDocument.body(), clean.body()); return clean);  
copySafeNodes(dirtyDocument.body(),  clean.body().content);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.contentType);  
copySafeNodes(dirtyDocument.body(),  clean.body().documentElement);  
copySafeNodes(dirtyDocument.body(),  clean.body().getDocument);  
copySafeNodes(dirtyDocument.body(),  clean.body()  , clean);  
copySafeNodes(dirtyDocument.body(),  clean.body()...);  
copySafeNodes(dirtyDocument.body(),  clean.body(true), false);  
copySafeNodes(dirtyDocument.body(),  clean.body(false), false);  
copySafeNodes(dirtyDocument.body(),  dirtyDocument);  
copySafeNodes(dirtyDocument.body(),  clean.body().tree);  
copySafeNodes(dirtyDocument.body(),  clean.body().nodeList);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.query);  
copySafeNodes(dirtyDocument.body(),  clean.body(), copySafeNodes);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.links);  
copySafeNodes(dirtyDocument.body(),  clean.body(), deepCopy);  
copySafeNodes(dirtyDocument.body(),  clean.body()); Return clean);  
copySafeNodes(dirtyDocument.body(),  clean.body().node);  
copySafeNodes(dirtyDocument.body(),  clean.body().toString(), clean);  
copySafeNodes(dirtyDocument.body(),  clean.body().dom);  
copySafeNodes(dirtyDocument.body(),  clean.body(),clean);  
copySafeNodes(dirtyDocument.body(),  clean.body().text(), clean);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.options);  
copySafeNodes(dirtyDocument.body(),  &clean);  
copySafeNodes(dirtyDocument.body(),  clean.body().body());  
copySafeNodes(dirtyDocument.body(),  clean.body()..);  
copySafeNodes(dirtyDocument.body(),  clean.body().childNodes);  
copySafeNodes(dirtyDocument.body(),  clean.body()::copy);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.filter);  
copySafeNodes(dirtyDocument.body(),  clean.body()::appendChild);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.baseDir);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.signature);  
copySafeNodes(dirtyDocument.body(),  clean.body().firstChild);  
copySafeNodes(dirtyDocument.body(),  dirty.body(), clean);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean, true);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.rootNode);  
copySafeNodes(dirtyDocument.body(),  clean._nodes);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.content);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.xml);  
copySafeNodes(dirtyDocument.body(),  clean.body() - dirtyDocument);  
copySafeNodes(dirtyDocument.body(),  clean.body(false), clean);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.nodes);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.parameters);  
copySafeNodes(dirtyDocument.body(),  clean.body(), doc -> doc);  
copySafeNodes(dirtyDocument.body(), clean.body(),clean);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.boundary);  
copySafeNodes(dirtyDocument.body(),  clean.body().bytes);  
copySafeNodes(dirtyDocument.body(),  clean.body().rootNode);  
copySafeNodes(dirtyDocument.body(),  clear.body(), clean);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.type);  
copySafeNodes(dirtyDocument.body(),  clean.body()); return clean);  
copySafeNodes(dirtyDocument.body(),  clean.body() || null);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.env);  
copySafeNodes(dirtyDocument.body(),  clean.body().body() );  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.mimeType);  
copySafeNodes(dirtyDocument.body(),  clean.body(true).body);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clone);  
copySafeNodes(dirtyDocument.body(),  clean.body(), newShell);  
copySafeNodes(dirtyDocument.body(),  clean.body().element);  
copySafeNodes(dirtyDocument.body(),  clean.body() << 1);  
copySafeNodes(dirtyDocument.body(),  clean.body().contents);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.protocol);  
copySafeNodes(dirtyDocument.body(),  newShell);  
copySafeNodes(dirtyDocument.body(),  clean.body()::save);  
copySafeNodes(dirtyDocument.body(),  clean.body()), clean);  
copySafeNodes(dirtyDocument.body(),  clean.body().detach);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.environment);  
copySafeNodes(dirtyDocument.body(),  clean.body().buffer);  
copySafeNodes(dirtyDocument.body(),  clean.body().rootUri);  
copySafeNodes(dirtyDocument.body(),  clean._root);  
copySafeNodes(dirtyDocument.body(),  clean, clean.body);  
copySafeNodes(dirtyDocument.body(),  clean.body(), new Document);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.name);  
copySafeNodes(dirtyDocument.body(),  clean.body().all);  
copySafeNodes(dirtyDocument.body(),  clean.body(), true, true);  
copySafeNodes(dirtyDocument.body(),  clean.body() );  
copySafeNodes(dirtyDocument.body(),  clean.body() + doc);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.fragment);  
copySafeNodes(dirtyDocument.body(),  clean.body()); });  
copySafeNodes(dirtyDocument.body(),  clean.body(), path);  
copySafeNodes(dirtyDocument.body(),  clean.body()::merge);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.status);  
copySafeNodes(dirtyDocument.body(),  clean.body(), 10);  
copySafeNodes(dirtyDocument.body(),  clean.body(), 2);  
copySafeNodes(dirtyDocument.body(),  clean.body(), doc);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean._links);  
copySafeNodes(dirtyDocument.body(),  cloneDocument);  
copySafeNodes(dirtyDocument.body(),  clear.body);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.host);  
copySafeNodes(dirtyDocument.body(),  clean.body().tail);  
copySafeNodes(dirtyDocument.body(),  clean.body().fragments);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.parent);  
copySafeNodes(dirtyDocument.body(),  doc);  
copySafeNodes(dirtyDocument.body(),  clean.body().charStream);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.language);  
copySafeNodes(dirtyDocument.body(),  clean.body().stream(), clean);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.files);  
copySafeNodes(dirtyDocument.body(),  clean.body().nodes(), clean);  
copySafeNodes(dirtyDocument.body(),  clean.body(),true);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.location);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.html);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.data);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.tree);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.text);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.params);  
copySafeNodes(dirtyDocument.body(),  clean.body()::createShell);  
copySafeNodes(dirtyDocument.body(),  clean.body().xml);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.style);  
copySafeNodes(dirtyDocument.body(),  clean.body(), cloneDeep);  
copySafeNodes(dirtyDocument.body(),  clean.body<mask1> clean);  
copySafeNodes(dirtyDocument.body(),  clean.body()); },);  
copySafeNodes(dirtyDocument.body(),  true);  
copySafeNodes(dirtyDocument.body(),  clean.body()::remove);  
copySafeNodes(dirtyDocument.body(),  clean.body(), nil);  
copySafeNodes(dirtyDocument.body(),  clean.body().html);  
copySafeNodes(dirtyDocument.body(),  clean.body() , true);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.command);  
copySafeNodes(dirtyDocument.body(),  clean.body() + dirtyDocument);  
copySafeNodes(dirtyDocument.body(),  clean.body(), empty);  
copySafeNodes(dirtyDocument.body(),  clean.body().uri);  
copySafeNodes(dirtyDocument.body(),  clean.body() --);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.namespace);  
copySafeNodes(dirtyDocument.body(),  clean.body(null);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.element);  
copySafeNodes(dirtyDocument.body(),  clean.body().head);  
copySafeNodes(dirtyDocument.body(),  clean.body(), shallow);  
copySafeNodes(dirtyDocument.body(),  clean.body()::append);  
copySafeNodes(dirtyDocument.body(),  -1);  
copySafeNodes(dirtyDocument.body(),  clean.body() + body);  
copySafeNodes(dirtyDocument.body(),  clean.body().ownerDocument);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.nonce);  
copySafeNodes(dirtyDocument.body(),  clean.body().clone);  
copySafeNodes(dirtyDocument.body(),  clean.body()); return null);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.contents);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean);  
copySafeNodes(dirtyDocument.body(),  clean.body().raw);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean);  
copySafeNodes(dirtyDocument.body(),  clean.bodyArray);  
copySafeNodes(dirtyDocument.body(),  clean.body()) );  
copySafeNodes(dirtyDocument.body(),  clean.body().newDocument);  
copySafeNodes(dirtyDocument.body(),  clean.body().getDocumentElement);  
copySafeNodes(dirtyDocument.body(),  clean.body().rootDocument);  
copySafeNodes(dirtyDocument.body(),  clean.body().asNode);  
copySafeNodes(dirtyDocument.body(),  clean.body().allNodes);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.filename);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.shell);  
copySafeNodes(dirtyDocument.body(),  clean.body(), ""););  
copySafeNodes(dirtyDocument.body(),  clean.body().documentFragment);  
copySafeNodes(dirtyDocument.body(),  clean.body().documents);  
copySafeNodes(dirtyDocument.body(),  clean.body(), filter);  
copySafeNodes(dirtyDocument.body(),  clean.body().length);  
copySafeNodes(dirtyDocument.body(),  clean._node);  
copySafeNodes(dirtyDocument.body(),  clean.body().iterator(), clean);  
copySafeNodes(dirtyDocument.body(),  clean.body().nodes().iterator);  
copySafeNodes(dirtyDocument.body(),  clean.body()...);  
copySafeNodes(dirtyDocument.body(),  clean.body() & dirtyDocument);  
copySafeNodes(dirtyDocument.body(),  clean.body()::new);  
copySafeNodes(dirtyDocument.body(),  clean.body().splunk);  
copySafeNodes(dirtyDocument.body(),  clean.body().iterator().next);  
copySafeNodes(dirtyDocument.body(),  clean.body().nodeMap);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean._root);  
copySafeNodes(dirtyDocument.body(),  clean.body(), clean.dir);  
copySafeNodes(dirtyDocument.body(), clean.body(), true);  
copySafeNodes(dirtyDocument.body(), clean.body(), false);  
copySafeNodes(dirtyDocument.body(), clean.body(), null);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean);  
copySafeNodes(dirtyDocument.body(), clean.body(), 0);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.baseUri);  
copySafeNodes(dirtyDocument.body(), clean.body(), this);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.body);  
copySafeNodes(dirtyDocument.body(), clean.body(), 1);  
copySafeNodes(dirtyDocument.body(), clean.body(), -1);  
copySafeNodes(dirtyDocument.body(), clean.body(), dirtyDocument);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.rootUri);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.body().length);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.body(), true);  
copySafeNodes(dirtyDocument.body(), clean.body(), true, true);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.baseURI);  
copySafeNodes(dirtyDocument.body(), clean.body(),true);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.url);  
copySafeNodes(dirtyDocument.body(), clean.body(), copySafeNodes);  
copySafeNodes(dirtyDocument.body(), clean.body(), TRUE);  
copySafeNodes(dirtyDocument.body(), clean.body(), deepCopy);  
copySafeNodes(dirtyDocument.body(), clean.body(), 2);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.documentElement);  
copySafeNodes(dirtyDocument.body(), clean.body(), true, false);  
copySafeNodes(dirtyDocument.body(), clean.body(), 10);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.uri);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.body() );  
copySafeNodes(dirtyDocument.body(), clean.body(), doc -> doc);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.rootUrl);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.attributes);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.baseUrl);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.baseURL);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.body(), false);  
copySafeNodes(dirtyDocument.body(), clean.body(), filter);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.path);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.charset);  
copySafeNodes(dirtyDocument.body(), clean.body(), ""); return clean);  
copySafeNodes(dirtyDocument.body(), clean.body(), dirtyDocument.baseUri);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.headers);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.body(), clean);  
copySafeNodes(dirtyDocument.body(), clean.body(), shallow);  
copySafeNodes(dirtyDocument.body(), clean.body(), dryRun);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.encoding);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.document);  
copySafeNodes(dirtyDocument.body(), clean.body(), True);  
copySafeNodes(dirtyDocument.body(), clean.body(),false);  
copySafeNodes(dirtyDocument.body(), clean.body(), false, true);  
copySafeNodes(dirtyDocument.body(), clean.body(), env);  
copySafeNodes(dirtyDocument.body(), clean.body(), clear);  
copySafeNodes(dirtyDocument.body(), clean.body(), 5);  
copySafeNodes(dirtyDocument.body(), clean.body(), 3);  
copySafeNodes(dirtyDocument.body(), clean.body(), null, null);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.session);  
copySafeNodes(dirtyDocument.body(), clean.body(), true);  
copySafeNodes(dirtyDocument.body(), clean.body(), recursive);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.nodes);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.documentFragment);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.filter);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.options);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean); return clean);  
copySafeNodes(dirtyDocument.body(), clean.body(), 4);  
copySafeNodes(dirtyDocument.body(), clean.body(), 7);  
copySafeNodes(dirtyDocument.body(), clean.body(), 8);  
copySafeNodes(dirtyDocument.body(), clean.body(), shallowCopy);  
copySafeNodes(dirtyDocument.body(), clean.body(), nil);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.links);  
copySafeNodes(dirtyDocument.body(), clean.body(), cloneDeep);  
copySafeNodes(dirtyDocument.body(), clean.body(), path);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.xpath);  
copySafeNodes(dirtyDocument.body(), clean.body(), empty);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.root);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.body(true);  
copySafeNodes(dirtyDocument.body(), clean.body(), null, true);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.basePath);  
copySafeNodes(dirtyDocument.body(), clean.body(), this.body);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.body()););  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.id);  
copySafeNodes(dirtyDocument.body(), clean.body(), doc);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.body(), null);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.head);  
copySafeNodes(dirtyDocument.body(), clean.body(), options);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.xml);  
copySafeNodes(dirtyDocument.body(), clean.body(), config);  
copySafeNodes(dirtyDocument.body(), clean.body(), sync);  
copySafeNodes(dirtyDocument.body(), clean.body(), newShell);  
copySafeNodes(dirtyDocument.body(), clean.body(), 100);  
copySafeNodes(dirtyDocument.body(), clean.body(),clean);  
copySafeNodes(dirtyDocument.body(), clean.body(), false, false);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.context);  
copySafeNodes(dirtyDocument.body(), clean.body(), 200);  
copySafeNodes(dirtyDocument.body(), clean.body(), diff);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.header);  
copySafeNodes(dirtyDocument.body(), clean.body(), true); return clean);  
copySafeNodes(dirtyDocument.body(), clean.body(), &clean);  
copySafeNodes(dirtyDocument.body(), clean.body(), newDocument);  
copySafeNodes(dirtyDocument.body(), clean.body(),null);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.rootNode);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.body().encoding);  
copySafeNodes(dirtyDocument.body(), clean.body(), targetDocument);  
copySafeNodes(dirtyDocument.body(), clean.body(), deep);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.environment);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.documentId);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.query);  
copySafeNodes(dirtyDocument.body(), clean.body(), CLEAN);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.rootDocument);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.baseURI(), true);  
copySafeNodes(dirtyDocument.body(), clean.body(), 6);  
copySafeNodes(dirtyDocument.body(), clean.body(), validate);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.style);  
copySafeNodes(dirtyDocument.body(), clean.body(), true );  
copySafeNodes(dirtyDocument.body(), clean.body(), clean, true);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.mimeTypes);  
copySafeNodes(dirtyDocument.body(), clean.body(), "/"); return clean);  
copySafeNodes(dirtyDocument.body(), clean.body(), owner);  
copySafeNodes(dirtyDocument.body(), clean.body(), session);  
copySafeNodes(dirtyDocument.body(), clean.body(), settings);  
copySafeNodes(dirtyDocument.body(), clean.body(), deepClone);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.fragment);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.version);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.selector);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.body().document);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.body().uri);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.parameters);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.nodes().length);  
copySafeNodes(dirtyDocument.body(), clean.body(), "");  
copySafeNodes(dirtyDocument.body(), clean.body(), nullCheck);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.host);  
copySafeNodes(dirtyDocument.body(), clean.body(), dirtyDocument.rootUri);  
copySafeNodes(dirtyDocument.body(), clean.body(), baseUri);  
copySafeNodes(dirtyDocument.body(), clean.body(), System.out);  
copySafeNodes(dirtyDocument.body(), clean.body(),  true);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.tree);  
copySafeNodes(dirtyDocument.body(), clean.body(), i -> i);  
copySafeNodes(dirtyDocument.body(), clean.body(), new Document);  
copySafeNodes(dirtyDocument.body(), clean.body(), dirtyDocument.baseURI);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.documentUri);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.body(false);  
copySafeNodes(dirtyDocument.body(), clean.body(), safeNodes);  
copySafeNodes(dirtyDocument.body(), clean.body(), 0, 0);  
copySafeNodes(dirtyDocument.body(), clean.body(), cleanup);  
copySafeNodes(dirtyDocument.body(), clean.body(), noop);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.body().charset);  
copySafeNodes(dirtyDocument.body(), clean.body(), level);  
copySafeNodes(dirtyDocument.body(), clean.body(), () -> clean);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.language);  
copySafeNodes(dirtyDocument.body(), clean.body(), log);  
copySafeNodes(dirtyDocument.body(), clean.body(), it);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.doc);  
copySafeNodes(dirtyDocument.body(), clean.body(), handler);  
copySafeNodes(dirtyDocument.body(), clean.body(), clone);  
copySafeNodes(dirtyDocument.body(), clean.body(), logger);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.path(), true);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.location);  
copySafeNodes(dirtyDocument.body(), clean.body(), builder);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.baseDir);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean._links);  
copySafeNodes(dirtyDocument.body(), clean.body(), LOGGER);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.files);  
copySafeNodes(dirtyDocument.body(), clean.body(), depth);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.documentElement().ownerDocument);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.contentType);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.body().ownerDocument);  
copySafeNodes(dirtyDocument.body(), clean.body(), targetUri);  
copySafeNodes(dirtyDocument.body(), clean.body(), 1000);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.attachments);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.url(), true);  
copySafeNodes(dirtyDocument.body(), clean.body(), deepFreeze);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.name);  
copySafeNodes(dirtyDocument.body(), clean.body(), r -> r);  
copySafeNodes(dirtyDocument.body(), clean.body(), parent);  
copySafeNodes(dirtyDocument.body(), clean.body(), customizer);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.htmlFragment);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.env);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.body());  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.body().stream);  
copySafeNodes(dirtyDocument.body(), clean.body(), null, false);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean._nodes);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.body().nodes);  
copySafeNodes(dirtyDocument.body(), clean.body(), 500);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.mimeType);  
copySafeNodes(dirtyDocument.body(), clean.body(), writer);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.uri(), true);  
copySafeNodes(dirtyDocument.body(), clean.body(), copySafeNode);  
copySafeNodes(dirtyDocument.body(), clean.body(), tempFolder);  
copySafeNodes(dirtyDocument.body(), clean.body(), dry);  
copySafeNodes(dirtyDocument.body(), clean.body(), nodeFilter);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.namespace);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.errors);  
copySafeNodes(dirtyDocument.body(), clean.body(), dir);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.ns);  
copySafeNodes(dirtyDocument.body(), clean.body(), verbose);  
copySafeNodes(dirtyDocument.body(), clean.body(), t -> t);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.body(););  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.nonce);  
copySafeNodes(dirtyDocument.body(), clean.body(), charset);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.status);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.body().size);  
copySafeNodes(dirtyDocument.body(), clean.body(), document -> document);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.body().iterator);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.sourceUri);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.boundary);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.params);  
copySafeNodes(dirtyDocument.body(), clean.body(), salt);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.rootElement);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.data);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.urlFragment);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.rootPath);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.protocol);  
copySafeNodes(dirtyDocument.body(), clean.body(), ""););  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.urlTemplate);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.signature);  
copySafeNodes(dirtyDocument.body(), clean.body(), 1024);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.rootId);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.body().text);  
copySafeNodes(dirtyDocument.body(), clean.body(), result);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.body().doc);  
copySafeNodes(dirtyDocument.body(), clean.body(), true, true, true);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.body().childNodes);  
copySafeNodes(dirtyDocument.body(), clean.body(), dirtyDocument.baseURL);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.serverUri);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.documentType);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.body().reader);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.headers() );  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.documentURI);  
copySafeNodes(dirtyDocument.body(), clean.body(), sanitize);  
copySafeNodes(dirtyDocument.body(), clean.body(), template);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.body().parentNode);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.xmlFile);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.bodyHash);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.body().tail);  
copySafeNodes(dirtyDocument.body(), clean.body(), document);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.xml() );  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.links().length);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.innerHtml);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.rootFolder);  
copySafeNodes(dirtyDocument.body(), clean.body(), null); return clean);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.body()...);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.body().type);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.nodes(), true);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.nodes().iterator);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.body().writer);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.headers());  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.nodeList);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.body().contentType);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.documentElement() );  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.files().length);  
copySafeNodes(dirtyDocument.body(), clean.body(), dirtyDocument.charset);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.baseURI(), false);  
copySafeNodes(dirtyDocument.body(), clean.body(), clean.baseURL(), true);  
copySafeNodes(dirtyDocument.body(), clean.body(), dirtyDocument.baseUrl);  
copySafeNodes(clean,dirtyDocument.body(), clean.body());  
copySafeNodes(dirtyDocument,dirtyDocument.body(), clean.body());  
copySafeNodes(null,dirtyDocument.body(), clean.body());  
copySafeNodes(this,dirtyDocument.body(), clean.body());  
copySafeNodes(true,dirtyDocument.body(), clean.body());  
copySafeNodes(document,dirtyDocument.body(), clean.body());  
copySafeNodes(doc,dirtyDocument.body(), clean.body());  
copySafeNodes(clean.body,dirtyDocument.body(), clean.body());  
copySafeNodes(body,dirtyDocument.body(), clean.body());  
copySafeNodes(node,dirtyDocument.body(), clean.body());  
copySafeNodes(false,dirtyDocument.body(), clean.body());  
copySafeNodes(0,dirtyDocument.body(), clean.body());  
copySafeNodes(nodeList,dirtyDocument.body(), clean.body());  
copySafeNodes(path,dirtyDocument.body(), clean.body());  
copySafeNodes(this.body,dirtyDocument.body(), clean.body());  
copySafeNodes(root,dirtyDocument.body(), clean.body());  
copySafeNodes(clean.documentElement,dirtyDocument.body(), clean.body());  
copySafeNodes(data,dirtyDocument.body(), clean.body());  
copySafeNodes(1,dirtyDocument.body(), clean.body());  
copySafeNodes(clean.root,dirtyDocument.body(), clean.body());  
copySafeNodes(nodes,dirtyDocument.body(), clean.body());  
copySafeNodes(clone,dirtyDocument.body(), clean.body());  
copySafeNodes(parent,dirtyDocument.body(), clean.body());  
copySafeNodes(nil,dirtyDocument.body(), clean.body());  
copySafeNodes(node1,dirtyDocument.body(), clean.body());  
copySafeNodes(self,dirtyDocument.body(), clean.body());  
copySafeNodes(targetDocument,dirtyDocument.body(), clean.body());  
copySafeNodes(tree,dirtyDocument.body(), clean.body());  
copySafeNodes(dom,dirtyDocument.body(), clean.body());  
copySafeNodes(dirty,dirtyDocument.body(), clean.body());  
copySafeNodes(innerDocument,dirtyDocument.body(), clean.body());  
copySafeNodes(new Document,dirtyDocument.body(), clean.body());  
copySafeNodes(newDocument,dirtyDocument.body(), clean.body());  
copySafeNodes(children,dirtyDocument.body(), clean.body());  
copySafeNodes(recursive,dirtyDocument.body(), clean.body());  
copySafeNodes(entity,dirtyDocument.body(), clean.body());  
copySafeNodes(clean.nodes,dirtyDocument.body(), clean.body());  
copySafeNodes(element,dirtyDocument.body(), clean.body());  
copySafeNodes(target,dirtyDocument.body(), clean.body());  
copySafeNodes(CLEAN,dirtyDocument.body(), clean.body());  
copySafeNodes(copySafeNodes,dirtyDocument.body(), clean.body());  
copySafeNodes(clear,dirtyDocument.body(), clean.body());  
copySafeNodes(baseUri,dirtyDocument.body(), clean.body());  
copySafeNodes(raw,dirtyDocument.body(), clean.body());  
copySafeNodes(rawDocument,dirtyDocument.body(), clean.body());  
copySafeNodes(dirtyNode,dirtyDocument.body(), clean.body());  
copySafeNodes(session,dirtyDocument.body(), clean.body());  
copySafeNodes(owner,dirtyDocument.body(), clean.body());  
copySafeNodes(nodeIterator,dirtyDocument.body(), clean.body());  
copySafeNodes(empty,dirtyDocument.body(), clean.body());  
copySafeNodes(cleaned,dirtyDocument.body(), clean.body());  
copySafeNodes(oldDocument,dirtyDocument.body(), clean.body());  
copySafeNodes(rootNode,dirtyDocument.body(), clean.body());  
copySafeNodes(nodeMap,dirtyDocument.body(), clean.body());  
copySafeNodes(deepCopy,dirtyDocument.body(), clean.body());  
copySafeNodes(source,dirtyDocument.body(), clean.body());  
copySafeNodes(inner,dirtyDocument.body(), clean.body());  
copySafeNodes(filter,dirtyDocument.body(), clean.body());  
copySafeNodes(content,dirtyDocument.body(), clean.body());  
copySafeNodes(plainDocument,dirtyDocument.body(), clean.body());  
copySafeNodes(env,dirtyDocument.body(), clean.body());  
copySafeNodes(rawNode,dirtyDocument.body(), clean.body());  
copySafeNodes(patch,dirtyDocument.body(), clean.body());  
copySafeNodes(result,dirtyDocument.body(), clean.body());  
copySafeNodes(clean.document,dirtyDocument.body(), clean.body());  
copySafeNodes(documentElement,dirtyDocument.body(), clean.body());  
copySafeNodes(nodeRefs,dirtyDocument.body(), clean.body());  
copySafeNodes(cleanDocument,dirtyDocument.body(), clean.body());  
copySafeNodes(pattern,dirtyDocument.body(), clean.body());  
copySafeNodes(clean.url,dirtyDocument.body(), clean.body());  
copySafeNodes(contents,dirtyDocument.body(), clean.body());  
copySafeNodes(request,dirtyDocument.body(), clean.body());  
copySafeNodes(rootDocument,dirtyDocument.body(), clean.body());  
copySafeNodes(this.nodes,dirtyDocument.body(), clean.body());  
copySafeNodes(dirtyDoc,dirtyDocument.body(), clean.body());  
copySafeNodes(this.root,dirtyDocument.body(), clean.body());  
copySafeNodes(nodeData,dirtyDocument.body(), clean.body());  
copySafeNodes(tempDocument,dirtyDocument.body(), clean.body());  
copySafeNodes(sync,dirtyDocument.body(), clean.body());  
copySafeNodes(window,dirtyDocument.body(), clean.body());  
copySafeNodes(cloneDocument,dirtyDocument.body(), clean.body());  
copySafeNodes( clean,dirtyDocument.body(), clean.body());  
copySafeNodes(diff,dirtyDocument.body(), clean.body());  
copySafeNodes(newNode,dirtyDocument.body(), clean.body());  
copySafeNodes(documentRoot,dirtyDocument.body(), clean.body());  
copySafeNodes(dir,dirtyDocument.body(), clean.body());  
copySafeNodes(parentDocument,dirtyDocument.body(), clean.body());  
copySafeNodes(nodeIds,dirtyDocument.body(), clean.body());  
copySafeNodes(elements,dirtyDocument.body(), clean.body());  
copySafeNodes(id,dirtyDocument.body(), clean.body());  
copySafeNodes(stack,dirtyDocument.body(), clean.body());  
copySafeNodes(ctx,dirtyDocument.body(), clean.body());  
copySafeNodes(nodeSet,dirtyDocument.body(), clean.body());  
copySafeNodes(clean.head,dirtyDocument.body(), clean.body());  
copySafeNodes(2,dirtyDocument.body(), clean.body());  
copySafeNodes( clean,dirtyDocument.body(), clean.body());  
copySafeNodes("",dirtyDocument.body(), clean.body());  
copySafeNodes(nodeLists,dirtyDocument.body(), clean.body());  
copySafeNodes(command,dirtyDocument.body(), clean.body());  
copySafeNodes(CLEAN_NODE,dirtyDocument.body(), clean.body());  
copySafeNodes(null,null,dirtyDocument.body(), clean.body());  
copySafeNodes(internalDocument,dirtyDocument.body(), clean.body());  
copySafeNodes(link,dirtyDocument.body(), clean.body());  
copySafeNodes(config,dirtyDocument.body(), clean.body());  
copySafeNodes(src,dirtyDocument.body(), clean.body());  
copySafeNodes(emptyDocument,dirtyDocument.body(), clean.body());  
copySafeNodes(,dirtyDocument.body(), clean.body());  
copySafeNodes(wrapper,dirtyDocument.body(), clean.body());  
copySafeNodes(options,dirtyDocument.body(), clean.body());  
copySafeNodes(domDocument,dirtyDocument.body(), clean.body());  
copySafeNodes(html,dirtyDocument.body(), clean.body());  
copySafeNodes(documentFragment,dirtyDocument.body(), clean.body());  
copySafeNodes(this.document,dirtyDocument.body(), clean.body());  
copySafeNodes(old,dirtyDocument.body(), clean.body());  
copySafeNodes(sanitize,dirtyDocument.body(), clean.body());  
copySafeNodes(sourceDocument,dirtyDocument.body(), clean.body());  
copySafeNodes(copy,dirtyDocument.body(), clean.body());  
copySafeNodes(documentNode,dirtyDocument.body(), clean.body());  
copySafeNodes(10,dirtyDocument.body(), clean.body());  
copySafeNodes(a,dirtyDocument.body(), clean.body());  
copySafeNodes(nodeVisitor,dirtyDocument.body(), clean.body());  
copySafeNodes(runner,dirtyDocument.body(), clean.body());  
copySafeNodes( dirtyDocument,dirtyDocument.body(), clean.body());  
copySafeNodes(cloneNode,dirtyDocument.body(), clean.body());  
copySafeNodes(nodeChildren,dirtyDocument.body(), clean.body());  
copySafeNodes(document.body,dirtyDocument.body(), clean.body());  
copySafeNodes(tmpDocument,dirtyDocument.body(), clean.body());  
copySafeNodes(r,dirtyDocument.body(), clean.body());  
copySafeNodes(ownerDocument,dirtyDocument.body(), clean.body());  
copySafeNodes(clean.baseURI,dirtyDocument.body(), clean.body());  
copySafeNodes(clean.uri,dirtyDocument.body(), clean.body());  
copySafeNodes(bodyNode,dirtyDocument.body(), clean.body());  
copySafeNodes(head,dirtyDocument.body(), clean.body());  
copySafeNodes(reset,dirtyDocument.body(), clean.body());  
copySafeNodes(text,dirtyDocument.body(), clean.body());  
copySafeNodes(newShell,dirtyDocument.body(), clean.body());  
copySafeNodes(clean.path,dirtyDocument.body(), clean.body());  
copySafeNodes(attributes,dirtyDocument.body(), clean.body());  
copySafeNodes(cleanup,dirtyDocument.body(), clean.body());  
copySafeNodes(client,dirtyDocument.body(), clean.body());  
copySafeNodes(child,dirtyDocument.body(), clean.body());  
copySafeNodes(commit,dirtyDocument.body(), clean.body());  
copySafeNodes(value,dirtyDocument.body(), clean.body());  
copySafeNodes(targetUri,dirtyDocument.body(), clean.body());  
copySafeNodes(simpleNode,dirtyDocument.body(), clean.body());  
copySafeNodes(clean.rootNode,dirtyDocument.body(), clean.body());  
copySafeNodes(internal,dirtyDocument.body(), clean.body());  
copySafeNodes(tmp,dirtyDocument.body(), clean.body());  
copySafeNodes(sourceFile,dirtyDocument.body(), clean.body());  
copySafeNodes(dirtyEntity,dirtyDocument.body(), clean.body());  
copySafeNodes(dup,dirtyDocument.body(), clean.body());  
copySafeNodes(recursiveCopy,dirtyDocument.body(), clean.body());  
copySafeNodes(currentNode,dirtyDocument.body(), clean.body());  
copySafeNodes(ref,dirtyDocument.body(), clean.body());  
copySafeNodes(closure,dirtyDocument.body(), clean.body());  
copySafeNodes(settings,dirtyDocument.body(), clean.body());  
copySafeNodes(nodeRef,dirtyDocument.body(), clean.body());  
copySafeNodes(host,dirtyDocument.body(), clean.body());  
copySafeNodes(nodeA,dirtyDocument.body(), clean.body());  
copySafeNodes(clean.links,dirtyDocument.body(), clean.body());  
copySafeNodes(page,dirtyDocument.body(), clean.body());  
copySafeNodes(paths,dirtyDocument.body(), clean.body());  
copySafeNodes(state,dirtyDocument.body(), clean.body());  
copySafeNodes(this.node,dirtyDocument.body(), clean.body());  
copySafeNodes(thing,dirtyDocument.body(), clean.body());  
copySafeNodes(xml,dirtyDocument.body(), clean.body());  
copySafeNodes(clean,true,dirtyDocument.body(), clean.body());  
copySafeNodes(index,dirtyDocument.body(), clean.body());  
copySafeNodes(temp,dirtyDocument.body(), clean.body());  
copySafeNodes(merge,dirtyDocument.body(), clean.body());  
copySafeNodes(copySafeNode,dirtyDocument.body(), clean.body());  
copySafeNodes(elem,dirtyDocument.body(), clean.body());  
copySafeNodes(nodeId,dirtyDocument.body(), clean.body());  
copySafeNodes(x,dirtyDocument.body(), clean.body());  
copySafeNodes(uri,dirtyDocument.body(), clean.body());  
copySafeNodes(url,dirtyDocument.body(), clean.body());  
copySafeNodes(values,dirtyDocument.body(), clean.body());  
copySafeNodes(nodePath,dirtyDocument.body(), clean.body());  
copySafeNodes(clean.baseURL,dirtyDocument.body(), clean.body());  
copySafeNodes(c,dirtyDocument.body(), clean.body());  
copySafeNodes(schema,dirtyDocument.body(), clean.body());  
copySafeNodes(d,dirtyDocument.body(), clean.body());  
copySafeNodes(allNodes,dirtyDocument.body(), clean.body());  
copySafeNodes(clean,null,dirtyDocument.body(), clean.body());  
copySafeNodes(dummyDocument,dirtyDocument.body(), clean.body());  
copySafeNodes(query,dirtyDocument.body(), clean.body());  
copySafeNodes(nodeCache,dirtyDocument.body(), clean.body());  
copySafeNodes(props,dirtyDocument.body(), clean.body());  
copySafeNodes(blob,dirtyDocument.body(), clean.body());  
copySafeNodes(nodeArray,dirtyDocument.body(), clean.body());  
copySafeNodes(copyNodes,dirtyDocument.body(), clean.body());  
copySafeNodes(clean.attributes,dirtyDocument.body(), clean.body());  
copySafeNodes(currentDocument,dirtyDocument.body(), clean.body());  
copySafeNodes(deep,dirtyDocument.body(), clean.body());  
copySafeNodes(safeNodes,dirtyDocument.body(), clean.body());  
copySafeNodes(nodeNodes,dirtyDocument.body(), clean.body());  
copySafeNodes(undefined,dirtyDocument.body(), clean.body());  
copySafeNodes(properties,dirtyDocument.body(), clean.body());  
copySafeNodes(new Document(),dirtyDocument.body(), clean.body());  
copySafeNodes(file,dirtyDocument.body(), clean.body());  
copySafeNodes(clean._nodes,dirtyDocument.body(), clean.body());  
copySafeNodes(logger,dirtyDocument.body(), clean.body());  
copySafeNodes(http,dirtyDocument.body(), clean.body());  
copySafeNodes(nodeContent,dirtyDocument.body(), clean.body());  
copySafeNodes(childNodes,dirtyDocument.body(), clean.body());  
copySafeNodes(cursor,dirtyDocument.body(), clean.body());  
copySafeNodes(entities,dirtyDocument.body(), clean.body());  
copySafeNodes(5,dirtyDocument.body(), clean.body());  
copySafeNodes(7,dirtyDocument.body(), clean.body());  
copySafeNodes(it,dirtyDocument.body(), clean.body());  
copySafeNodes(process,dirtyDocument.body(), clean.body());  
copySafeNodes(plain,dirtyDocument.body(), clean.body());  
copySafeNodes(100,dirtyDocument.body(), clean.body());  
copySafeNodes(simple,dirtyDocument.body(), clean.body());  
copySafeNodes(container,dirtyDocument.body(), clean.body());  
copySafeNodes(nodelist,dirtyDocument.body(), clean.body());  
copySafeNodes(repo,dirtyDocument.body(), clean.body());  
copySafeNodes(documentBuilder,dirtyDocument.body(), clean.body());  
copySafeNodes(documentElement,dirtyDocument.body(), clean.body());  
copySafeNodes(6,dirtyDocument.body(), clean.body());  
copySafeNodes(clean.elements,dirtyDocument.body(), clean.body());  
copySafeNodes(branch,dirtyDocument.body(), clean.body());  
copySafeNodes(nodeKeys,dirtyDocument.body(), clean.body());  
copySafeNodes(registry,dirtyDocument.body(), clean.body());  
copySafeNodes(parentNode,dirtyDocument.body(), clean.body());  
copySafeNodes(stub,dirtyDocument.body(), clean.body());  
copySafeNodes(localDocument,dirtyDocument.body(), clean.body());  
copySafeNodes(shell,dirtyDocument.body(), clean.body());  
copySafeNodes(dirtyElement,dirtyDocument.body(), clean.body());  
copySafeNodes(bodyElement,dirtyDocument.body(), clean.body());  
copySafeNodes(fullDocument,dirtyDocument.body(), clean.body());  
copySafeNodes(lines,dirtyDocument.body(), clean.body());  
copySafeNodes(tidy,dirtyDocument.body(), clean.body());  
copySafeNodes(CLEAN_ATTRIBUTES,dirtyDocument.body(), clean.body());  
copySafeNodes(nodeNames,dirtyDocument.body(), clean.body());  
copySafeNodes(dirtyContent,dirtyDocument.body(), clean.body());  
copySafeNodes(patchNode,dirtyDocument.body(), clean.body());  
copySafeNodes(true,true,dirtyDocument.body(), clean.body());  
copySafeNodes(this.documentElement,dirtyDocument.body(), clean.body());  
copySafeNodes(internalNode,dirtyDocument.body(), clean.body());  
copySafeNodes(simpleDocument,dirtyDocument.body(), clean.body());  
copySafeNodes(docFragment,dirtyDocument.body(), clean.body());  
copySafeNodes(cloneDeep,dirtyDocument.body(), clean.body());  
copySafeNodes(clean.xml,dirtyDocument.body(), clean.body());  
copySafeNodes(clean.xpath,dirtyDocument.body(), clean.body());  
copySafeNodes(shallowCopy,dirtyDocument.body(), clean.body());  
copySafeNodes(clean._root,dirtyDocument.body(), clean.body());  
copySafeNodes(doc.body,dirtyDocument.body(), clean.body());  
copySafeNodes(clean.tree,dirtyDocument.body(), clean.body());  
copySafeNodes(documentCopy,dirtyDocument.body(), clean.body());  
), clean.body()); copySafeNodes(dirtyDocument.body), clean.body());  
), clean.body()); copySafeNodes(clean.body(), clean.body());  
), clean.body()); copySafeNodes(clean.body()), clean.body());  
), clean.body()); copySafeNodes(clean.body(...), clean.body());  
), clean.body()); copySafeNodes(clean.body(), clean), clean.body());  
), clean.body()); copySafeNodes(dirtyDocument.body(), clean.body());  
), clean.body()); copySafeNodes((Document) clean), clean.body());  
), clean.body()); copySafeNodes(clean.body(), (), clean.body());  
), clean.body()); copySafeNodes(dirtyDocument), clean.body());  
), clean.body()); copySafeNodes((dirtyDocument), clean.body());  
), clean.body()); copySafeNodes((Document) dirtyDocument), clean.body());  
), clean.body()); copySafeNodes(clean.body(),), clean.body());  
), clean.body()); copySafeNodes((Document)dirtyDocument), clean.body());  
), clean.body()); CopySafeNodes(dirtyDocument.body), clean.body());  
), clean.body()); copySafeNodes(dirtyDocument.body()), clean.body());  
), clean.body());), clean.body());  
), clean.body());  copySafeNodes(clean.body), clean.body());  
), clean.body()); copySafeNodes(clean.body(), null), clean.body());  
), clean.body());  copySafeNodes(dirtyDocument.body), clean.body());  
), clean.body()); copySafeNodes((Document), clean.body());  
), clean.body()); copySafeNodes(clean.body([]), clean.body());  
), clean.body()); copySafeNodes((Document)clean), clean.body());  
), clean.body()); copySafeNodes(clean), clean.body());  
), clean.body()); copySafeNodes((document), clean.body());  
), clean.body()); copySafeNodes(clean.body();), clean.body());  
), clean.body()); copySafeNode(dirtyDocument.body), clean.body());  
), clean.body()); copySafeNodes(clean(dirtyDocument), clean.body());  
), clean.body()); copySafeNodes(clean.body((), clean.body());  
), clean.body()); //copySafeNodes(dirtyDocument.body), clean.body());  
), clean.body()); copySafeNodes((dirtyDocument.body), clean.body());  
), clean.body());copySafeNodes(dirtyDocument.body(), clean.body());  
), clean.body()); copyOfSafeNodes(dirtyDocument.body), clean.body());  
), clean.body()); copySafeNodes((doc), clean.body());  
), clean.body()); //copySafeNodes(clean.body), clean.body());  
), clean.body()); copySafeNodes(clean.bodyAST#argument_list#Left(), clean.body());  
), clean.body());  copySafeNodes(dirtyDocument), clean.body());  
), clean.body());  copySafeNodes(clean.body(), clean.body());  
), clean.body()); copySafeNodes(((Document) dirtyDocument), clean.body());  
), clean.body()); copySafeNodes(clean.bodyString(), clean.body());  
), clean.body()); copySafeElements(dirtyDocument.body), clean.body());  
), clean.body()); CopySafeNodes(clean.body(), clean.body());  
), clean.body()); copySafeNodes(clean.bodyAsString(), clean.body());  
), clean.body()); copySafeNodes(dirtyDocument.root), clean.body());  
), clean.body()); copySafeNodes(((Document)dirtyDocument), clean.body());  
), clean.body()); copySafeNodes(dirtyDocument(clean), clean.body());  
), clean.body()); copySafeNodes(dirtyDocument.body(),), clean.body());  
), clean.body()); copySafeNodes((String), clean.body());  
), clean.body()); copySafeNodes(clean.body), clean.body());  
), clean.body()); }), clean.body());  
), clean.body()); copySafeNodes(dirtyDocument.url), clean.body());  
), clean.body()); copySafeNodes(new Document(dirtyDocument), clean.body());  
), clean.body()); System.out.println(clean), clean.body());  
), clean.body()); copySafeNodes((clean), clean.body());  
), clean.body()); copySafeNodes(dirtyDocument.body(), clean.body());  
), clean.body()); copySafeNodes(dirtyDocument.documentElement), clean.body());  
), clean.body()); copySafeNodes(new Document(clean), clean.body());  
), clean.body()); copySafeNodes(clean.bodyElement(), clean.body());  
), clean.body()); copySafeNodes(document.body(), clean.body());  
), clean.body());copySafeNodes(dirtyDocument.body()), clean.body());  
), clean.body()); //copySafeNodes(clean.body(), clean.body());  
), clean.body()); copySafeNodes(clean.body(_), clean.body());  
), clean.body()); copySafeNodes(dirtyDocument.(Document), clean.body());  
), clean.body());  copySafeNodes(dirtyDocument(), clean.body());  
), clean.body()); copySafeNodes(clean.bodyAsStream), clean.body());  
), clean.body()); copySafeNodes(clean.body (), clean.body());  
), clean.body()); copySafeNodes(dirtyDocument.path), clean.body());  
), clean.body()); printSafeNodes(dirtyDocument.body), clean.body());  
), clean.body()); copySafeNodes((Document) clean.body), clean.body());  
), clean.body()); copySafeNodes((Document)null), clean.body());  
), clean.body()); copySafeNodes(clean.body(), true), clean.body());  
), clean.body()); Validate.notNull(dirtyDocument), clean.body());  
), clean.body()); copySafeNodes((body), clean.body());  
), clean.body()); copySafeNodes(dirtyDocument, clean), clean.body());  
), clean.body()); copySafeNodes((new Document(dirtyDocument), clean.body());  
), clean.body()); Validate.notNull(clean), clean.body());  
), clean.body()); copySafeNodes(dirtyDocument.body()), clean.body());  
), clean.body()); copySafeNodes((clean.body()), clean.body());  
), clean.body()); copySafeNodes(new Document(null), clean.body());  
), clean.body()); printSafeNodes(clean.body(), clean.body());  
), clean.body()); copySafeNodes((Object), clean.body());  
), clean.body());//copySafeNodes(dirtyDocument.body), clean.body());  
), clean.body()); CopySafeNodes(clean.body()), clean.body());  
), clean.body()); copySafeNodes((Document) null), clean.body());  
), clean.body());  copySafeNodes(clean.body()), clean.body());  
), clean.body()); copySafeNodes(dirtyDocument.body(...), clean.body());  
), clean.body()); copySafeNodes(dirtyDocument.html), clean.body());  
), clean.body()); copySafeNodes((Document)clean.body), clean.body());  
), clean.body()); copySafeNode(clean.body(), clean.body());  
), clean.body()); copySafeNodes(clean.bodyDocument(), clean.body());  
), clean.body()); copySafeNodes(clean.bodyObject(), clean.body());  
), clean.body()); copySafeNodes(clean.bodyNode(), clean.body());  
), clean.body()); copySafeNodes(dirtyDocument.nodes), clean.body());  
), clean.body()); copySafeNodes(clean.body());), clean.body());  
), clean.body()); copySafeNodes((), clean.body());  
), clean.body()); copySafeNodes(clean.body(), 0), clean.body());  
), clean.body()); deleteSafeNodes(dirtyDocument.body), clean.body());  
), clean.body()); copySafeNodes(dirtyDocument.head), clean.body());  
), clean.body()); copySafeNodes(clean.body(","), clean.body());  
), clean.body()); copySafeNodes(clean.rootUri), clean.body());  
), clean.body()); copySafeNodes(clean.url(), clean.body());  
), clean.body()); copySafeNodes(clean.bodyHash), clean.body());  
), clean.body()); copySafeNodes((new Document), clean.body());  
), clean.body());copySafeNodes(clean.body(), clean), clean.body());  
), clean.body()); copySafeNodes(body(dirtyDocument), clean.body());  
), clean.body()); copySafeNodes(clean.documentElement(), clean.body());  
), clean.body()); copySafeNodes((Element), clean.body());  
), clean.body()); copySafeNodes(clean.baseUri()), clean.body());  
), clean.body()); copySafeNodes(clean.body(), 1), clean.body());  
), clean.body()); copySafeNodes(dirtyDocument.document), clean.body());  
), clean.body()); copySafeNodes(clean.url(...), clean.body());  
), clean.body()); printSafeNodes((dirtyDocument), clean.body());  
), clean.body()); copySafeNodes(clean.body(), ...), clean.body());  
), clean.body()); copySafeNodes(clean.body().(Document), clean.body());  
), clean.body()); copySafeNodes( dirtyDocument.body), clean.body());  
), clean.body()); printSafeNodes(clean.body()), clean.body());  
), clean.body()); copySafeElements(clean.body(), clean.body());  
), clean.body()); copySafeNodes(()), clean.body());  
), clean.body()); copySafeNodes($(dirtyDocument), clean.body());  
), clean.body()); copySafeNodes(clean.baseUri(), clean.body());  
), clean.body());copySafeNodes(dirtyDocument.body(), clean), clean.body());  
), clean.body()); copySafeNodes(dirtyDocument.body((), clean.body());  
), clean.body()); copySafeNodes(this.body(), clean.body());  
), clean.body()); copySafeNodes(dirtyDocument(null), clean.body());  
), clean.body()); copySafeNodes((Document)(dirtyDocument), clean.body());  
), clean.body()); copySafeNodes((DocumentFragment), clean.body());  
), clean.body()); copySafeNode(clean.body()), clean.body());  
), clean.body()); copySafeNodes(clean.body()(*), clean.body());  
), clean.body()); mergeSafeNodes(dirtyDocument.body), clean.body());  
), clean.body());  copySafeNodes((Document), clean.body());  
), clean.body()); copySafeLines(dirtyDocument.body), clean.body());  
), clean.body()); copySafeNodes(doc.body(), clean.body());  
), clean.body()); copySafeNodes(clean.baseUri), clean.body());  
), clean.body()); copySafeNodes(dirtyDocument.uri), clean.body());  
), clean.body()); copySafeNodes(clean.body(), ()), clean.body());  
), clean.body()); copySafeNodes(dirtyDocument.baseURL), clean.body());  
), clean.body()); copySafeNodes(clean.body(()), clean.body());  
), clean.body()); copySafeNodes(clean.rootUrl), clean.body());  
), clean.body());  copySafeNodes(clean), clean.body());  
), clean.body()); copySafeNodes(clean.bodyText(), clean.body());  
), clean.body()); //copySafeNodes(dirtyDocument), clean.body());  
), clean.body()); copySafeNodes(doc(dirtyDocument), clean.body());  
), clean.body()); copySafeNodes(null), clean.body());  
), clean.body()); saveSafeNodes(dirtyDocument.body), clean.body());  
), clean.body());copySafeNodes(clean.body(), clean.body());  
), clean.body()); copySafeNodes(clean.body("")), clean.body());  
), clean.body()); copySafeNodes(clean.bodyArray(), clean.body());  
), clean.body()); copySafeNodes(cleanDocument.body), clean.body());  
), clean.body()); copySafeNodes(dirtyDocument.baseUri), clean.body());  
), clean.body()); copySafeNodes(dirtyDocument.xml), clean.body());  
), clean.body()); copySafeNodes(((Document) clean), clean.body());  
), clean.body()); copySafeNodes(clean.body());(), clean.body());  
), clean.body()); //copySafeNodes(dirtyDocument(), clean.body());  
), clean.body()); copySafeNodes(dirtyDocument.baseURI), clean.body());  
), clean.body()); //copySafeNodes(dirtyDocument.body), clean.body());  
), clean.body()); copySafeNodes(clean.bodyArray), clean.body());  
), clean.body()); copySafeNodes(clean.bodyAsString()), clean.body());  
), clean.body()); copyOfSafeNodes(clean.body(), clean.body());  
), clean.body()); copySafeNodes(document.body()), clean.body());  
), clean.body()); copySafeNodes(clean.bodyBuilder(), clean.body());  
), clean.body()); _copySafeNodes(clean.body), clean.body());  
), clean.body()); copySafeNodes(dirtyDocument.body();), clean.body());  
), clean.body()); copySafeNodes((Document doc), clean.body());  
), clean.body()); copyOfSafeNodes(clean.body()), clean.body());  
), clean.body()); copySafeNodes(dirtyDocument.content), clean.body());  
), clean.body()); copySafeNodes(clean.bodyBytes(), clean.body());  
), clean.body()); //copySafeNodes((dirtyDocument), clean.body());  
), clean.body()); copySafeNodes(clean.bodyBlob(), clean.body());  
), clean.body()); doCopySafeNodes(dirtyDocument), clean.body());  
), clean.body()); ), clean.body());  
), clean.body()); copySafeNodes(clean.bodyContent(), clean.body());  
), clean.body()); copySafeNodes((MutableDocument), clean.body());  
), clean.body()); copySafeNodes((PlainDocument), clean.body());  
), clean.body()); copySafeNodes(clean.bodyAsStream(), clean.body());  
), clean.body()); copySafeNodes(clean.bodyString(...), clean.body());  
), clean.body()); copySafeNodes(() -> clean), clean.body());  
), clean.body()); copySafeNodes(clean.nodes(), clean.body());  
), clean.body()); copySafeNodes(clean.body(), this), clean.body());  
), clean.body());  copySafeNodes((dirtyDocument), clean.body());  
), clean.body()); (clean.body(dirtyDocument), clean.body());  
), clean.body()); copySafeNodes(clean.body($), clean.body());  
), clean.body()); //copySafeNodes(clean.body()), clean.body());  
), clean.body()); copySafeNodes(new Document(document), clean.body());  
), clean.body()); copySafeNodes(dirtyDocument.body(), clean), clean.body());  
), clean.body()); copySafeNodes(clean.bodyFile(), clean.body());  
), clean.body()); copySafeLines(clean.body(), clean.body());  
), clean.body()); copySafeNodes(clean.body().iterator), clean.body());  
), clean.body()); copySafeNodes(body(clean), clean.body());  
), clean.body()); removeSafeNodes(dirtyDocument.body), clean.body());  
), clean.body()); copySafeNodes(clean.bodyHtml), clean.body());  
), clean.body()); copySafeNodes(clean.bodyShallow), clean.body());  
), clean.body()); copySafeNodes(clean.body(null), clean.body());  
), clean.body()); copySafeNodes(dirtyDocument.query), clean.body());  
), clean.body()); copySafeNodes(clean.body(), clean), clean.body());  
), clean.body()); copySafeNodes((Document newDocument), clean.body());  
), clean.body()); copySafeNodes(clean.body("",), clean.body());  
), clean.body()); copySafeNodes(clean.bodyString), clean.body());  
), clean.body()); copySafeNodes(dirtyDocument.links), clean.body());  
), clean.body());copySafeNodes(clean.body(true), clean.body());  
), clean.body());copySafeNodes(dirtyDocument.body(),), clean.body());  
), clean.body()); //copySafeNodes(clean.body(...), clean.body());  
), clean.body()); copySafeNodes(clean.bodyHash(), clean.body());  
), clean.body()); copySafeNodes((void), clean.body());  
), clean.body()); copySafeNodes(diff(dirtyDocument), clean.body());  
), clean.body()); copySafeChildNodes(dirtyDocument.body), clean.body());  
), clean.body()); copySafeNodes(clean.body(true), clean.body());  
), clean.body()); mergeSafeNodes(clean.body(), clean.body());  
), clean.body()); copySafeNodes(clean.body(), false), clean.body());  
), clean.body()); copySafeChildren(dirtyDocument.body), clean.body());  
), clean.body()); clean(dirtyDocument), clean.body());  
), clean.body()); copySafeElements(clean.body()), clean.body());  
), clean.body()); copySafeProperties(dirtyDocument.body), clean.body());  
), clean.body()); copySafeNodes(clean.bodyAsArray(), clean.body());  
), clean.body()); copySafeNodes((Document baseDocument), clean.body());  
), clean.body()); copySafeNodes(clean.bodyTree), clean.body());  
), clean.body()); copySafeNodes(clean.bodyDeep), clean.body());  
), clean.body()); copySafeNodes(document(dirtyDocument), clean.body());  
), clean.body());copySafeNodes(dirtyDocument.body(), (), clean.body());  
), clean.body());  copySafeNodes(clean.body(...), clean.body());  
), clean.body()); copySafeNodes((Document) (dirtyDocument), clean.body());  
), clean.body()); addSafeNodes(dirtyDocument.body), clean.body());  
), clean.body()); // copySafeNodes(dirtyDocument.body), clean.body());  
), clean.body()); copySafeNodes(clean.body().stream), clean.body());  
), clean.body()); copySafeNodes(dirtyDocument.files), clean.body());  
), clean.body()); copySafeNodes(clean.body().document), clean.body());  
), clean.body()); copySafeNodes(document.body(), clean), clean.body());  
), clean.body()); copySafeNodes((ShallowDocument), clean.body());  
), clean.body()); copySafeNodes(dirtyDocument(document), clean.body());  
), clean.body()); copySafeNodes(clean.bodyObject), clean.body());  
), clean.body()); CopySafeNodes(clean.body(...), clean.body());  
), clean.body()); copySafeNodes((new Document()).body), clean.body());  
), clean.body()); copySafeNodes(clean.bodyAsync), clean.body());  
), clean.body()); copySafeAttributes(dirtyDocument.attributes), clean.body());  
), clean.body()); copySafeNodes(clean.body(), clear), clean.body());  
), clean.body()); Validate.notNull(clean.body(), clean.body());  
), clean.body()); copySafeNodes((Document.body()), clean.body());  
), clean.body()); copySafeNodes(clean.body().(*Document), clean.body());  
), clean.body()); copySafeNodes(dirtyDocument.tree), clean.body());  
), clean.body());  copySafeNodes(dirtyDocument.body), clean.body());  
), clean.body()); copySafeNodes( clean.body(), clean.body());  
), clean.body()); System.out.println((clean), clean.body());  
), clean.body()); copySafeNodes(dirtyDocument._body), clean.body());  
), clean.body()); copySafeNodes(clean.body().uri), clean.body());  
), clean.body()); copySafeNodes(clean.body() (), clean.body());  
), clean.body()); deepCopy(dirtyDocument.body(), clean.body());  
), clean.body()); CopySafeNodes(dirtyDocument.body(), clean.body());  
), clean.body()); copySafeNodes(clone(dirtyDocument), clean.body());  
), clean.body()); copySafeNodes(!dirtyDocument.body), clean.body());  
), clean.body()); copySafeNodes(clean.bodyElement), clean.body());  
), clean.body()); addSafeNodes(clean.body(), clean.body());  
), clean.body());(clean), clean.body());  
)); Validate.notNull(clean.body());  
)); copySafeNodes(clean.body(),));  
)); copySafeNodes(dirtyDocument.body));  
)); Validate.notNull(clean(dirtyDocument));  
)); copySafeNodes(dirtyDocument, clean));  
)); System.out.println(clean));  
)); Validate.notNull(clean));  
)); }));  
)); Validate.notNull(dirtyDocument(clean));  
)); //System.out.println(clean));  
)); copySafeNodes(clean.body());  
)); copySafeNodes(dirtyDocument(clean));  
)); clean.body(clean.body());  
)); validate.notNull(clean.body());  
)); Validate.notEmpty(clean.body));  
)); Validate.notNull(dirtyDocument.body));  
)); //Validate.notNull(clean));  
)); CopySafeNodes(dirtyDocument.body));  
)); //Validate.notNull(clean(dirty));  
));));  
)); Validate.notNull(clean.document());  
)); Validate.notNull(clean, clean());  
)); Validate.notNull(clean.body(());  
)); Validate.notNull(clean.(Document));  
)); Validate.notNull(clean.(Shell));  
)); clean.body(body(dirtyDocument));  
)); validate(clean.body(dirtyDocument));  
)); Validate.notNull(clean.baseUri));  
)); validate.notNull(clean(dirtyDocument));  
)); System.out.println(clean());  
)); Validate.notNull(dirtyDocument));  
)); copySafeNodes(clean, clean());  
)); Validate.notNull(clean.documentElement());  
)); Validate.notNull(clean.rootUri));  
)); Validate.notNull(clean.path());  
));  copySafeNodes(clean.body));  
)); Validate.isTrue(clean.exists());  
)); CopySafeNodes(dirtyDocument, clean));  
)); Validate.noNullElements(clean));  
)); CopySafeNodes(clean.body(),));  
)); Validate.notNull(clean.url());  
)); copySafeNodes(clean, body());  
)); Validate.notNull(clean.baseURI());  
)); Validate.notBlank(clean.body));  
)); Validate.notNull(dirtyDocument, clean));  
)); Validate.notNull(dirtyDocument.(Shell));  
)); (clean.body(dirtyDocument));  
)); //Validate.notNull(clean(clean));  
)); Validate.notNull(dirtyDocument.(Document));  
)); Validate.isTrue(!clean.isEmpty());  
)); dirtyDocument.body(clean.body));  
)); Validate.notNull(clean.nodes());  
)); Validate.isTrue(isValid(clean));  
)); copySafeNodes(dirtyDocument));  
)); Validate.notNull(clean.links());  
)); Validate.isTrue(clean.body());  
)); clean.body(dirtyDocument.body));  
)); Assert.notNull(clean.body());  
)); validate.notNull(clean));  
)); clean.body(copySafeNodes());  
)); Validate.isTrue(clean.isEmpty());  
)); //Validate.notNull(dirtyDocument));  
)); Validate.notNull(clean.root());  
)); printSafeNodes(clean.body());  
)); validate(clean(dirtyDocument));  
)); validate(dirtyDocument.body(clean));  
)); ));  
)); Validate.notNull(clean.body(_));  
)); //Validate.notNull(clean.(Shell));  
)); validate.notEmpty(clean.body));  
)); clean(new Document(dirtyDocument));  
)); //Validate.notNull(clean.body));  
)); //Validate.notNull(clean(document));  
)); Validate.notNull(clean.attributes());  
)); Validate.isTrue(!clean.isEmpty));  
));  System.out.println(clean));  
)); System.err.println(clean));  
)); Validate.notEmpty(clean(dirty));  
)); Validate.notNull(clean.baseURL());  
)); Validate.notNull(clean.documents());  
)); copySafeNodes(dirtyDocument,clean));  
)); Validate.notNull(clean.body(...));  
)); Validate.notNull(clean.uri());  
)); this.body(clean.body());  
)); clean.body(sanitize(dirtyDocument));  
)); safeNodes(dirtyDocument.body(),));  
));  copySafeNodes(dirtyDocument));  
)); Validate.notNull(cleanDocument(dirty));  
)); Validate.isTrue(!isEmpty(clean));  
)); Validate.notNull(clean, (String));  
)); Validate.notNull(clean (dirtyDocument));  
)); copySafeNodes(clean, (Document));  
)); clean.body(new Document(body));  
)); System.out.println((clean));  
)); validate(clean, validate(dirtyDocument));  
));  copySafeNodes(clean(dirty));  
)); clean.body(new String(body));  
)); Validate.isTrue(clean.isEmpty));  
)); //Validate.notNull(clean.(Document));  
)); Validate.notNull(clean.xml());  
)); safeNodes(clean.body(), clean));  
)); Validate.notNull(clean.headers());  
)); //Validate.notEmpty(clean));  
)); copySafeNodes(clean(dirtyDocument));  
)); validate.notBlank(clean.body));  
)); copySafeNode(dirtyDocument.body));  
));  copySafeNodes(clean, clean));  
)); copySafeNodes(new Document(clean));  
)); CopySafeNodes(clean.body());  
)); copySafeNodes(clean.nodes());  
)); dirtyDocument.body(clean));  
)); validate(clean.body(null));  
));  Validate.notNull(clean(dirty));  
)); Check.notNull(clean.body());  
)); Validate.notNull(clean.body()));  
)); Validate.notNull(clean.content());  
)); copySafeNode(clean.body(),));  
)); validate.notNull(dirtyDocument(clean));  
)); safeNodes(dirtyDocument.body());  
)); Validate.notNull(clean.head());  
)); Validate.notNull(clean,(clean));  
)); System.out.println(toString());  
)); //Validate.notNull(clean(this));  
)); clean.body(getBody(dirtyDocument));  
)); validate(clean.body(body));  
)); copySafeAttributes(clean.attributes());  
)); copySafeElements(dirtyDocument.body));  
)); CopySafeNodes(dirtyDocument(clean));  
)); Validate.notNull(clean.body(),));  
)); copySafeNodes(dirtyDocument.nodes));  
)); validate(clean.body(true));  
)); Validate.isTrue(isEmpty(clean));  
)); Validate.notEmpty(clean.path));  
)); appendSafeNodes(clean.body(),));  
)); document.body(clean.body());  
)); Validate.notNull(clean, body());  
)); System.out.println(sanitize());  
));  Validate.notNull(clean));  
)); copySafeNodes(clean, new Document));  
));copySafeNodes(dirtyDocument.body(),));  
)); removeSafeNodes(clean.body());  
)); copyOf(dirtyDocument.body(), clean));  
)); console.log(clean.toString());  
)); copySafeNodes(new Document(), clean));  
)); Validate.notNull(clean, clean));  
)); Validate.notNull(dirtyDocument.baseURI));  
)); clean.body(new StringReader(body));  
)); Validate.notNull(clean.attachments());  
)); System.out.println(String());  
)); Validate.notNull(clean.toString());  
)); Validate.notNull(clean, (clean));  
)); Validate.notNull(clean.getBody());  
)); Document.createShell(clean.body));  
)); copySafeNode(dirtyDocument, clean));  
)); Validate.isTrue(clean.isEmpty()));  
)); safeNodes(clean.body(true));  
)); Validate.notEmpty(clean.url));  
)); Validate.notNull(clean.body));  
)); copySafeNodes(clean, document());  
));  copySafeNodes(dirtyDocument());  
)); Validate.notNull(clean.files());  
)); validate(clean.body(this));  
)); Validate.notNull(clean, cleanError));  
)); Validate.notNull(clean.text());  
)); //Validate.notNull(dirtyDocument());  
)); Validate.notNull(clean.doc());  
)); copySafeNodes(clean, clean));  
)); validate(dirtyDocument, validate(clean));  
)); copySafeNodes(dirtyDocument.(Shell));  
)); Validate.notNull(clean.rootUrl));  
)); copySafeNodes(dirtyDocument.root));  
)); copySafeNodes(clean.root());  
)); Validate.notNull(clean.basePath());  
)); clean.body(clean.body(...));  
)); Validate.notEmpty(clean));  
)); mergeSafeNodes(clean.body(),));  
)); Validate.notNull(clean.rootNode());  
)); Validate.notNull(cleanDocument(clean));  
)); Copy(dirtyDocument.body(), clean));  
)); Validate.notEmpty(clean(clean));  
)); Validate.notNull(clean.baseUrl());  
)); Validate.isTrue(dirtyDocument(clean));  
)); validate.notNull(dirtyDocument, clean));  
)); (dirtyDocument.body(clean));  
)); //copySafeNodes(clean.body));  
)); Validate.notNull(clean.session());  
)); Validate.notNull(clean.header());  
)); Validate.isTrue(clean(dirtyDocument));  
)); Validate.notNull(clean.version());  
)); validate.isTrue(clean.exists());  
)); console.log(clean.body());  
)); Validate.isTrue(clean.isValid());  
)); clean.body(clean(dirtyDocument));  
)); addSafeNodes(clean.body(),));  
)); Validate.notNull(clean.tree());  
)); Validate.notBlank(clean.title));  
)); validate(dirtyDocument.body(), clean));  
)); Validate.notEmpty(dirtyDocument));  
)); validate(clean.body(clean));  
)); Validate.notNull(clean.body(!));  
)); validate.notNull(clean, clean());  
)); deleteSafeNodes(clean.body());  
)); copySafeNodes(clean.root(),));  
)); copySafeNode(clean.body());  
)); Validate.isNotEmpty(clean.body());  
)); Validate.notNull(cleanDocument.body));  
)); Validate.notNull(dirtyDocument(this));  
)); copySafeAttributes(dirtyDocument.attributes));  
)); copySafeNodes(clean, (Node));  
)); clean.body(this.body());  
)); Validate.notNull(clean.encoding());  
));  Validate.notNull(clean.body));  
)); copySafeNodes(dirtyDocument,(clean));  
)); clean.setBody(clean.body());  
)); copySafeElements(clean.body(),));  
)); Validate.notNull(clean, clean(...));  
)); //System.out.println((clean));  
)); Validate.notEmpty(dirtyDocument());  
)); copySafeNodes(dirtyDocument, ());  
)); Validate.notNull(clean(cleanDocument));  
)); Validate.notNull(dirtyDocument (clean));  
)); validate.isNotEmpty(clean.body());  
)); Validate.notNull(clean.xpath());  
)); Validate.notNull(clean.id());  
)); copySafeNodes(this, clean));  
)); clean(dirtyDocument.body(true));  
)); Validate.notNull(clean.baseURI));  
)); validateNotEmpty(clean.body(null));  
)); clean.body(copySafeNodes(...));  
)); Validate.notNull(clean.charset());  
)); Validate.noNullElements(clean());  
)); Validate.notNull(dirtyDocument.baseURL));  
)); Validate.notNull(clean.(ShellNode));  
)); Validate.notNull(clean.contentType());  
)); validate.notNull(clean, (String));  
)); Validate.isTrue(dirtyDocument.body));  
)); copySafeNodes(clean.body(());  
)); Validate.notNull(clean.body("",));  
)); Safe.copySafeNodes(clean));  
)); Validate.isTrue(!clean.isEmpty()));  
)); Validate.notNull(clean.host());  
)); Validate.notNull(clean.parent());  
)); Validate.isNull(clean.body());  
)); Validate.notNull(!clean.body());  
)); Validate.notNull(clean.bodyAsString));  
)); Validate.isTrue(clean.exists()));  
)); Validate.notNull(clean.command());  
)); copySafeNodes(dirtyDocument.documentElement));  
)); copySafeNodes(clean,body());  
)); ensureSafeNodes(clean.body(),));  
copySafeNodes(dirtyDocument.body(), clean.body());  
copySafeNodes(clean.body(), clean.body());  
copySafeNodes(doc.body(), clean.body());  
copySafeNodes(document.body(), clean.body());  
copySafeNodes(this.body(), clean.body());  
copySafeNodes( dirtyDocument.body(), clean.body());  
copySafeNodes(dirtyDoc.body(), clean.body());  
copySafeNodes(dirty.body(), clean.body());  
copySafeNodes(oldDocument.body(), clean.body());  
copySafeNodes(cleanDocument.body(), clean.body());  
copySafeNodes(isDirtyDocument.body(), clean.body());  
copySafeNodes(newDocument.body(), clean.body());  
copySafeNodes(body.body(), clean.body());  
copySafeNodes(DirtyDocument.body(), clean.body());  
copySafeNodes(Dirty.body(), clean.body());  
copySafeNodes(patchDocument.body(), clean.body());  
copySafeNodes(targetDocument.body(), clean.body());  
copySafeNodes(entity.body(), clean.body());  
copySafeNodes(dirtyFile.body(), clean.body());  
copySafeNodes(node.body(), clean.body());  
copySafeNodes(data.body(), clean.body());  
copySafeNodes(innerDocument.body(), clean.body());  
copySafeNodes(diff.body(), clean.body());  
copySafeNodes(dirtyNode.body(), clean.body());  
copySafeNodes(DIRTY.body(), clean.body());  
copySafeNodes(dirtyDocument .body(), clean.body());  
copySafeNodes(modifiedDocument.body(), clean.body());  
copySafeNodes(dir.body(), clean.body());  
copySafeNodes(path.body(), clean.body());  
copySafeNodes(patch.body(), clean.body());  
copySafeNodes(rawDocument.body(), clean.body());  
copySafeNodes(dirtyEntity.body(), clean.body());  
copySafeNodes(null.body(), clean.body());  
copySafeNodes(DIRTY_DOCUMENT.body(), clean.body());  
copySafeNodes(dirtyPage.body(), clean.body());  
copySafeNodes(diffDocument.body(), clean.body());  
copySafeNodes(dirtyObject.body(), clean.body());  
copySafeNodes(dirtyElement.body(), clean.body());  
copySafeNodes(owner.body(), clean.body());  
copySafeNodes(parent.body(), clean.body());  
copySafeNodes(isDirty.body(), clean.body());  
copySafeNodes(commit.body(), clean.body());  
copySafeNodes(parentDocument.body(), clean.body());  
copySafeNodes(DirtyNode.body(), clean.body());  
copySafeNodes(dirtyFolder.body(), clean.body());  
copySafeNodes(mutation.body(), clean.body());  
copySafeNodes( dirtyDocument.body(), clean.body());  
copySafeNodes(dirtyContent.body(), clean.body());  
copySafeNodes(sourceDocument.body(), clean.body());  
copySafeNodes(change.body(), clean.body());  
copySafeNodes(d.body(), clean.body());  
copySafeNodes(new Document.body(), clean.body());  
copySafeNodes(tmpDocument.body(), clean.body());  
copySafeNodes(request.body(), clean.body());  
copySafeNodes(domDocument.body(), clean.body());  
copySafeNodes(dirtyRequest.body(), clean.body());  
copySafeNodes(self.body(), clean.body());  
copySafeNodes(fullDocument.body(), clean.body());  
copySafeNodes(dom.body(), clean.body());  
copySafeNodes(result.body(), clean.body());  
copySafeNodes(dirty document.body(), clean.body());  
copySafeNodes(cleanedDocument.body(), clean.body());  
copySafeNodes(dataDocument.body(), clean.body());  
copySafeNodes(cloneDocument.body(), clean.body());  
copySafeNodes(raw.body(), clean.body());  
copySafeNodes(updateDocument.body(), clean.body());  
copySafeNodes(dirtyDate.body(), clean.body());  
copySafeNodes(dirtyDocuments.body(), clean.body());  
copySafeNodes(dirtyModel.body(), clean.body());  
copySafeNodes(dirtyContext.body(), clean.body());  
copySafeNodes(root.body(), clean.body());  
copySafeNodes(patchedDocument.body(), clean.body());  
copySafeNodes(updatedDocument.body(), clean.body());  
copySafeNodes(tempDocument.body(), clean.body());  
copySafeNodes(isDirtyNode.body(), clean.body());  
copySafeNodes(dirtyWindow.body(), clean.body());  
copySafeNodes(dirtyQuery.body(), clean.body());  
copySafeNodes(changes.body(), clean.body());  
copySafeNodes(dirtyParent.body(), clean.body());  
copySafeNodes(emptyDocument.body(), clean.body());  
copySafeNodes(tree.body(), clean.body());  
copySafeNodes(dirtydocument.body(), clean.body());  
copySafeNodes(originalDocument.body(), clean.body());  
copySafeNodes(update.body(), clean.body());  
copySafeNodes(dyingDocument.body(), clean.body());  
copySafeNodes(rootDocument.body(), clean.body());  
copySafeNodes(element.body(), clean.body());  
copySafeNodes(dirtyForm.body(), clean.body());  
copySafeNodes(internalDocument.body(), clean.body());  
copySafeNodes(DirtyObject.body(), clean.body());  
copySafeNodes(directedDocument.body(), clean.body());  
copySafeNodes(dirtyData.body(), clean.body());  
copySafeNodes(env.body(), clean.body());  
copySafeNodes(immutableDocument.body(), clean.body());  
copySafeNodes(normalDocument.body(), clean.body());  
copySafeNodes(query.body(), clean.body());  
copySafeNodes(directed.body(), clean.body());  
copySafeNodes(workingDocument.body(), clean.body());  
copySafeNodes(DirtyDoc.body(), clean.body());  
copySafeNodes(dirty Document.body(), clean.body());  
copySafeNodes(activeDocument.body(), clean.body());  
copySafeNodes(changedDocument.body(), clean.body());  
copySafeNodes(dirtyDirectory.body(), clean.body());  
copySafeNodes(changeDocument.body(), clean.body());  
copySafeNodes(state.body(), clean.body());  
copySafeNodes(DirtyShell.body(), clean.body());  
copySafeNodes(dummyDocument.body(), clean.body());  
copySafeNodes(dirtyLink.body(), clean.body());  
copySafeNodes(old.body(), clean.body());  
copySafeNodes(ownerDocument.body(), clean.body());  
copySafeNodes(touch.body(), clean.body());  
copySafeNodes(plainDocument.body(), clean.body());  
copySafeNodes(syncDocument.body(), clean.body());  
copySafeNodes(currentDocument.body(), clean.body());  
copySafeNodes(existingDocument.body(), clean.body());  
copySafeNodes(dirtyBody.body(), clean.body());  
copySafeNodes(target.body(), clean.body());  
copySafeNodes(dirtyFilter.body(), clean.body());  
copySafeNodes(clone.body(), clean.body());  
copySafeNodes(DIRTY_NODE.body(), clean.body());  
copySafeNodes(dirtyCopy.body(), clean.body());  
copySafeNodes(page.body(), clean.body());  
copySafeNodes(value.body(), clean.body());  
copySafeNodes(DirtyElement.body(), clean.body());  
copySafeNodes(settings.body(), clean.body());  
copySafeNodes(dirtyResponse.body(), clean.body());  
copySafeNodes(index.body(), clean.body());  
copySafeNodes(documentElement.body(), clean.body());  
copySafeNodes(modified.body(), clean.body());  
copySafeNodes(that.body(), clean.body());  
copySafeNodes(freshDocument.body(), clean.body());  
copySafeNodes(ctx.body(), clean.body());  
copySafeNodes(dirtyDatabase.body(), clean.body());  
copySafeNodes(currentNode.body(), clean.body());  
copySafeNodes(sync.body(), clean.body());  
copySafeNodes(window.body(), clean.body());  
copySafeNodes(id.body(), clean.body());  
copySafeNodes(tx.body(), clean.body());  
copySafeNodes(todo.body(), clean.body());  
copySafeNodes(writableDocument.body(), clean.body());  
copySafeNodes(file.body(), clean.body());  
copySafeNodes(normalizedDocument.body(), clean.body());  
copySafeNodes(dirtyDom.body(), clean.body());  
copySafeNodes(manifest.body(), clean.body());  
copySafeNodes(openDocument.body(), clean.body());  
copySafeNodes(localDocument.body(), clean.body());  
copySafeNodes(ImmutableDocument.body(), clean.body());  
copySafeNodes(clean.documentElement.body(), clean.body());  
copySafeNodes(patchNode.body(), clean.body());  
copySafeNodes(finalDocument.body(), clean.body());  
copySafeNodes(deepCopy.body(), clean.body());  
copySafeNodes(htmlDocument.body(), clean.body());  
copySafeNodes(session.body(), clean.body());  
copySafeNodes(newValue.body(), clean.body());  
copySafeNodes(bodyElement.body(), clean.body());  
copySafeNodes(t.body(), clean.body());  
copySafeNodes(runner.body(), clean.body());  
copySafeNodes(editDocument.body(), clean.body());  
copySafeNodes(irtyDocument.body(), clean.body());  
copySafeNodes(clear.body(), clean.body());  
copySafeNodes(simpleDocument.body(), clean.body());  
copySafeNodes(merge.body(), clean.body());  
copySafeNodes(cleaned.body(), clean.body());  
copySafeNodes(node1.body(), clean.body());  
copySafeNodes(dirtyLine.body(), clean.body());  
copySafeNodes(bodyNode.body(), clean.body());  
copySafeNodes(branch.body(), clean.body());  
copySafeNodes(oldDoc.body(), clean.body());  
copySafeNodes(attributes.body(), clean.body());  
copySafeNodes(reset.body(), clean.body());  
copySafeNodes(field.body(), clean.body());  
copySafeNodes(source.body(), clean.body());  
copySafeNodes(dirtyTransaction.body(), clean.body());  
copySafeNodes(config.body(), clean.body());  
copySafeNodes(DirtyContainer.body(), clean.body());  
copySafeNodes(DIRTY_DOC.body(), clean.body());  
copySafeNodes(deadDocument.body(), clean.body());  
copySafeNodes(payload.body(), clean.body());  
copySafeNodes(this.document.body(), clean.body());  
copySafeNodes(thing.body(), clean.body());  
copySafeNodes(event.body(), clean.body());  
copySafeNodes(sourceFile.body(), clean.body());  
copySafeNodes(mergeDocument.body(), clean.body());  
copySafeNodes(isDirtyElement.body(), clean.body());  
copySafeNodes(lazyDocument.body(), clean.body());  
copySafeNodes(filter.body(), clean.body());  
copySafeNodes(text.body(), clean.body());  
copySafeNodes(baseUri.body(), clean.body());  
copySafeNodes(dirtyMessage.body(), clean.body());  
copySafeNodes(writer.body(), clean.body());  
copySafeNodes(dirtyResult.body(), clean.body());  
copySafeNodes(tmpFile.body(), clean.body());  
copySafeNodes(command.body(), clean.body());  
copySafeNodes(dirtyCollection.body(), clean.body());  
copySafeNodes(curDocument.body(), clean.body());  
copySafeNodes(readOnlyDocument.body(), clean.body());  
copySafeNodes(dirtySession.body(), clean.body());  
copySafeNodes(directory.body(), clean.body());  
copySafeNodes(metadata.body(), clean.body());  
copySafeNodes(realDocument.body(), clean.body());  
copySafeNodes(ownerDocument.body(), clean.body());  
copySafeNodes(mutableDocument.body(), clean.body());  
copySafeNodes(token.body(), clean.body());  
copySafeNodes(deepDocument.body(), clean.body());  
copySafeNodes(wrapper.body(), clean.body());  
copySafeNodes(userdata.body(), clean.body());  
copySafeNodes(git.body(), clean.body());  
copySafeNodes(mergedDocument.body(), clean.body());  
copySafeNodes(content.body(), clean.body());  
copySafeNodes(originDocument.body(), clean.body());  
copySafeNodes(client.body(), clean.body());  
copySafeNodes(touchedDocument.body(), clean.body());  
copySafeNodes(DirtyContent.body(), clean.body());  
copySafeNodes(true.body(), clean.body());  
copySafeNodes(entityDocument.body(), clean.body());  
copySafeNodes(info.body(), clean.body());  
copySafeNodes(tidy.body(), clean.body());  
copySafeNodes(.body(), clean.body());  
copySafeNodes(nullDocument.body(), clean.body());  
copySafeNodes(dirtyList.body(), clean.body());  
copySafeNodes(descriptor.body(), clean.body());  
copySafeNodes(dirtyLayer.body(), clean.body());  
copySafeNodes(thisDocument.body(), clean.body());  
copySafeNodes(patcher.body(), clean.body());  
copySafeNodes(rawNode.body(), clean.body());  
copySafeNodes(isDirtyObject.body(), clean.body());  
copySafeNodes(fromDocument.body(), clean.body());  
copySafeNodes(dirtyDocument2.body(), clean.body());  
copySafeNodes(curie.body(), clean.body());  
copySafeNodes(DirtyUtils.body(), clean.body());  
copySafeNodes(toDocument.body(), clean.body());  
copySafeNodes(nodeList.body(), clean.body());  
copySafeNodes(dirtyParentDocument.body(), clean.body());  
copySafeNodes(touchableDocument.body(), clean.body());  
copySafeNodes(newShell.body(), clean.body());  
copySafeNodes(DirtyPage.body(), clean.body());  
copySafeNodes(dirtyUnit.body(), clean.body());  
copySafeNodes(clean.document.body(), clean.body());  
copySafeNodes(patchingDocument.body(), clean.body());  
copySafeNodes(data, data.body(), clean.body());  
copySafeNodes(doc, doc.body(), clean.body());  
copySafeNodes(patched.body(), clean.body());  
copySafeNodes(clean.root.body(), clean.body());  
copySafeNodes(this, this.body(), clean.body());  
copySafeNodes(dirtyBaseUri.body(), clean.body());  
copySafeNodes(DIRTY_BODY.body(), clean.body());  
copySafeNodes(this.root.body(), clean.body());  
copySafeNodes(patching.body(), clean.body());  
copySafeNodes(this.node.body(), clean.body());  
copySafeNodes(copySafeDocument.body(), clean.body());  
copySafeNodes(dirtyDocument.body(),  clean.body());  
copySafeNodes(dirtyDocument.body(), clean.body());  
copySafeNodes(dirtyDocument.body(),  clone.body());  
copySafeNodes(dirtyDocument.body(),  clear.body());  
copySafeNodes(dirtyDocument.body(),  dirtyDocument.body());  
copySafeNodes(dirtyDocument.body(),  dirty.body());  
copySafeNodes(dirtyDocument.body(),  clean.body());  
copySafeNodes(dirtyDocument.body(),  cloneDocument.body());  
copySafeNodes(dirtyDocument.body(),  this.body());  
copySafeNodes(dirtyDocument.body(),  clean, clean.body());  
copySafeNodes(dirtyDocument.body(),  newShell.body());  
copySafeNodes(dirtyDocument.body(),   clean.body());  
copySafeNodes(dirtyDocument.body(),  newDocument.body());  
copySafeNodes(dirtyDocument.body(),  keep.body());  
copySafeNodes(dirtyDocument.body(),  null.body());  
copySafeNodes(dirtyDocument.body(),  &clean.body());  
copySafeNodes(dirtyDocument.body(),  delete.body());  
copySafeNodes(dirtyDocument.body(),  cleaned.body());  
copySafeNodes(dirtyDocument.body(),  result.body());  
copySafeNodes(dirtyDocument.body(),  plainDocument.body());  
copySafeNodes(dirtyDocument.body(),  deleteDocument.body());  
copySafeNodes(dirtyDocument.body(),  doc.body());  
copySafeNodes(dirtyDocument.body(),  node.body());  
copySafeNodes(dirtyDocument.body(),  new Document(clean.body());  
copySafeNodes(dirtyDocument.body(),  new Document.body());  
copySafeNodes(dirtyDocument.body(),  fullDocument.body());  
copySafeNodes(dirtyDocument.body(),  cleaning.body());  
copySafeNodes(dirtyDocument.body(),  remove.body());  
copySafeNodes(dirtyDocument.body(),  plain.body());  
copySafeNodes(dirtyDocument.body(),  null, clean.body());  
copySafeNodes(dirtyDocument.body(),  cleanup.body());  
copySafeNodes(dirtyDocument.body(),  copy.body());  
copySafeNodes(dirtyDocument.body(),  Clean.body());  
copySafeNodes(dirtyDocument.body(),  document.body());  
copySafeNodes(dirtyDocument.body(),  -clean.body());  
copySafeNodes(dirtyDocument.body(),  removeNode.body());  
copySafeNodes(dirtyDocument.body(),  filter.body());  
copySafeNodes(dirtyDocument.body(),  !clean.body());  
copySafeNodes(dirtyDocument.body(),  emptyDocument.body());  
copySafeNodes(dirtyDocument.body(),  clean, dirtyDocument.body());  
copySafeNodes(dirtyDocument.body(),  path.body());  
copySafeNodes(dirtyDocument.body(),  match.body());  
copySafeNodes(dirtyDocument.body(),  Cleaner.body());  
copySafeNodes(dirtyDocument.body(),  true, clean.body());  
copySafeNodes(dirtyDocument.body(), CLEAN.body());  
copySafeNodes(dirtyDocument.body(),  cleanDocument.body());  
copySafeNodes(dirtyDocument.body(),  clean .body());  
copySafeNodes(dirtyDocument.body(),  stack.body());  
copySafeNodes(dirtyDocument.body(),  raw.body());  
copySafeNodes(dirtyDocument.body(),  normalDocument.body());  
copySafeNodes(dirtyDocument.body(),  innerDocument.body());  
copySafeNodes(dirtyDocument.body(),  CLEAN.body());  
copySafeNodes(dirtyDocument.body(),  diff.body());  
copySafeNodes(dirtyDocument.body(),  line.body());  
copySafeNodes(dirtyDocument.body(),  new Document(), clean.body());  
copySafeNodes(dirtyDocument.body(),  createShell(clean.body());  
copySafeNodes(dirtyDocument.body(),  clone(clean.body());  
copySafeNodes(dirtyDocument.body(),  -1, clean.body());  
copySafeNodes(dirtyDocument.body(),  link.body());  
copySafeNodes(dirtyDocument.body(),  clean.document.body());  
copySafeNodes(dirtyDocument.body(),  tempDocument.body());  
copySafeNodes(dirtyDocument.body(),  closeDocument.body());  
copySafeNodes(dirtyDocument.body(),  returnClean.body());  
copySafeNodes(dirtyDocument.body(),  cloneElement.body());  
copySafeNodes(dirtyDocument.body(),  new clean.body());  
copySafeNodes(dirtyDocument.body(),  self.body());  
copySafeNodes(dirtyDocument.body(),  deepCopy.body());  
copySafeNodes(dirtyDocument.body(),  rawDocument.body());  
copySafeNodes(dirtyDocument.body(),  finalClean.body());  
copySafeNodes(dirtyDocument.body(),  oldDocument.body());  
copySafeNodes(dirtyDocument.body(),  (Document) clean.body());  
copySafeNodes(dirtyDocument.body(),  finalDocument.body());  
copySafeNodes(dirtyDocument.body(),  targetDocument.body());  
copySafeNodes(dirtyDocument.body(),  finish.body());  
copySafeNodes(dirtyDocument.body(),  openDocument.body());  
copySafeNodes(dirtyDocument.body(), Clean.body());  
copySafeNodes(dirtyDocument.body(),  clean.body()).body());  
copySafeNodes(dirtyDocument.body(),  empty.body());  
copySafeNodes(dirtyDocument.body(),  nodeList.body());  
copySafeNodes(dirtyDocument.body(),  $.body());  
copySafeNodes(dirtyDocument.body(),  clean.body());  
copySafeNodes(dirtyDocument.body(),  cloneNode.body());  
copySafeNodes(dirtyDocument.body(),  bareDocument.body());  
copySafeNodes(dirtyDocument.body(),  _clean.body());  
copySafeNodes(dirtyDocument.body(),  deepCopy(clean.body());  
copySafeNodes(dirtyDocument.body(),  realDocument.body());  
copySafeNodes(dirtyDocument.body(),  +clean.body());  
copySafeNodes(dirtyDocument.body(),  sync.body());  
copySafeNodes(dirtyDocument.body(),  normal.body());  
copySafeNodes(dirtyDocument.body(),  copySafeNode.body());  
copySafeNodes(dirtyDocument.body(),  utils.body());  
copySafeNodes(dirtyDocument.body(),  removeNodes.body());  
copySafeNodes(dirtyDocument.body(),  trim(clean.body());  
copySafeNodes(dirtyDocument.body(),  and.body());  
copySafeNodes(dirtyDocument.body(),  regularDocument.body());  
copySafeNodes(dirtyDocument.body(),  CLEANER.body());  
copySafeNodes(dirtyDocument.body(),  cloneDeep(clean.body());  
copySafeNodes(dirtyDocument.body(),  dom.body());  
copySafeNodes(dirtyDocument.body(), .body());  
copySafeNodes(dirtyDocument.body(),  && clean.body());  
copySafeNodes(dirtyDocument.body(),  cloneDeep.body());  
copySafeNodes(dirtyDocument.body(),  buildShell.body());  
copySafeNodes(dirtyDocument.body(),  box.body());  
copySafeNodes(dirtyDocument.body(), dirtyDocument.body());  
copySafeNodes(dirtyDocument.body(),  path, clean.body());  
copySafeNodes(dirtyDocument.body(),  createShell.body());  
copySafeNodes(dirtyDocument.body(),  cloneDoc.body());  
copySafeNodes(dirtyDocument.body(),  content.body());  
copySafeNodes(dirtyDocument.body(),  tree.body());  
copySafeNodes(dirtyDocument.body(),  deepClone(clean.body());  
copySafeNodes(dirtyDocument.body(),  baseUri(), clean.body());  
copySafeNodes(dirtyDocument.body(),  clean); clean.body());  
copySafeNodes(dirtyDocument.body(),  trim.body());  
copySafeNodes(dirtyDocument.body(),  $clean.body());  
copySafeNodes(dirtyDocument.body(),  transform.body());  
copySafeNodes(dirtyDocument.body(),  merge.body());  
copySafeNodes(dirtyDocument.body(),  node -> node.body());  
copySafeNodes(dirtyDocument.body(),  shell.body());  
copySafeNodes(dirtyDocument.body(),  parent.body());  
copySafeNodes(dirtyDocument.body(),  copySafeNodes.body());  
copySafeNodes(dirtyDocument.body(),  toShell(clean.body());  
copySafeNodes(dirtyDocument.body(),  keepDocument.body());  
copySafeNodes(dirtyDocument.body(),  removeDocument.body());  
copySafeNodes(dirtyDocument.body(),  start.body());  
copySafeNodes(dirtyDocument.body(),  fix.body());  
copySafeNodes(dirtyDocument.body(),  deleteNode.body());  
copySafeNodes(dirtyDocument.body(),  run.body());  
copySafeNodes(dirtyDocument.body(),  false, clean.body());  
copySafeNodes(dirtyDocument.body(),  cloneClean.body());  
copySafeNodes(dirtyDocument.body(),  buildShell(clean.body());  
copySafeNodes(dirtyDocument.body(),  body.body());  
copySafeNodes(dirtyDocument.body(),  process.body());  
copySafeNodes(dirtyDocument.body(),  localDocument.body());  
copySafeNodes(dirtyDocument.body(),  check.body());  
copySafeNodes(dirtyDocument.body(),  session.body());  
copySafeNodes(dirtyDocument.body(),  *clean.body());  
copySafeNodes(dirtyDocument.body(),  close.body());  
copySafeNodes(dirtyDocument.body(),  cleanupDocument.body());  
copySafeNodes(dirtyDocument.body(),  full.body());  
copySafeNodes(dirtyDocument.body(),  otherDocument.body());  
copySafeNodes(dirtyDocument.body(),  removeEmpty(clean.body());  
copySafeNodes(dirtyDocument.body(),  candidate.body());  
copySafeNodes(dirtyDocument.body(),  doClean.body());  
copySafeNodes(dirtyDocument.body(),  toClean.body());  
copySafeNodes(dirtyDocument.body(),  ready.body());  
copySafeNodes(dirtyDocument.body(),  notClean.body());  
copySafeNodes(dirtyDocument.body(),  nodeMap.body());  
copySafeNodes(dirtyDocument.body(),  here.body());  
copySafeNodes(dirtyDocument.body(),  clean.root.body());  
copySafeNodes(dirtyDocument.body(),  plainText.body());  
copySafeNodes(dirtyDocument.body(),  testDocument.body());  
copySafeNodes(dirtyDocument.body(),  customDocument.body());  
copySafeNodes(dirtyDocument.body(),  theClean.body());  
copySafeNodes(dirtyDocument.body(),  super.body());  
copySafeNodes(dirtyDocument.body(),  toShell.body());  
copySafeNodes(dirtyDocument.body(),  parse.body());  
copySafeNodes(dirtyDocument.body(),  clean.rootDocument.body());  
copySafeNodes(dirtyDocument.body(),  newDoc.body());  
copySafeNodes(dirtyDocument.body(),  rm.body());  
copySafeNodes(dirtyDocument.body(),  dry.body());  
copySafeNodes(dirtyDocument.body(),  change.body());  
copySafeNodes(dirtyDocument.body(),  that.body());  
copySafeNodes(dirtyDocument.body(),  simpleDocument.body());  
copySafeNodes(dirtyDocument.body(),  copyDocument.body());  
copySafeNodes(dirtyDocument.body(), CLEANER.body());  
copySafeNodes(dirtyDocument.body(),  $document.body());  
copySafeNodes(dirtyDocument.body(),  startDocument.body());  
copySafeNodes(dirtyDocument.body(),  rich.body());  
copySafeNodes(dirtyDocument.body(),  new Document() .body());  
copySafeNodes(dirtyDocument.body(),  set.body());  
copySafeNodes(dirtyDocument.body(),  simpleNode.body());  
copySafeNodes(dirtyDocument.body(),  // clean.body());  
copySafeNodes(dirtyDocument.body(),  prepare.body());  
copySafeNodes(dirtyDocument.body(),  copySafeDocument.body());  
copySafeNodes(dirtyDocument.body(),  build.body());  
copySafeNodes(dirtyDocument.body(),  removeElement.body());  
copySafeNodes(dirtyDocument.body(),  body(), clean.body());  
copySafeNodes(dirtyDocument.body(),     clean.body());  
copySafeNodes(dirtyDocument.body(),  valid.body());  
copySafeNodes(dirtyDocument.body(),  this, clean.body());  
copySafeNodes(dirtyDocument.body(),  closure.body());  
copySafeNodes(dirtyDocument.body(),  data.body());  
copySafeNodes(dirtyDocument.body(),  nonSafe.body());  
copySafeNodes(dirtyDocument.body(),  shallowCopy.body());  
copySafeNodes(dirtyDocument.body(),  remove(clean.body());  
copySafeNodes(dirtyDocument.body(),  _node.body());  
copySafeNodes(dirtyDocument.body(),  convert.body());  
copySafeNodes(dirtyDocument.body(),  copyNode.body());  
copySafeNodes(dirtyDocument.body(),      clean.body());  
copySafeNodes(dirtyDocument.body(),  new shell.body());  
copySafeNodes(dirtyDocument.body(),  prepareDocument.body());  
copySafeNodes(dirtyDocument.body(),  list.body());  
copySafeNodes(dirtyDocument.body(),  normalise.body());  
copySafeNodes(dirtyDocument.body(),  safeNode.body());  
copySafeNodes(dirtyDocument.body(),  clean.body());.body());  
copySafeNodes(dirtyDocument.body(),  baseUri, clean.body());  
copySafeNodes(dirtyDocument.body(),  diffDocument.body());  
copySafeNodes(dirtyDocument.body(),  target.body());  
copySafeNodes(dirtyDocument.body(),  c.body());  
copySafeNodes(dirtyDocument.body(),  patch.body());  
copySafeNodes(dirtyDocument.body(),  nullSafe.body());  
copySafeNodes(dirtyDocument.body(),  mail.body());  
copySafeNodes(dirtyDocument.body(),  request.body());  
copySafeNodes(dirtyDocument.body(),  d.body());  
copySafeNodes(dirtyDocument.body(),  rawNode.body());  
copySafeNodes(dirtyDocument.body(),  CLEAN_NODE.body());  
copySafeNodes(dirtyDocument.body(),  CleanUtils.body());  
copySafeNodes(dirtyDocument.body(),  prepareNode.body());  
copySafeNodes(dirtyDocument.body(),  (Document)clean.body());  
copySafeNodes(dirtyDocument.body(),  clean.doc.body());  
copySafeNodes(dirtyDocument.body(),  new Clean.body());  
copySafeNodes(dirtyDocument.body(),  toShell(), clean.body());  
copySafeNodes(dirtyDocument.body(),  nonSafeDocument.body());  
copySafeNodes(dirtyDocument.body(),  getDocument.body());  
copySafeNodes(dirtyDocument.body(),  CLEANUP.body());  
copySafeNodes(dirtyDocument.body(),  cloneDirtyDocument.body());  
copySafeNodes(dirtyDocument.body(),  cdn.body());  
copySafeNodes(dirtyDocument.body(),  getShell.body());  
copySafeNodes(dirtyDocument.body(),  nullSafeDocument.body());  
copySafeNodes(dirtyDocument.body(),  buildDocument.body());  
copySafeNodes(dirtyDocument.body(),  clean, doc.body());  
copySafeNodes(dirtyDocument.body(),  clean._root.body());  
copySafeNodes(dirtyDocument.body(),  CleanShell.body());  
copySafeNodes(dirtyDocument.body(),  CLEANED.body());  
copySafeNodes(dirtyDocument.body(),  clean, dirty.body());  
copySafeNodes(dirtyDocument.body(),  removeEmptyNodes.body());  
copySafeNodes(dirtyDocument.body(),  deepClone.body());  
copySafeNodes(dirtyDocument.body(),  newShell(), clean.body());  
copySafeNodes(dirtyDocument.body(),  cloneContent.body());  
copySafeNodes(dirtyDocument.body(),  removeNodes(clean.body());  
copySafeNodes(dirtyDocument.body(),  baseUri.body());  
copySafeNodes(dirtyDocument.body(),  crawl.body());  
copySafeNodes(dirtyDocument.body(), CLEAN_NODE.body());  
copySafeNodes(dirtyDocument.body(),  nullSafeNode.body());  
copySafeNodes(dirtyDocument.body(),  linkTo.body());  
copySafeNodes(dirtyDocument.body(),  clean) clean.body());  
copySafeNodes(dirtyDocument.body(),  getShell(clean.body());  
copySafeNodes(dirtyDocument.body(),  prettyPrint.body());  
copySafeNodes(dirtyDocument.body(),  nonSafeNode.body());  
copySafeNodes(dirtyDocument.body(),  [clean.body());  
copySafeNodes(dirtyDocument.body(),  clone(clean)).body());  
copySafeNodes(dirtyDocument.body(),  createShell(), clean.body());  
copySafeNodes(dirtyDocument.body(),  "body", clean.body());  
copySafeNodes(dirtyDocument.body(),  getBody(), clean.body());  
copySafeNodes(dirtyDocument.body(),  normaliseDocument.body());  
copySafeNodes(dirtyDocument.body(),  clean.rootElement.body());  
copySafeNodes(dirtyDocument.body(),  removeEmptyNode.body());  
copySafeNodes(dirtyDocument.body(),  newShell(clean.body());  
copySafeNodes(dirtyDocument.body(),  removeNode(clean.body());  
copySafeNodes(dirtyDocument.body(),  shallowCopy(clean.body());  
if(dirtyDocument==null){return  clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  null;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clean;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  null;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return null;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return ;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  dirty;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return clean;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clear;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clean; };} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  new Document();;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clone;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  document;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  emptyDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  doc;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  false;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  this;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  dirtyDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clean.body();;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  "";;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clone(clean);;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  new Document;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  dirty;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clear(clean);;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return   clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  true;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  false;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  empty;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clone();;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clean.body();} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  -1;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  null; };} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  doc;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  void;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clean;};} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  &clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  return clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  remove;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  CLEAN;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  nil;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  newDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  true;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return };;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  return null;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  new Document();} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return null;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  cloneDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  document;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  delete;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clean.body;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  null;};} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return   null;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return !clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clear();;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  !clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  plainDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  this;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return ; };} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return }};} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clean; } else;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return (clean);;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  blankDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clean; };} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return dirty;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  NULL;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return plainDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return false;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  fullDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  bareDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  finish;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  return clean;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  node;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return -;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  dirtyDocument;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return doc;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return   clean;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  {};;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  simpleDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  innerDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  ;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return -1;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  new Document(){}};} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  new NullDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return clone;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  oldDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clean;} else;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  cloneEmptyDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return document;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  CleanShell;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  diff;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  throw new IllegalArgumentException();;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  $(clean);;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clean; ;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return dirtyDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  super;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clear(clean);} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  $;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clean; } ;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  '';;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  undefined;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  localDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  valid;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return _null;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  stack;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  -1;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clean ;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  return null;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return this;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clone;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clean<mask1> null;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  nothing;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  new EmptyDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  cleanup;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return <null;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  emptyDoc;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  newShell;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return clear;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  deleteDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  CleanNull;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return CLEAN;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  new Document();};} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  self;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  inline;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  remove(clean);;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  rawDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  doNothing;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return newDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return Clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clear();} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clone();} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  new Document(){};;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  blank;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return clean; };} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clean ;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  newDocument();;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  filter;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return ();;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  };} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return emptyDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clean;};} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return AST#unary_expression#Left-1AST#unary_expression#Right;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clear;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  plain;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return &clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  delete(clean);;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  cancel;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return (null);;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return clone(clean);;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  empty;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  close(clean);;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  null;} else;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return <;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  openDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return true;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  new NullDocument();;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  $;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  result;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return _;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  node;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  buildShell;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  sync;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  filter(clean);;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  $document;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return 空;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  mixed;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clean; ;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  cleaned;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  {@code null};;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  _null;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  CLEAN_NULL;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  old;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  CleanNullDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return ;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clean<mask1> clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  dom;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  Clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  new EmptyDocument();;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return clean.body();;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  EMPTY;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clearDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return ; } clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  valid;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  {};;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  match;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clean;AST#return_statement#Right;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  weak;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  null; } else;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  ready;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  newShell();;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clean};;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  normalDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clean;} ;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  emptyDocument;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  dup;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  noop;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  None;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  baseUri;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return :clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return };clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return lean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clean;}else;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  new Document("");;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  defaultDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return    clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  CLEAN;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  tempDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return clone();;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return <null>;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  &clean;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  ull;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return void;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  cull;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return     clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  window;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clean:null;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return new Document();;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  body;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  targetDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  cloneDocument();;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  canonical;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  EmptyDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  link;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  null};} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return ;};} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  link(clean);;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  box;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return [];;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return plain;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  CLEAN_DOCUMENT;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  inlineDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  finish(clean);;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return false;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  emptyShell;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return ,clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  StringUtils.EMPTY;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  new document;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  deepCopy;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  (clean);;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clean; }else;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  new NullShell;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  createShell;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  throw new NullPointerException();;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  dirty.body();;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  (Document)null;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clean;  };} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  new DefaultDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  buildShell();;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){return  clean<mask2> null;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=clean; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=document; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Document.createShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new Document; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=newDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new Document(); }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=null; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument= clean; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=createShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=clone; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=doc; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=this; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new Document() }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=emptyDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Document; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new Document(); return clean; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=blankDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=createShell(); }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument= new Document(); }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=buildShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new Document(){}}; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument= document; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=clear; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=dirty; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=clean; }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=cloneDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=defaultDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=EmptyDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=plainDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new DefaultDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new Document(); } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=newDocument(); }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new Document(); } else; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument= doc; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new DocumentImpl; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=oldDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new Document();}; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new Document(); } clean; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Document.createShell();}; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Document.createShell(""); } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Doc.createShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument= Document.createShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=rawDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=DocumentImpl; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=empty; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument= clone; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=window; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=blank; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument= new Document() }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=document; }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument= null; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=PlainDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new Document(){ }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=clean; return clean; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Clean; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=DefaultDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new Document(); clean; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new Document();; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new Document() return clean; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=openDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=copy; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=clone(); }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Clone; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=newShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=System.in; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new Document(); } ; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Document.emptyDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=createShell(); return clean; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=init; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument= emptyDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=DomUtils; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=BlankDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Document.empty; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=NewDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=clone() }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=BaseDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=EMPTY; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Document.createShell(); } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=session; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument= new Document(); return clean; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument= newDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Clean.createShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=false; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=clean.body() }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Document.createShell();; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Shell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=reset; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=cleanDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=PlainDocument.createShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=buildShell(); }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=true; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=makeShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=createShell() }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=dom; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new EmptyDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument= new Document; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new DocumentImpl(); }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=newDocument() }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=clean.body; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=ownerDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument= createShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=buildDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=DocumentImpl.createShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=d; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Document.empty(); }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=sh; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=getDocument(); }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Doc; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=documentBuilder; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument= clean; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=simpleDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new DefaultDocument(); }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=document; } clean; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=body; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=CLEAN; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=newDocument(); return clean; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=baseDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=raw; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=document.createShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new Document();} else; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=void; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=DOM; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new Document(){ }};; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=clean.body(); }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=self; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=document; return clean; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument= this; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Document{}; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=clean; } else; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=request; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new Document();}; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=System.out; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Document#createShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument= createShell(); }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Window; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Node.createShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=plain; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new NullDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Entity.createShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=newDoc; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=load; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=DocUtils; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=DOC; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=LocalDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=initDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new Document().body; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=fullDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=baseUri; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=dirtyShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new document; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=cloneEmptyDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Empty; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=DocumentFactory.createShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new Document<mask1>document; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=initShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=startDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=clone(); } clean; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=originalDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new Document(){}; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=global; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=doc; }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument= clear; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new Document() ; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new Document(...); } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=clean.baseUri; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Document.emptyShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=null; }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=env; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=node; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=sanitize; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument= clean; }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new Document(){} return clean; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=dup; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=createShell(); } else; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=SimpleDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new Document() } else; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument= new Document(){ }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=tempDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new Document(); return null; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=clone(); return clean; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=build; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Document.create(); }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new RootDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=resetDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new Document(""); }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Collections.emptyDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Shell.createShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new Document<mask1>clean; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=EMPTY_DOCUMENT; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=noop; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=localDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=空; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=clean.body(); } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=old; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=cleanup; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument={}; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=CleanShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Base; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=DocumentDefault; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Document.createShell()}; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=NullDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=buildShellDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=doCreateShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=dummyDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Session.createShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=shell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=newEmptyDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new Document(){}};; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=DOM.createShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Document.blank(); }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument= cloneDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new Window; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Copy; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=NewShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new Document(){ }; }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=dirty; }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Document.newShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=ImmutableDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=globalDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=fresh; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=FullDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=loadDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=lean; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new Document(){}; }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument= dirty; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=delete; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=oldDoc; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Document.blank; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=deepcopy; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Document.defaultDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument= new Document(); } clean; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=clean.createShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Dom.createShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new Document(){ }}; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=createShell(); } clean; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=save; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=buildShell() }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=return clean; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new NativeDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=clone(); } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=updateDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=new Document();} clean; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument= createShell() }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=NativeDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=ensureShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Document.createFromShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Document.EMPTY; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=root; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument= EmptyDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument==null){ dirtyDocument=Object.createShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  null;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  null;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return ;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  dirtyDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  clean;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return null;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  new Document();;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  dirty;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  dirtyDocument;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  null; };} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  document;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  false;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  false;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  doc;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return dirtyDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  this;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  null;};} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return ; };} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  emptyDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return null;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  new Document;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  "";;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  doc;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return };;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  dirty;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  newDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  clean; };} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  document;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  nil;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  NULL;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return clean;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  true;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return ; } clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  true;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  super;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  clear;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  this;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  void;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  empty;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  clone;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  null; } ;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  -1;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  ;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  new Document();} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  newDocument();;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return document;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  new Document();};} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return ; } ;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  null;} ;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  null;} else;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return dirty;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  {};;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return dirtyDocument;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  CLEAN;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  null; } else;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  clean.body();;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  clone();;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return ;};} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  null;};} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  dirtyDocument; };} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  dirtyDoc;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  oldDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  new EmptyDocument();;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  return null;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return ;} clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return false;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  superDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  undefined;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  EMPTY;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  new Document(){}};} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  new Document(); };} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return };clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  clear();;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  new NullDocument();;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  newShell;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  noop;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return doc;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  innerDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  nothing;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  null;}else;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  null; };} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  null;} clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  new EmptyDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  newShell();;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  null ;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  new NullDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return   null;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  null; ;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return DIRTY;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return new Document();;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  new NullShell();;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  -1;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  EmptyDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  clean;};} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  valid;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return false;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  return null;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  new Document("");;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return }};} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return newDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  emptyDocument;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return }; clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  blankDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return this;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  localDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  null;return clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  new Document(){};;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return ;AST#return_statement#Right;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return ;clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  simpleDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  null;AST#return_statement#Right;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return ();;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return Document;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  '';;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  ready;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  null; ;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  clean; };} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return plainDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  new DocumentImpl();;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return -1;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return ;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  dirty.body();;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  remove;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return ;} ;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  sync;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  valid;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  null ;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  nil;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return }; return clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  window;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  diff;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  super;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  old;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return   clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  clean; } ;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  CLEAN;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  finish;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  cloneDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return }; clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  NONE;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  null; return clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  CleanNull;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return CLEAN;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  new DefaultDocument();;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return [];;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  openDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return ;}};} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  false; };} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  safe;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  new NullShell;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  createShell();;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  new EmptyShell();;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  DISCARD;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  System.err;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  Document;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return _null;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  NullDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  cancel;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  d;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  None;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  new DefaultDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  self;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return 空;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  null};} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  null;}};} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  _null;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  EMPTY_DOCUMENT;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  init;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  rawDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  fullDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  emptyDoc;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  Nothing;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  invalid;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return ;\;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return !dirtyDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  null};;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return nil;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  new document;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  &clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  Null;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  };} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  cleanup;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  0;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  DNA;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return _;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  null; }else;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  dirtyDocument;};} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return EmptyDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  scratch;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  null;clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  empty;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  parent;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  NULL;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return ;return;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  null;AST#then#Right;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return emptyDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  new Window();;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  node;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  MISSING;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  &dirtyDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  tempDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return doc;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  new emptyDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  targetDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return true;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return Doc;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  delete;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  bareDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  return dirtyDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  createShell;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  $(dirtyDocument);;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  env;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  dup;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return "";;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  safe;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return (null);;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  ImmutableDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  defaultDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  null;..;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  newDocument;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  $;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return } clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return   null;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return newDocument();;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  plainDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  new Document;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  clean; } else;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  normalDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  _document;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  {@code null};;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return ; } Clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return ;}};} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return null; };} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  clean; ;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return ; } else;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  invalidDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return ;default;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  _;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  dirtyDoc;;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  throw new IllegalArgumentException();;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  new Document<mask1> null;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return !clean;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  baseUri;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  new DocumentImpl;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  !dirtyDocument;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  NULL_DOCUMENT;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){return  (Document)null;} copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=dirtyDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=document; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=Document; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=Document.createShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new Document; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=newDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=doc; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=clean; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new Document(); }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=createShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=this; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new Document() }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=dirty; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean= dirtyDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=null; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean= document; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean= Document.createShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean= new Document; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new Document(); } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean= doc; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean= new Document(); }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=emptyDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=createShell(); }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean= new Document() }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=Doc; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=clone; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=buildShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean= Document; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=newShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=documentBuilder; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=initShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=EmptyDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean= clean; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new Document(){}}; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new DocumentImpl; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new DefaultDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new Document() ; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=oldDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=DirtyShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=DocumentImpl; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=cleanDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=Doc.createShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new Document(){ }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=init; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean= newDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=Document.emptyShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=blankDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=document.createShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean= this; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=window; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=empty; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=newDocument(); }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean= emptyDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=NewDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=dirtyDocument; }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=reset; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=DIRTY; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=makeShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean= null; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=NewShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean= createShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=rawDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=PlainDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=plainDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=document; }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=getDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=old; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new EmptyDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=d; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=clear; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=raw; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean= new Document(){ }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=getDocument(); }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=cloneDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=openDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=super; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=Window; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=body; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=dummyDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=createShell() }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean= new Document(); } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new Document() {}; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=newDocument() }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=openShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean= clone; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=env; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new Document().body; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=newDoc; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=buildShell(); }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=oldShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=parent; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=Document.newShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=defaultDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new document; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=sanitize; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean= createShell(); }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean= EmptyDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=BlankDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean= dirty; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new Document();; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean= new Document() {}; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=void; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=noop; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=Document.emptyDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=dom; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=Clean; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=softClone; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new NullDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=blank; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new Window; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=Document#createShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=Entity.createShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=newShell(); }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=cleanDefault; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=doClean; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=dup; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=root; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=document() }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=System.createShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=ownerDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=documentFactory; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=initDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=Utility; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=clean.createShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=dirtyDoc; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=Clone; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean= new Document() ; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new Document();}; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=Empty; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new Shell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=BaseShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new DefaultShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=oldDoc; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=DocUtils; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean= super; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new ShinyShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=ensureShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=DefaultDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=cleanShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=DomUtils; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=documentRoot; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=document(); }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=Document.empty; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new PlainDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=request; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=newInstance; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=originalDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=emptyShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=Void; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=session; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean= initShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new Document(){}; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean= new DefaultDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new NullShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=load; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=resetDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=Dirty; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=DOCUMENT; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=System; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new EmptyShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=EMPTY; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=sh; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=rootDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=false; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=fresh; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean= buildShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=loadShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean= oldDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean= createShell() }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean= new Document(){}}; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=documentEmpty; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=DOM; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=build; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=SimpleDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=true; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=newDocument(); } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=EmptyShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=Sync; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=factory; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new RootDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=NOOP; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=System.out; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=Entity; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new Document(){} }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=open; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=dummy; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=newEmptyDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=undo; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=空; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=BaseDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=DOC; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new Document(){ }};; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new shell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=plain; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=toShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean= newShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=tempDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=targetDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=undefined; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new PlainShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean= empty; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=Document.newInstance; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=clean(); }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=makeShell(); }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new Document(); return; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=Document.createFromShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new XmlDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=getShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=doCreateShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=Document.createDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new Document(...); } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new DomDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=document(); } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=DirtyDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new Document() return; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=doc; }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new DOMDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=Utility.createShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=clean.body; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=initShell(); }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new RawDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=document; return null; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=Document.blankDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=DocUtil; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=cleanNewDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=buildShell() }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=ShallowDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new emptyDocument; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=Clean.createShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=Documents.createShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=clean; }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new Document(); clean; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new CleanShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new Session; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=getShell(); }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=DocumentUtils; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new Document(){ }}; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=clean.body(); } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=Document.blank; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new Document();}; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=document; } else; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new DocumentImpl(); } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=newInstance(); }; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=Session.createShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=new Document(){; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=System.in; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=Node.createShell; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean= new DocumentImpl; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(clean==null){ clean=Document.root; } copySafeNodes(dirtyDocument.body(), clean.body());  
if(dirtyDocument != null){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument!=null){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof Document){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(clean != null){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(clean!=null){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(isDirty){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(debug){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument!= null){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(clean){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.body){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(DEBUG){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(verbose){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.body()){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(clean.body()!=null){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.exists()){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument!=this){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument!=clean){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.isEmpty()){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(null != dirtyDocument){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument !=null){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof Element){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(clean!=dirtyDocument){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.hasBody){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if( dirtyDocument != null){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(true){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument != this){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument!=document){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.hasChildren){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(isDirty(dirtyDocument)){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(clean != dirtyDocument){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(isDirty()){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument != clean){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(recursive){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.isEmpty){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument!=dirtyDocument){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(deep){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof RichDocument){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirty){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument == null){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.exists){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(document != null){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(copySafeNodes){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof RawDocument){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(debugMode){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(isValid(dirtyDocument)){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.hasChildNodes){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(false){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(null!=dirtyDocument){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(safe){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(doc != null){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(validate){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.isValid()){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(needsCopy){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.hasAttachments){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.hasUrls){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument!=nil){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(isValid){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof ShadowDocument){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof SimpleDocument){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirty.body()!=null){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument != document){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument != dirtyDocument){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(readOnly){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(isDirty(dirtyDocument))){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof HTMLDocument){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(isNewDocument){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument is not null){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(body != null){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(clean.exists()){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof BaseDocument){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(isValidDocument){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.isFile()){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(isDirty(dirtyDocument){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof Node){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(sanitize){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(patch){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof SafeDocument){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(isSafe){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof Folder){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof MultiDocument){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument==null){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.documentElement){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirty != null){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof DocumentImpl){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.hasNodes){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.isHtml){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof RootDocument){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(enabled){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(keepSafe){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof Window){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument!=){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(isValidShell){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(isValid(dirtyDocument))){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof Body){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.multipart()){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(needCopy){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(null != clean){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.validate()){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.hasChild){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.validate){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(hasBody){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(log){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(hasChildren){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(merge){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(Dirty){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.hasAttributes){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.isDirectory()){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument != nil){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof Entity){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(valid){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDoc != null){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.hasNode){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(clean instanceof Document){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(clean.body()){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(body){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(modified){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof AbstractDocument){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(keepSafeNodes){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.hasText){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.hasContent){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(clean.body != null){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof DocumentWrapper){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.hasContent){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(isEmpty){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof INode){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(sync){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof XmlDocument){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(useSafeNodes){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof HttpDocument){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(logger){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof TextDocument){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(doc!=null){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(isValid(clean)){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof Content){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument != doc){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dryRun){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof DOMDocument){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof Text){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument != emptyDocument){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(patched){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof DOM){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(clean.body){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.isSafe){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(clean.isEmpty()){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof Shell){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(hasSafeNodes){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.isInitialized()){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(normalize){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.attachments){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.hasContent()){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(clean!=this){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.isShallow){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(isEmpty(dirtyDocument)){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.dirty()){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof Rich){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(body!=null){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(document!=null){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.safe){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument != NULL){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument !== null){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof HttpEntity){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof Form){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.isDocument){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(trace){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(strict){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(filter){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.isDirty()){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(touch){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument!=undefined){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument!=emptyDocument){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(isValid(clean))){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.isDirty){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(debugEnabled){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(cleanDocument != null){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof RemoteDocument){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(exists){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument != dirty){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.root){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.xml()){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(isEmpty(dirtyDocument))){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof DocumentBase){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof AdvancedDocument){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.verbose){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyNode != null){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.isValid){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof Raw){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(isValidShell(clean)){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.content){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.hasDocument){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(doCopy){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.recursive){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.isSubDocument){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.isElement){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(CLEAN){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.hasElements){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(ok){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(shallow){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(isDirtyDocument){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(isNew){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(trusted){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(closed){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(deepCopy){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(clone){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(writable){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(isSecure){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.isDefined()){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.isRoot()){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(active){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(recurse){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(parent){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(Immutable){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(isValid()){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof DOMAware){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.html()){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof DocumentAware){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(patching){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(validation){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.bodyIsArray){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(isOpen){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof Editable){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(update){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(force){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(patchNodes){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(pretty){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(DirtyMode){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(isDirtyNode){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof Multipart){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.isAbsolute()){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.hasFragment){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(doc){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(mutable){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(ready){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(patchDocument){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(isInitialized){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(verboseMode){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument instanceof JDom){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.root()){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(patchNode){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.isNewDocument){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(isEmptyDocument){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.isHTML){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(isValidContent){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyParent){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.isNode){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(isActive){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(copySafe){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(isHtml){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(dirtyDocument.plain()){ copySafeNodes(dirtyDocument.body(), clean.body());}  
if(refresh){ copySafeNodes(dirtyDocument.body(), clean.body());}  
